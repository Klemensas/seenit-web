{"version":3,"sources":["assets/logos/chrome.svg","assets/logos/vlc.svg","graphql/index.tsx","auth/AuthRoute.tsx","assets/logos/eyes.svg","common/Logo.tsx","common/Search.tsx","common/useThrottle.ts","common/Navigation.tsx","common/helpers/storage.ts","graphql/helpers.ts","auth/Login.tsx","Home.tsx","common/Rating.tsx","common/InfiniteScroll.tsx","common/useInfiniteScroll.tsx","common/helpers/watched.ts","profile/Profile.tsx","setup/Setup.tsx","common/RelativeDate.tsx","common/Seen.tsx","common/dialog/query-params.ts","common/helpers/general.ts","common/BlockingAlert.tsx","common/DeleteConfirmation.tsx","dashboard/AutoTrackedItems.tsx","common/toaster.ts","dashboard/Dashboard.tsx","graphql/fetchMore.ts","common/helpers/graphql.ts","show/Review.tsx","show/ReviewList.tsx","show/Watched.tsx","show/UserWatchedList.tsx","common/RatingInput.tsx","common/WatchedMovieForm.tsx","common/WatchedTvForm.tsx","common/WatchedForm.tsx","common/WatchedMutationForm.tsx","show/WatchedDialog.tsx","show/Movie/Movie.tsx","show/Tv/EpisodeDetails.tsx","show/Tv/Season.tsx","show/Tv/TvOverview.tsx","show/Tv/WatchedTvDialog.tsx","show/Tv/Tv.tsx","settings/Blacklist.tsx","settings/Settings.tsx","generic/NotFound.tsx","layouts/BasicLayout.tsx","show/AutoTrackedDialog.tsx","DialogRoutes.tsx","App.tsx","serviceWorker.ts","graphql/resolvers.ts","graphql/introspection.ts","graphql/typePolicies.ts","services/extension.ts","apollo.ts","ExtensionSetupBlocker.tsx","index.tsx"],"names":["module","exports","ItemType","TvItemType","TmdbMediaType","CacheControlScope","WatchedTvItemPropsFragmentDoc","gql","WatchedPropsFragmentDoc","WatchedCursorPropsFragmentDoc","ItemDataFragmentDoc","WatchedItemPropsFragmentDoc","WatchedCursorWithItemsPropsFragmentDoc","SeasonPropsFragmentDoc","LoginDocument","RegisterDocument","LogoutDocument","AddWatchedDocument","useAddWatchedMutation","baseOptions","Apollo","EditWatchedDocument","useEditWatchedMutation","RemoveWatchedDocument","RemoveAutoTrackedDocument","ConvertAutoTrackedDocument","UpdateSettingsDocument","AuthDocument","useAuthQuery","IsExtensionCheckDoneDocument","UserDocument","useUserQuery","MovieDocument","useMovieQuery","TvDocument","useTvQuery","WatchedDocument","WatchesDocument","useWatchesQuery","ReviewsDocument","SearchContentDocument","AutoTrackedListDocument","AutoTrackedDocument","SeasonsDocument","SettingsDocument","AuthRoute","redirectTo","redirectComponent","routeProps","data","auth","component","to","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","LogoSize","createElement","className","d","_ref7","_ref8","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","sizes","text","textLarge","logo","large","Logo","size","logoSize","eyeSize","eyePadding","style","fontSize","height","padding","defaultProps","renderOption","label","item","handleClick","modifiers","matchesPredicate","active","id","onClick","Search","selected","setSelected","React","query","setQuery","callback","fn","wait","options","timer","useRef","fnRef","optionsRef","currentArgs","current","cancel","useCallback","clearTimeout","undefined","args","leading","setTimeout","callPending","useEffect","useThrottle","payload","shouldSearch","searchQuery","variables","skip","searchContent","reduce","acc","concat","release_date","split","value","itemRenderer","items","onQueryChange","onItemSelect","noResults","disabled","loading","initialContent","inputValueRenderer","popoverProps","minimal","fill","usePortal","position","PopoverPosition","BOTTOM","inputProps","rightElement","SearchPage","history","useHistory","type","push","toLowerCase","UserBlock","setAuth","content","name","tagName","Position","icon","Navigation","fixedToTop","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","getStorageValue","window","localStorage","getItem","JSON","parse","updateStorage","setItem","stringify","removeItem","setAuthData","cache","token","writeQuery","Login","useState","email","password","form","setForm","isLogin","setLogin","mutationParams","update","login","register","user","document","dispatchEvent","CustomEvent","useRegisterMutation","mutationFn","onSubmit","event","a","async","preventDefault","labelFor","leftIcon","onChange","placeholder","intent","Intent","PRIMARY","Home","width","alt","src","chromeSvg","vlcSvg","Rating","max","formattedValue","readonly","initialRating","fractions","fullSymbol","IconNames","STAR","color","emptySymbol","STAR_EMPTY","InfiniteScroll","children","loadMore","hasMore","isLoading","rootMargin","observer","IntersectionObserver","isIntersecting","observe","disconnect","useInfiniteScroll","formatTvString","tvItem","season_number","season","episode_number","fetchMore","updateQuery","prev","fetchMoreResult","prevWatched","watched","newWatched","Profile","targetIndex","useParams","notifyOnNetworkStatusChange","cursor","targetItem","map","index","itemType","rating","review","createdAt","Movie","e","currentTarget","getBoundingClientRect","left","top","poster_path","body","COMMENT","formatDistanceStrict","Date","now","addSuffix","config","velocity","friction","clamp","from","innerWidth","innerHeight","onRest","maxHeight","objectFit","backgroundColor","Setup","RelativeDate","date","baseDate","format","Seen","route","DialogQueryParams","container","getElementById","BlockingAlert","canEscapeKeyCancel","canOutsideClickCancel","confirmButtonText","cancelButtonText","onConfirm","onCancel","overlayProps","portalContainer","classNames","Classes","ALERT","canEscapeKeyClose","canOutsideClickClose","onClose","ALERT_BODY","iconSize","ALERT_CONTENTS","ALERT_FOOTER","DeleteConfirmation","isOpen","DANGER","AutoTrackedItems","cb","meta","isSelected","onSelect","onDeselect","onSave","onRemove","location","useLocation","search","URLSearchParams","set","EditingAutoTracked","elevation","description","tvData","episode","provider","url","display","textOverflow","whiteSpace","overflow","filename","stopPropagation","toString","replace","AppToaster","Toaster","create","TOP_RIGHT","Dashboard","localUser","userData","watchesData","userId","autoTrackedData","useRemoveAutoTrackedMutation","refetchQueries","removeAutoTracked","useConvertAutoTrackedMutation","convertAutoTracked","selectedIds","setSelectedIds","pendingRemoval","setPendingRemoval","checked","autoTrackedList","autoTracked","indeterminate","small","ids","filter","trackedItem","find","hasItemlessIds","show","message","WARNING","arr","INTENT_PRIMARY","includes","zIndex","sid","watches","mergeWatches","next","mergeReviews","reviews","mergeProps","Review","ReviewList","reviewsVariables","itemId","tvItemId","reviewsData","Watched","onClickEdit","dialogOpen","deleteAlert","setDeleteAlert","removedWatched","removedId","removeWatched","dataId","identify","__typename","evict","gc","loadingRemoveWatched","Elevation","ONE","UserWatchedList","onEdit","watchesVariables","userWatched","RatingInput","Icon","SIZE_LARGE","WatchedMovieForm","values","poster","enableReinitialize","initialValues","handleChange","handleSubmit","setFieldValue","formatDate","toLocaleString","parseDate","str","growVertically","itemFilter","seasonName","renderEpisode","lastSeasonEpisode","lastSeason","WatchedTvForm","seasons","isSeasonsLoading","seasonIndex","episodes","episodeIndex","getSelectOptions","helperText","selectedItem","itemListPredicate","WatchedForm","editingWatched","isEditing","WatchedMutationForm","afterSave","addWatched","addWatchedLoading","editWatched","editWatchedLoading","tvItemType","Episode","Tv","autoTrackedId","WatchedDialog","lazy","match","setEditingWatched","returnPartialData","movie","overview","vote_count","vote_average","air_date","tvId","Season","expanded","isExpanded","setIsExpanded","maxWidth","ellipsize","pathname","TvOverview","tv","onEditWatched","WatchedTvDialog","addWatchedVariables","first_air_date","path","render","episodeId","getSeasonEpisode","params","EpisodeDetails","inputRegex","RegExp","submitItem","list","setValue","updateList","setError","hasClashing","test","regexVal","Blacklist","helperTextPrefix","input","setInput","error","matches","cleanList","NONE","onKeyPress","Colors","RED1","val","Settings","pollInterval","fetchPolicy","currentSettings","settings","useUpdateSettingsMutation","updateUserSettings","updateSettings","general","autoConvert","extension","autoTrack","minLengthSeconds","blacklist","isSubmitting","onValueChange","NotFound","action","BasicLayout","AutoTrackedDialog","queryVariables","tvQuery","movieQuery","dataItem","AutoTrackedDialogWithQueryParams","searchParams","delete","WatchedDialogWithQueryParams","EditingWatched","DialogRoutes","editingAutoTracked","get","watchedData","useWatchedQuery","App","exact","Boolean","hostname","typeDefs","resolvers","Mutation","logout","root","client","preservedCache","ROOT_QUERY","isExtensionCheckDone","extract","restore","result","possibleTypes","Item","TvItem","AutoTrackedResult","TmdbMedia","typePolicies","WatchedCursor","fields","read","readField","Query","_","toReference","extensionSyncPromise","Promise","resolve","reject","addEventListener","catch","extensionAuthPromise","chrome","runtime","sendMessage","process","response","lastError","err","then","errorLink","onError","graphQLErrors","networkError","some","extensions","code","InMemoryCache","introspectionQueryResultData","httpLink","BatchHttpLink","uri","authLink","setContext","request","headers","authorization","apolloClient","ApolloClient","link","ApolloLink","ExtensionSetupBlocker","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38481d62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chrome.fb7a4d16.svg\";","module.exports = __webpack_public_path__ + \"static/media/vlc.78c4bd2f.svg\";","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _?: Maybe<Scalars['Boolean']>;\n  auth?: Maybe<User>;\n  autoTracked: AutoTracked;\n  autoTrackedList: AutoTrackedCursor;\n  episode: Episode;\n  isExtensionCheckDone?: Maybe<Scalars['Boolean']>;\n  me: User;\n  movie: Movie;\n  reviews: ReviewCursor;\n  searchContent: Array<SearchItem>;\n  season: Season;\n  seasons: Array<Season>;\n  settings: Settings;\n  tv: Tv;\n  user: User;\n  users?: Maybe<Array<User>>;\n  watched: Watched;\n  watches: WatchedCursor;\n};\n\nexport type QueryAutoTrackedArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryAutoTrackedListArgs = {\n  userId: Scalars['ID'];\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type QueryEpisodeArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryMovieArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryReviewsArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type QuerySearchContentArgs = {\n  title: Scalars['String'];\n};\n\nexport type QuerySeasonArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QuerySeasonsArgs = {\n  itemId: Scalars['ID'];\n};\n\nexport type QueryTvArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryUserArgs = {\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type QueryWatchedArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryWatchesArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type Movie = {\n  __typename?: 'Movie';\n  id: Scalars['ID'];\n  adult: Scalars['Boolean'];\n  backdrop_path?: Maybe<Scalars['String']>;\n  belongs_to_collection?: Maybe<Collection>;\n  budget: Scalars['Int'];\n  genre?: Maybe<Array<Maybe<Genre>>>;\n  homepage?: Maybe<Scalars['String']>;\n  imdb_id?: Maybe<Scalars['String']>;\n  original_language?: Maybe<Scalars['String']>;\n  original_title?: Maybe<Scalars['String']>;\n  overview: Scalars['String'];\n  popularity?: Maybe<Scalars['Float']>;\n  poster_path?: Maybe<Scalars['String']>;\n  production_companies?: Maybe<Array<Maybe<Company>>>;\n  production_countries?: Maybe<Array<Maybe<Country>>>;\n  release_date: Scalars['String'];\n  revenue?: Maybe<Scalars['Int']>;\n  runtime?: Maybe<Scalars['Int']>;\n  spoken_languages?: Maybe<Array<Maybe<Language>>>;\n  status?: Maybe<Scalars['String']>;\n  tagline?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  video?: Maybe<Scalars['Boolean']>;\n  vote_average: Scalars['Float'];\n  vote_count: Scalars['Int'];\n  tmdbId?: Maybe<Scalars['Int']>;\n  watched: WatchedCursor;\n};\n\nexport type MovieWatchedArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type Collection = {\n  __typename?: 'Collection';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  poster_path?: Maybe<Scalars['String']>;\n  backdrop_path?: Maybe<Scalars['String']>;\n};\n\nexport type Genre = {\n  __typename?: 'Genre';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Company = {\n  __typename?: 'Company';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  logo_path?: Maybe<Scalars['String']>;\n  origin_country?: Maybe<Scalars['String']>;\n};\n\nexport type Country = {\n  __typename?: 'Country';\n  iso_3166_1?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Language = {\n  __typename?: 'Language';\n  iso_639_1?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type WatchedCursor = {\n  __typename?: 'WatchedCursor';\n  watched: Array<Watched>;\n  cursor?: Maybe<Scalars['String']>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type Watched = {\n  __typename?: 'Watched';\n  id: Scalars['ID'];\n  tmdbId: Scalars['Int'];\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n  userId: Scalars['ID'];\n  user: User;\n  itemType: ItemType;\n  item: Item;\n  rating?: Maybe<Rating>;\n  review?: Maybe<Review>;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n  watched: WatchedCursor;\n  settings: Settings;\n};\n\nexport type UserWatchedArgs = {\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type Settings = {\n  __typename?: 'Settings';\n  id: Scalars['ID'];\n  general: GeneralSettings;\n  extension: ExtensionSettings;\n  user: User;\n};\n\nexport type GeneralSettings = {\n  __typename?: 'GeneralSettings';\n  autoConvert: Scalars['Boolean'];\n};\n\nexport type ExtensionSettings = {\n  __typename?: 'ExtensionSettings';\n  autoTrack: Scalars['Boolean'];\n  minLengthSeconds: Scalars['Int'];\n  blacklist: Array<Scalars['String']>;\n};\n\nexport enum ItemType {\n  Movie = 'Movie',\n  Tv = 'Tv',\n}\n\nexport type Item = Movie | Tv;\n\nexport type Tv = {\n  __typename?: 'Tv';\n  id: Scalars['ID'];\n  backdrop_path?: Maybe<Scalars['String']>;\n  created_by?: Maybe<Array<Maybe<Author>>>;\n  episode_run_time?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  first_air_date: Scalars['String'];\n  genres?: Maybe<Array<Maybe<Genre>>>;\n  homepage: Scalars['String'];\n  in_production: Scalars['Boolean'];\n  languages?: Maybe<Array<Maybe<Scalars['String']>>>;\n  last_air_date: Scalars['String'];\n  last_episode_to_air?: Maybe<Episode>;\n  name: Scalars['String'];\n  next_episode_to_air?: Maybe<Episode>;\n  networks?: Maybe<Array<Maybe<Network>>>;\n  number_of_episodes: Scalars['Int'];\n  number_of_seasons: Scalars['Int'];\n  origin_country?: Maybe<Array<Maybe<Scalars['String']>>>;\n  original_language: Scalars['String'];\n  original_name: Scalars['String'];\n  overview: Scalars['String'];\n  popularity: Scalars['Int'];\n  poster_path?: Maybe<Scalars['String']>;\n  production_companies?: Maybe<Array<Maybe<Company>>>;\n  seasons: Array<Season>;\n  status: Scalars['String'];\n  type: Scalars['String'];\n  vote_average: Scalars['Float'];\n  vote_count: Scalars['Int'];\n  tmdbId?: Maybe<Scalars['Int']>;\n  watched: WatchedCursor;\n};\n\nexport type TvWatchedArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type Author = {\n  __typename?: 'Author';\n  id?: Maybe<Scalars['Int']>;\n  credit_id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['Int']>;\n  profile_path?: Maybe<Scalars['String']>;\n};\n\nexport type Episode = {\n  __typename?: 'Episode';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n  episode_number: Scalars['Int'];\n  air_date?: Maybe<Scalars['String']>;\n  production_code?: Maybe<Scalars['String']>;\n  still_path?: Maybe<Scalars['String']>;\n  vote_average: Scalars['Float'];\n  vote_count: Scalars['Int'];\n  tmdbId: Scalars['Int'];\n  seasonId: Scalars['ID'];\n  season: Season;\n};\n\nexport type Season = {\n  __typename?: 'Season';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n  air_date?: Maybe<Scalars['String']>;\n  episode_count: Scalars['Int'];\n  poster_path?: Maybe<Scalars['String']>;\n  season_number: Scalars['Int'];\n  tmdbId: Scalars['Int'];\n  tvId: Scalars['ID'];\n  tv: Tv;\n  episodes: Array<Episode>;\n};\n\nexport type Network = {\n  __typename?: 'Network';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  logo_path?: Maybe<Scalars['String']>;\n  origin_country?: Maybe<Scalars['String']>;\n};\n\nexport type Rating = {\n  __typename?: 'Rating';\n  id: Scalars['ID'];\n  value: Scalars['Float'];\n  tmdbId: Scalars['Int'];\n  userId: Scalars['ID'];\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n  user?: Maybe<User>;\n  watched?: Maybe<Watched>;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n};\n\nexport enum TvItemType {\n  Season = 'Season',\n  Episode = 'Episode',\n}\n\nexport type TvItem = Season | Episode;\n\nexport type Review = {\n  __typename?: 'Review';\n  id: Scalars['ID'];\n  body: Scalars['String'];\n  tmdbId: Scalars['Int'];\n  userId: Scalars['ID'];\n  user: User;\n  watched: Watched;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n};\n\nexport type SearchItem = {\n  __typename?: 'SearchItem';\n  id: Scalars['String'];\n  tmdbId: Scalars['Int'];\n  title: Scalars['String'];\n  release_date?: Maybe<Scalars['String']>;\n  type: ItemType;\n};\n\nexport type ReviewCursor = {\n  __typename?: 'ReviewCursor';\n  reviews: Array<Review>;\n  cursor?: Maybe<Scalars['String']>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type AutoTrackedCursor = {\n  __typename?: 'AutoTrackedCursor';\n  autoTracked: Array<AutoTracked>;\n  cursor?: Maybe<Scalars['String']>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type AutoTracked = {\n  __typename?: 'AutoTracked';\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  user: User;\n  itemType?: Maybe<ItemType>;\n  item?: Maybe<Item>;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n  meta: AutoTrackedMeta;\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n};\n\nexport type AutoTrackedMeta = {\n  __typename?: 'AutoTrackedMeta';\n  title?: Maybe<Scalars['String']>;\n  tvData?: Maybe<AutoTrackedMetaTvData>;\n  filename?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  provider: Scalars['String'];\n};\n\nexport type AutoTrackedMetaTvData = {\n  __typename?: 'AutoTrackedMetaTvData';\n  season?: Maybe<Scalars['String']>;\n  episode?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  _?: Maybe<Scalars['Boolean']>;\n  addAutoTracked: AutoTrackedResult;\n  addWatched: Watched;\n  convertAutoTracked: ConvertedAutoTracked;\n  editWatched: Watched;\n  login: LocalAuth;\n  logout?: Maybe<Scalars['Boolean']>;\n  register: LocalAuth;\n  removeAutoTracked: Array<Scalars['ID']>;\n  removeWatched: Scalars['ID'];\n  updateSettings: Settings;\n};\n\nexport type MutationAddAutoTrackedArgs = {\n  meta: AutoTrackedMetaInput;\n  createdAt: Scalars['Float'];\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n};\n\nexport type MutationAddWatchedArgs = {\n  itemId: Scalars['ID'];\n  itemType: ItemType;\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  createdAt?: Maybe<Scalars['Float']>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  autoTrackedId?: Maybe<Scalars['ID']>;\n};\n\nexport type MutationConvertAutoTrackedArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\nexport type MutationEditWatchedArgs = {\n  id: Scalars['ID'];\n  createdAt?: Maybe<Scalars['Float']>;\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n};\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationRegisterArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationRemoveAutoTrackedArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\nexport type MutationRemoveWatchedArgs = {\n  itemId: Scalars['ID'];\n};\n\nexport type MutationUpdateSettingsArgs = {\n  general: GeneralSettingsInput;\n  extension: ExtensionSettingsInput;\n};\n\nexport type RatingInput = {\n  id?: Maybe<Scalars['ID']>;\n  value: Scalars['Float'];\n};\n\nexport type ReviewInput = {\n  id?: Maybe<Scalars['ID']>;\n  body: Scalars['String'];\n};\n\nexport type LocalAuth = {\n  __typename?: 'LocalAuth';\n  user: User;\n  token: Scalars['String'];\n};\n\nexport type AutoTrackedMetaInput = {\n  title?: Maybe<Scalars['String']>;\n  tvData?: Maybe<TvDataInput>;\n  filename?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  provider: Scalars['String'];\n};\n\nexport type TvDataInput = {\n  season?: Maybe<Scalars['String']>;\n  episode?: Maybe<Scalars['String']>;\n};\n\nexport type AutoTrackedResult = AutoTracked | Watched;\n\nexport type ConvertedAutoTracked = {\n  __typename?: 'ConvertedAutoTracked';\n  removedIds: Array<Scalars['ID']>;\n  watched: Array<Watched>;\n};\n\nexport type GeneralSettingsInput = {\n  autoConvert: Scalars['Boolean'];\n};\n\nexport type ExtensionSettingsInput = {\n  autoTrack: Scalars['Boolean'];\n  minLengthSeconds: Scalars['Int'];\n  blacklist: Array<Scalars['String']>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  _?: Maybe<Scalars['Boolean']>;\n};\n\nexport type TmdbMovie = {\n  __typename?: 'TmdbMovie';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  overview?: Maybe<Scalars['String']>;\n  original_title?: Maybe<Scalars['String']>;\n  original_language?: Maybe<Scalars['String']>;\n  poster_path?: Maybe<Scalars['String']>;\n  genre_ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  adult?: Maybe<Scalars['Boolean']>;\n  release_date?: Maybe<Scalars['String']>;\n  backdrop_path?: Maybe<Scalars['String']>;\n  video?: Maybe<Scalars['Boolean']>;\n  vote_count?: Maybe<Scalars['Int']>;\n  vote_average?: Maybe<Scalars['Float']>;\n  popularity?: Maybe<Scalars['Int']>;\n  media_type?: Maybe<TmdbMediaType>;\n};\n\nexport enum TmdbMediaType {\n  Movie = 'Movie',\n  Tv = 'Tv',\n}\n\nexport type TmdbTv = {\n  __typename?: 'TmdbTv';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  overview?: Maybe<Scalars['String']>;\n  original_name?: Maybe<Scalars['String']>;\n  original_language?: Maybe<Scalars['String']>;\n  poster_path?: Maybe<Scalars['String']>;\n  genre_ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  backdrop_path?: Maybe<Scalars['String']>;\n  first_air_date?: Maybe<Scalars['String']>;\n  origin_country?: Maybe<Array<Maybe<Scalars['String']>>>;\n  vote_count?: Maybe<Scalars['Int']>;\n  vote_average?: Maybe<Scalars['Float']>;\n  popularity?: Maybe<Scalars['Int']>;\n  media_type?: Maybe<TmdbMediaType>;\n};\n\nexport type TmdbPerson = {\n  __typename?: 'TmdbPerson';\n  popularity?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  vote_average?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  profile_path?: Maybe<Scalars['String']>;\n  adult?: Maybe<Scalars['String']>;\n  known_for?: Maybe<TmdbMedia>;\n  media_type?: Maybe<TmdbMediaType>;\n};\n\nexport type TmdbMedia = TmdbMovie | TmdbTv;\n\nexport type Search = {\n  __typename?: 'Search';\n  results?: Maybe<Array<TmdbMedia>>;\n  page: Scalars['Int'];\n  total_pages: Scalars['Int'];\n  total_results: Scalars['Int'];\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE',\n}\n\nexport type UserInput = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  updatedAt?: Maybe<Scalars['Float']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login: { __typename?: 'LocalAuth' } & Pick<LocalAuth, 'token'> & {\n      user: { __typename?: 'User' } & Pick<\n        User,\n        'id' | 'name' | 'email' | 'createdAt' | 'updatedAt'\n      > & {\n          settings: { __typename?: 'Settings' } & {\n            general: { __typename?: 'GeneralSettings' } & Pick<\n              GeneralSettings,\n              'autoConvert'\n            >;\n            extension: { __typename?: 'ExtensionSettings' } & Pick<\n              ExtensionSettings,\n              'autoTrack' | 'minLengthSeconds' | 'blacklist'\n            >;\n          };\n        };\n    };\n};\n\nexport type RegisterMutationVariables = Exact<{\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type RegisterMutation = { __typename?: 'Mutation' } & {\n  register: { __typename?: 'LocalAuth' } & Pick<LocalAuth, 'token'> & {\n      user: { __typename?: 'User' } & Pick<\n        User,\n        'id' | 'name' | 'email' | 'createdAt' | 'updatedAt'\n      > & {\n          settings: { __typename?: 'Settings' } & {\n            general: { __typename?: 'GeneralSettings' } & Pick<\n              GeneralSettings,\n              'autoConvert'\n            >;\n            extension: { __typename?: 'ExtensionSettings' } & Pick<\n              ExtensionSettings,\n              'autoTrack' | 'minLengthSeconds' | 'blacklist'\n            >;\n          };\n        };\n    };\n};\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never }>;\n\nexport type LogoutMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'logout'\n>;\n\nexport type AddWatchedMutationVariables = Exact<{\n  itemId: Scalars['ID'];\n  itemType: ItemType;\n  createdAt: Scalars['Float'];\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  autoTrackedId?: Maybe<Scalars['ID']>;\n}>;\n\nexport type AddWatchedMutation = { __typename?: 'Mutation' } & {\n  addWatched: { __typename?: 'Watched' } & Pick<\n    Watched,\n    'id' | 'itemType' | 'createdAt' | 'tvItemType'\n  > & {\n      rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>>;\n      review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'id' | 'body'>>;\n      tvItem?: Maybe<\n        | ({ __typename?: 'Season' } & Pick<Season, 'id' | 'season_number'>)\n        | ({ __typename?: 'Episode' } & Pick<\n            Episode,\n            'id' | 'episode_number'\n          > & {\n              season: { __typename?: 'Season' } & Pick<\n                Season,\n                'id' | 'season_number'\n              >;\n            })\n      >;\n    };\n};\n\nexport type EditWatchedMutationVariables = Exact<{\n  id: Scalars['ID'];\n  createdAt: Scalars['Float'];\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n}>;\n\nexport type EditWatchedMutation = { __typename?: 'Mutation' } & {\n  editWatched: { __typename?: 'Watched' } & Pick<\n    Watched,\n    'id' | 'itemType' | 'createdAt' | 'tvItemType'\n  > & {\n      rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>>;\n      review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'id' | 'body'>>;\n      tvItem?: Maybe<\n        | ({ __typename?: 'Season' } & Pick<Season, 'id' | 'season_number'>)\n        | ({ __typename?: 'Episode' } & Pick<\n            Episode,\n            'id' | 'episode_number'\n          > & {\n              season: { __typename?: 'Season' } & Pick<\n                Season,\n                'id' | 'season_number'\n              >;\n            })\n      >;\n    };\n};\n\nexport type RemoveWatchedMutationVariables = Exact<{\n  itemId: Scalars['ID'];\n}>;\n\nexport type RemoveWatchedMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'removeWatched'\n>;\n\nexport type RemoveAutoTrackedMutationVariables = Exact<{\n  ids: Array<Scalars['ID']>;\n}>;\n\nexport type RemoveAutoTrackedMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'removeAutoTracked'\n>;\n\nexport type ConvertAutoTrackedMutationVariables = Exact<{\n  ids: Array<Scalars['ID']>;\n}>;\n\nexport type ConvertAutoTrackedMutation = { __typename?: 'Mutation' } & {\n  convertAutoTracked: { __typename?: 'ConvertedAutoTracked' } & Pick<\n    ConvertedAutoTracked,\n    'removedIds'\n  >;\n};\n\nexport type UpdateSettingsMutationVariables = Exact<{\n  general: GeneralSettingsInput;\n  extension: ExtensionSettingsInput;\n}>;\n\nexport type UpdateSettingsMutation = { __typename?: 'Mutation' } & {\n  updateSettings: { __typename?: 'Settings' } & {\n    general: { __typename?: 'GeneralSettings' } & Pick<\n      GeneralSettings,\n      'autoConvert'\n    >;\n    extension: { __typename?: 'ExtensionSettings' } & Pick<\n      ExtensionSettings,\n      'autoTrack' | 'minLengthSeconds' | 'blacklist'\n    >;\n  };\n};\n\nexport type AuthQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type AuthQuery = { __typename?: 'Query' } & {\n  auth?: Maybe<\n    { __typename?: 'User' } & Pick<\n      User,\n      'id' | 'name' | 'email' | 'createdAt'\n    > & {\n        settings: { __typename?: 'Settings' } & {\n          general: { __typename?: 'GeneralSettings' } & Pick<\n            GeneralSettings,\n            'autoConvert'\n          >;\n          extension: { __typename?: 'ExtensionSettings' } & Pick<\n            ExtensionSettings,\n            'autoTrack' | 'minLengthSeconds' | 'blacklist'\n          >;\n        };\n      }\n  >;\n};\n\nexport type IsExtensionCheckDoneQueryVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type IsExtensionCheckDoneQuery = { __typename?: 'Query' } & Pick<\n  Query,\n  'isExtensionCheckDone'\n>;\n\nexport type WatchedPropsFragment = { __typename?: 'Watched' } & Pick<\n  Watched,\n  'id' | 'createdAt' | 'tvItemType'\n> & {\n    tvItem?: Maybe<\n      | ({ __typename?: 'Season' } & WatchedTvItemProps_Season_Fragment)\n      | ({ __typename?: 'Episode' } & WatchedTvItemProps_Episode_Fragment)\n    >;\n    rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>>;\n    review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'id' | 'body'>>;\n    user: { __typename?: 'User' } & Pick<User, 'id' | 'name'>;\n  };\n\nexport type WatchedItemPropsFragment = { __typename?: 'Watched' } & Pick<\n  Watched,\n  'itemType'\n> & {\n    item:\n      | ({ __typename?: 'Movie' } & ItemData_Movie_Fragment)\n      | ({ __typename?: 'Tv' } & ItemData_Tv_Fragment);\n  };\n\ntype WatchedTvItemProps_Season_Fragment = { __typename?: 'Season' } & Pick<\n  Season,\n  'id' | 'season_number'\n>;\n\ntype WatchedTvItemProps_Episode_Fragment = { __typename?: 'Episode' } & Pick<\n  Episode,\n  'id' | 'episode_number'\n> & {\n    season: { __typename?: 'Season' } & Pick<Season, 'id' | 'season_number'>;\n  };\n\nexport type WatchedTvItemPropsFragment =\n  | WatchedTvItemProps_Season_Fragment\n  | WatchedTvItemProps_Episode_Fragment;\n\nexport type WatchedCursorPropsFragment = {\n  __typename?: 'WatchedCursor';\n} & Pick<WatchedCursor, 'cursor' | 'hasMore'> & {\n    watched: Array<{ __typename?: 'Watched' } & WatchedPropsFragment>;\n  };\n\nexport type WatchedCursorWithItemsPropsFragment = {\n  __typename?: 'WatchedCursor';\n} & Pick<WatchedCursor, 'cursor' | 'hasMore'> & {\n    watched: Array<\n      { __typename?: 'Watched' } & WatchedPropsFragment &\n        WatchedItemPropsFragment\n    >;\n  };\n\nexport type SeasonPropsFragment = { __typename?: 'Season' } & Pick<\n  Season,\n  | 'id'\n  | 'name'\n  | 'overview'\n  | 'episode_count'\n  | 'air_date'\n  | 'poster_path'\n  | 'season_number'\n> & {\n    episodes: Array<\n      { __typename?: 'Episode' } & Pick<\n        Episode,\n        | 'id'\n        | 'name'\n        | 'overview'\n        | 'episode_number'\n        | 'air_date'\n        | 'vote_average'\n        | 'vote_count'\n      >\n    >;\n  };\n\nexport type UserQueryVariables = Exact<{\n  name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type UserQuery = { __typename?: 'Query' } & {\n  user: { __typename?: 'User' } & Pick<User, 'id' | 'name' | 'createdAt'> & {\n      watched: {\n        __typename?: 'WatchedCursor';\n      } & WatchedCursorWithItemsPropsFragment;\n    };\n};\n\nexport type MovieQueryVariables = Exact<{\n  id?: Maybe<Scalars['ID']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type MovieQuery = { __typename?: 'Query' } & {\n  movie: { __typename?: 'Movie' } & Pick<\n    Movie,\n    | 'id'\n    | 'title'\n    | 'overview'\n    | 'release_date'\n    | 'poster_path'\n    | 'backdrop_path'\n    | 'vote_average'\n    | 'vote_count'\n  > & {\n      watched: { __typename?: 'WatchedCursor' } & WatchedCursorPropsFragment;\n    };\n};\n\nexport type TvQueryVariables = Exact<{\n  id?: Maybe<Scalars['ID']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type TvQuery = { __typename?: 'Query' } & {\n  tv: { __typename?: 'Tv' } & Pick<\n    Tv,\n    | 'id'\n    | 'name'\n    | 'overview'\n    | 'first_air_date'\n    | 'poster_path'\n    | 'backdrop_path'\n    | 'vote_average'\n    | 'vote_count'\n  > & {\n      seasons: Array<{ __typename?: 'Season' } & SeasonPropsFragment>;\n      watched: { __typename?: 'WatchedCursor' } & WatchedCursorPropsFragment;\n    };\n};\n\nexport type WatchedQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type WatchedQuery = { __typename?: 'Query' } & {\n  watched: { __typename?: 'Watched' } & WatchedPropsFragment &\n    WatchedItemPropsFragment;\n};\n\nexport type WatchesQueryVariables = Exact<{\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  cursor?: Maybe<Scalars['String']>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n}>;\n\nexport type WatchesQuery = { __typename?: 'Query' } & {\n  watches: {\n    __typename?: 'WatchedCursor';\n  } & WatchedCursorWithItemsPropsFragment;\n};\n\nexport type ReviewsQueryVariables = Exact<{\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  cursor?: Maybe<Scalars['String']>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n}>;\n\nexport type ReviewsQuery = { __typename?: 'Query' } & {\n  reviews: { __typename?: 'ReviewCursor' } & Pick<\n    ReviewCursor,\n    'cursor' | 'hasMore'\n  > & {\n      reviews: Array<\n        { __typename?: 'Review' } & Pick<Review, 'id' | 'body'> & {\n            watched: { __typename?: 'Watched' } & Pick<\n              Watched,\n              'id' | 'createdAt' | 'tvItemType'\n            > & {\n                rating?: Maybe<\n                  { __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>\n                >;\n                tvItem?: Maybe<\n                  | ({\n                      __typename?: 'Season';\n                    } & WatchedTvItemProps_Season_Fragment)\n                  | ({\n                      __typename?: 'Episode';\n                    } & WatchedTvItemProps_Episode_Fragment)\n                >;\n                user: { __typename?: 'User' } & Pick<User, 'id' | 'name'>;\n              };\n          }\n      >;\n    };\n};\n\nexport type SearchContentQueryVariables = Exact<{\n  title: Scalars['String'];\n}>;\n\nexport type SearchContentQuery = { __typename?: 'Query' } & {\n  searchContent: Array<\n    { __typename?: 'SearchItem' } & Pick<\n      SearchItem,\n      'id' | 'tmdbId' | 'title' | 'release_date' | 'type'\n    >\n  >;\n};\n\nexport type AutoTrackedListQueryVariables = Exact<{\n  userId: Scalars['ID'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type AutoTrackedListQuery = { __typename?: 'Query' } & {\n  autoTrackedList: { __typename?: 'AutoTrackedCursor' } & Pick<\n    AutoTrackedCursor,\n    'cursor' | 'hasMore'\n  > & {\n      autoTracked: Array<\n        { __typename?: 'AutoTracked' } & Pick<\n          AutoTracked,\n          'id' | 'itemType' | 'tvItemType' | 'createdAt'\n        > & {\n            item?: Maybe<\n              | ({ __typename?: 'Movie' } & ItemData_Movie_Fragment)\n              | ({ __typename?: 'Tv' } & ItemData_Tv_Fragment)\n            >;\n            tvItem?: Maybe<\n              | ({ __typename?: 'Season' } & WatchedTvItemProps_Season_Fragment)\n              | ({\n                  __typename?: 'Episode';\n                } & WatchedTvItemProps_Episode_Fragment)\n            >;\n            meta: { __typename?: 'AutoTrackedMeta' } & Pick<\n              AutoTrackedMeta,\n              'title' | 'filename' | 'url' | 'provider'\n            > & {\n                tvData?: Maybe<\n                  { __typename?: 'AutoTrackedMetaTvData' } & Pick<\n                    AutoTrackedMetaTvData,\n                    'season' | 'episode'\n                  >\n                >;\n              };\n          }\n      >;\n    };\n};\n\ntype ItemData_Movie_Fragment = { __typename?: 'Movie' } & Pick<\n  Movie,\n  'id' | 'title' | 'release_date' | 'poster_path' | 'backdrop_path'\n>;\n\ntype ItemData_Tv_Fragment = { __typename?: 'Tv' } & Pick<\n  Tv,\n  'id' | 'name' | 'first_air_date' | 'poster_path' | 'backdrop_path'\n>;\n\nexport type ItemDataFragment = ItemData_Movie_Fragment | ItemData_Tv_Fragment;\n\nexport type AutoTrackedQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type AutoTrackedQuery = { __typename?: 'Query' } & {\n  autoTracked: { __typename?: 'AutoTracked' } & Pick<\n    AutoTracked,\n    'id' | 'itemType' | 'tvItemType' | 'createdAt'\n  > & {\n      item?: Maybe<\n        | ({ __typename?: 'Movie' } & ItemData_Movie_Fragment)\n        | ({ __typename?: 'Tv' } & ItemData_Tv_Fragment)\n      >;\n      tvItem?: Maybe<\n        | ({ __typename?: 'Season' } & WatchedTvItemProps_Season_Fragment)\n        | ({ __typename?: 'Episode' } & WatchedTvItemProps_Episode_Fragment)\n      >;\n      meta: { __typename?: 'AutoTrackedMeta' } & Pick<\n        AutoTrackedMeta,\n        'title' | 'filename' | 'url' | 'provider'\n      > & {\n          tvData?: Maybe<\n            { __typename?: 'AutoTrackedMetaTvData' } & Pick<\n              AutoTrackedMetaTvData,\n              'season' | 'episode'\n            >\n          >;\n        };\n    };\n};\n\nexport type SeasonsQueryVariables = Exact<{\n  itemId: Scalars['ID'];\n}>;\n\nexport type SeasonsQuery = { __typename?: 'Query' } & {\n  seasons: Array<{ __typename?: 'Season' } & SeasonPropsFragment>;\n};\n\nexport type SettingsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type SettingsQuery = { __typename?: 'Query' } & {\n  settings: { __typename?: 'Settings' } & {\n    general: { __typename?: 'GeneralSettings' } & Pick<\n      GeneralSettings,\n      'autoConvert'\n    >;\n    extension: { __typename?: 'ExtensionSettings' } & Pick<\n      ExtensionSettings,\n      'autoTrack' | 'minLengthSeconds' | 'blacklist'\n    >;\n  };\n};\n\nexport const WatchedTvItemPropsFragmentDoc = gql`\n  fragment WatchedTvItemProps on TvItem {\n    ... on Episode {\n      id\n      episode_number\n      season {\n        id\n        season_number\n      }\n    }\n    ... on Season {\n      id\n      season_number\n    }\n  }\n`;\nexport const WatchedPropsFragmentDoc = gql`\n  fragment WatchedProps on Watched {\n    id\n    createdAt\n    tvItemType\n    tvItem {\n      ...WatchedTvItemProps\n    }\n    rating {\n      id\n      value\n    }\n    review {\n      id\n      body\n    }\n    user {\n      id\n      name\n    }\n  }\n  ${WatchedTvItemPropsFragmentDoc}\n`;\nexport const WatchedCursorPropsFragmentDoc = gql`\n  fragment WatchedCursorProps on WatchedCursor {\n    cursor\n    hasMore\n    watched {\n      ...WatchedProps\n    }\n  }\n  ${WatchedPropsFragmentDoc}\n`;\nexport const ItemDataFragmentDoc = gql`\n  fragment ItemData on Item {\n    ... on Movie {\n      id\n      title\n      release_date\n      poster_path\n      backdrop_path\n    }\n    ... on Tv {\n      id\n      name\n      first_air_date\n      poster_path\n      backdrop_path\n    }\n  }\n`;\nexport const WatchedItemPropsFragmentDoc = gql`\n  fragment WatchedItemProps on Watched {\n    itemType\n    item {\n      ...ItemData\n    }\n  }\n  ${ItemDataFragmentDoc}\n`;\nexport const WatchedCursorWithItemsPropsFragmentDoc = gql`\n  fragment WatchedCursorWithItemsProps on WatchedCursor {\n    cursor\n    hasMore\n    watched {\n      ...WatchedProps\n      ...WatchedItemProps\n    }\n  }\n  ${WatchedPropsFragmentDoc}\n  ${WatchedItemPropsFragmentDoc}\n`;\nexport const SeasonPropsFragmentDoc = gql`\n  fragment SeasonProps on Season {\n    id\n    name\n    overview\n    episode_count\n    air_date\n    poster_path\n    season_number\n    episodes {\n      id\n      name\n      overview\n      episode_number\n      air_date\n      vote_average\n      vote_count\n    }\n  }\n`;\nexport const LoginDocument = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n        name\n        email\n        createdAt\n        updatedAt\n        settings {\n          general {\n            autoConvert\n          }\n          extension {\n            autoTrack\n            minLengthSeconds\n            blacklist\n          }\n        }\n      }\n    }\n  }\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >,\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions,\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const RegisterDocument = gql`\n  mutation Register($name: String!, $email: String!, $password: String!) {\n    register(name: $name, email: $email, password: $password) {\n      token\n      user {\n        id\n        name\n        email\n        createdAt\n        updatedAt\n        settings {\n          general {\n            autoConvert\n          }\n          extension {\n            autoTrack\n            minLengthSeconds\n            blacklist\n          }\n        }\n      }\n    }\n  }\n`;\nexport type RegisterMutationFn = Apollo.MutationFunction<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >,\n) {\n  return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(\n    RegisterDocument,\n    baseOptions,\n  );\n}\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\nexport const LogoutDocument = gql`\n  mutation Logout {\n    logout @client\n  }\n`;\nexport type LogoutMutationFn = Apollo.MutationFunction<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LogoutMutation,\n    LogoutMutationVariables\n  >,\n) {\n  return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(\n    LogoutDocument,\n    baseOptions,\n  );\n}\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\nexport const AddWatchedDocument = gql`\n  mutation AddWatched(\n    $itemId: ID!\n    $itemType: ItemType!\n    $createdAt: Float!\n    $rating: RatingInput\n    $review: ReviewInput\n    $tvItemId: ID\n    $tvItemType: TvItemType\n    $autoTrackedId: ID\n  ) {\n    addWatched(\n      itemId: $itemId\n      itemType: $itemType\n      createdAt: $createdAt\n      rating: $rating\n      review: $review\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n      autoTrackedId: $autoTrackedId\n    ) {\n      id\n      itemType\n      createdAt\n      rating {\n        id\n        value\n      }\n      review {\n        id\n        body\n      }\n      tvItemType\n      tvItem {\n        ... on Episode {\n          id\n          episode_number\n          season {\n            id\n            season_number\n          }\n        }\n        ... on Season {\n          id\n          season_number\n        }\n      }\n    }\n  }\n`;\nexport type AddWatchedMutationFn = Apollo.MutationFunction<\n  AddWatchedMutation,\n  AddWatchedMutationVariables\n>;\n\n/**\n * __useAddWatchedMutation__\n *\n * To run a mutation, you first call `useAddWatchedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddWatchedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addWatchedMutation, { data, loading, error }] = useAddWatchedMutation({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      createdAt: // value for 'createdAt'\n *      rating: // value for 'rating'\n *      review: // value for 'review'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *      autoTrackedId: // value for 'autoTrackedId'\n *   },\n * });\n */\nexport function useAddWatchedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    AddWatchedMutation,\n    AddWatchedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<AddWatchedMutation, AddWatchedMutationVariables>(\n    AddWatchedDocument,\n    baseOptions,\n  );\n}\nexport type AddWatchedMutationHookResult = ReturnType<\n  typeof useAddWatchedMutation\n>;\nexport type AddWatchedMutationResult = Apollo.MutationResult<\n  AddWatchedMutation\n>;\nexport type AddWatchedMutationOptions = Apollo.BaseMutationOptions<\n  AddWatchedMutation,\n  AddWatchedMutationVariables\n>;\nexport const EditWatchedDocument = gql`\n  mutation EditWatched(\n    $id: ID!\n    $createdAt: Float!\n    $rating: RatingInput\n    $review: ReviewInput\n    $tvItemId: ID\n    $tvItemType: TvItemType\n  ) {\n    editWatched(\n      id: $id\n      createdAt: $createdAt\n      rating: $rating\n      review: $review\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n    ) {\n      id\n      itemType\n      createdAt\n      rating {\n        id\n        value\n      }\n      review {\n        id\n        body\n      }\n      tvItemType\n      tvItem {\n        ... on Episode {\n          id\n          episode_number\n          season {\n            id\n            season_number\n          }\n        }\n        ... on Season {\n          id\n          season_number\n        }\n      }\n    }\n  }\n`;\nexport type EditWatchedMutationFn = Apollo.MutationFunction<\n  EditWatchedMutation,\n  EditWatchedMutationVariables\n>;\n\n/**\n * __useEditWatchedMutation__\n *\n * To run a mutation, you first call `useEditWatchedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWatchedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWatchedMutation, { data, loading, error }] = useEditWatchedMutation({\n *   variables: {\n *      id: // value for 'id'\n *      createdAt: // value for 'createdAt'\n *      rating: // value for 'rating'\n *      review: // value for 'review'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *   },\n * });\n */\nexport function useEditWatchedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    EditWatchedMutation,\n    EditWatchedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<EditWatchedMutation, EditWatchedMutationVariables>(\n    EditWatchedDocument,\n    baseOptions,\n  );\n}\nexport type EditWatchedMutationHookResult = ReturnType<\n  typeof useEditWatchedMutation\n>;\nexport type EditWatchedMutationResult = Apollo.MutationResult<\n  EditWatchedMutation\n>;\nexport type EditWatchedMutationOptions = Apollo.BaseMutationOptions<\n  EditWatchedMutation,\n  EditWatchedMutationVariables\n>;\nexport const RemoveWatchedDocument = gql`\n  mutation RemoveWatched($itemId: ID!) {\n    removeWatched(itemId: $itemId)\n  }\n`;\nexport type RemoveWatchedMutationFn = Apollo.MutationFunction<\n  RemoveWatchedMutation,\n  RemoveWatchedMutationVariables\n>;\n\n/**\n * __useRemoveWatchedMutation__\n *\n * To run a mutation, you first call `useRemoveWatchedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveWatchedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeWatchedMutation, { data, loading, error }] = useRemoveWatchedMutation({\n *   variables: {\n *      itemId: // value for 'itemId'\n *   },\n * });\n */\nexport function useRemoveWatchedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveWatchedMutation,\n    RemoveWatchedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    RemoveWatchedMutation,\n    RemoveWatchedMutationVariables\n  >(RemoveWatchedDocument, baseOptions);\n}\nexport type RemoveWatchedMutationHookResult = ReturnType<\n  typeof useRemoveWatchedMutation\n>;\nexport type RemoveWatchedMutationResult = Apollo.MutationResult<\n  RemoveWatchedMutation\n>;\nexport type RemoveWatchedMutationOptions = Apollo.BaseMutationOptions<\n  RemoveWatchedMutation,\n  RemoveWatchedMutationVariables\n>;\nexport const RemoveAutoTrackedDocument = gql`\n  mutation RemoveAutoTracked($ids: [ID!]!) {\n    removeAutoTracked(ids: $ids)\n  }\n`;\nexport type RemoveAutoTrackedMutationFn = Apollo.MutationFunction<\n  RemoveAutoTrackedMutation,\n  RemoveAutoTrackedMutationVariables\n>;\n\n/**\n * __useRemoveAutoTrackedMutation__\n *\n * To run a mutation, you first call `useRemoveAutoTrackedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveAutoTrackedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeAutoTrackedMutation, { data, loading, error }] = useRemoveAutoTrackedMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useRemoveAutoTrackedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveAutoTrackedMutation,\n    RemoveAutoTrackedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    RemoveAutoTrackedMutation,\n    RemoveAutoTrackedMutationVariables\n  >(RemoveAutoTrackedDocument, baseOptions);\n}\nexport type RemoveAutoTrackedMutationHookResult = ReturnType<\n  typeof useRemoveAutoTrackedMutation\n>;\nexport type RemoveAutoTrackedMutationResult = Apollo.MutationResult<\n  RemoveAutoTrackedMutation\n>;\nexport type RemoveAutoTrackedMutationOptions = Apollo.BaseMutationOptions<\n  RemoveAutoTrackedMutation,\n  RemoveAutoTrackedMutationVariables\n>;\nexport const ConvertAutoTrackedDocument = gql`\n  mutation ConvertAutoTracked($ids: [ID!]!) {\n    convertAutoTracked(ids: $ids) {\n      removedIds\n    }\n  }\n`;\nexport type ConvertAutoTrackedMutationFn = Apollo.MutationFunction<\n  ConvertAutoTrackedMutation,\n  ConvertAutoTrackedMutationVariables\n>;\n\n/**\n * __useConvertAutoTrackedMutation__\n *\n * To run a mutation, you first call `useConvertAutoTrackedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useConvertAutoTrackedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [convertAutoTrackedMutation, { data, loading, error }] = useConvertAutoTrackedMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useConvertAutoTrackedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    ConvertAutoTrackedMutation,\n    ConvertAutoTrackedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    ConvertAutoTrackedMutation,\n    ConvertAutoTrackedMutationVariables\n  >(ConvertAutoTrackedDocument, baseOptions);\n}\nexport type ConvertAutoTrackedMutationHookResult = ReturnType<\n  typeof useConvertAutoTrackedMutation\n>;\nexport type ConvertAutoTrackedMutationResult = Apollo.MutationResult<\n  ConvertAutoTrackedMutation\n>;\nexport type ConvertAutoTrackedMutationOptions = Apollo.BaseMutationOptions<\n  ConvertAutoTrackedMutation,\n  ConvertAutoTrackedMutationVariables\n>;\nexport const UpdateSettingsDocument = gql`\n  mutation UpdateSettings(\n    $general: GeneralSettingsInput!\n    $extension: ExtensionSettingsInput!\n  ) {\n    updateSettings(general: $general, extension: $extension) {\n      general {\n        autoConvert\n      }\n      extension {\n        autoTrack\n        minLengthSeconds\n        blacklist\n      }\n    }\n  }\n`;\nexport type UpdateSettingsMutationFn = Apollo.MutationFunction<\n  UpdateSettingsMutation,\n  UpdateSettingsMutationVariables\n>;\n\n/**\n * __useUpdateSettingsMutation__\n *\n * To run a mutation, you first call `useUpdateSettingsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSettingsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSettingsMutation, { data, loading, error }] = useUpdateSettingsMutation({\n *   variables: {\n *      general: // value for 'general'\n *      extension: // value for 'extension'\n *   },\n * });\n */\nexport function useUpdateSettingsMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateSettingsMutation,\n    UpdateSettingsMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    UpdateSettingsMutation,\n    UpdateSettingsMutationVariables\n  >(UpdateSettingsDocument, baseOptions);\n}\nexport type UpdateSettingsMutationHookResult = ReturnType<\n  typeof useUpdateSettingsMutation\n>;\nexport type UpdateSettingsMutationResult = Apollo.MutationResult<\n  UpdateSettingsMutation\n>;\nexport type UpdateSettingsMutationOptions = Apollo.BaseMutationOptions<\n  UpdateSettingsMutation,\n  UpdateSettingsMutationVariables\n>;\nexport const AuthDocument = gql`\n  query Auth {\n    auth @client {\n      id\n      name\n      email\n      createdAt\n      settings {\n        general {\n          autoConvert\n        }\n        extension {\n          autoTrack\n          minLengthSeconds\n          blacklist\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useAuthQuery__\n *\n * To run a query within a React component, call `useAuthQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAuthQuery(\n  baseOptions?: Apollo.QueryHookOptions<AuthQuery, AuthQueryVariables>,\n) {\n  return Apollo.useQuery<AuthQuery, AuthQueryVariables>(\n    AuthDocument,\n    baseOptions,\n  );\n}\nexport function useAuthLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AuthQuery, AuthQueryVariables>,\n) {\n  return Apollo.useLazyQuery<AuthQuery, AuthQueryVariables>(\n    AuthDocument,\n    baseOptions,\n  );\n}\nexport type AuthQueryHookResult = ReturnType<typeof useAuthQuery>;\nexport type AuthLazyQueryHookResult = ReturnType<typeof useAuthLazyQuery>;\nexport type AuthQueryResult = Apollo.QueryResult<AuthQuery, AuthQueryVariables>;\nexport const IsExtensionCheckDoneDocument = gql`\n  query IsExtensionCheckDone {\n    isExtensionCheckDone @client\n  }\n`;\n\n/**\n * __useIsExtensionCheckDoneQuery__\n *\n * To run a query within a React component, call `useIsExtensionCheckDoneQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsExtensionCheckDoneQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsExtensionCheckDoneQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useIsExtensionCheckDoneQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >,\n) {\n  return Apollo.useQuery<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >(IsExtensionCheckDoneDocument, baseOptions);\n}\nexport function useIsExtensionCheckDoneLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >(IsExtensionCheckDoneDocument, baseOptions);\n}\nexport type IsExtensionCheckDoneQueryHookResult = ReturnType<\n  typeof useIsExtensionCheckDoneQuery\n>;\nexport type IsExtensionCheckDoneLazyQueryHookResult = ReturnType<\n  typeof useIsExtensionCheckDoneLazyQuery\n>;\nexport type IsExtensionCheckDoneQueryResult = Apollo.QueryResult<\n  IsExtensionCheckDoneQuery,\n  IsExtensionCheckDoneQueryVariables\n>;\nexport const UserDocument = gql`\n  query User($name: String, $id: ID, $cursor: String) {\n    user(name: $name, id: $id) {\n      id\n      name\n      createdAt\n      watched(cursor: $cursor) {\n        ...WatchedCursorWithItemsProps\n      }\n    }\n  }\n  ${WatchedCursorWithItemsPropsFragmentDoc}\n`;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      name: // value for 'name'\n *      id: // value for 'id'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useUserQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>,\n) {\n  return Apollo.useQuery<UserQuery, UserQueryVariables>(\n    UserDocument,\n    baseOptions,\n  );\n}\nexport function useUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>,\n) {\n  return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(\n    UserDocument,\n    baseOptions,\n  );\n}\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const MovieDocument = gql`\n  query Movie($id: ID, $cursor: String) {\n    movie(id: $id) {\n      id\n      title\n      overview\n      release_date\n      poster_path\n      backdrop_path\n      vote_average\n      vote_count\n      watched(cursor: $cursor, filter: \"Reviewed\") {\n        ...WatchedCursorProps\n      }\n    }\n  }\n  ${WatchedCursorPropsFragmentDoc}\n`;\n\n/**\n * __useMovieQuery__\n *\n * To run a query within a React component, call `useMovieQuery` and pass it any options that fit your needs.\n * When your component renders, `useMovieQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMovieQuery({\n *   variables: {\n *      id: // value for 'id'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useMovieQuery(\n  baseOptions?: Apollo.QueryHookOptions<MovieQuery, MovieQueryVariables>,\n) {\n  return Apollo.useQuery<MovieQuery, MovieQueryVariables>(\n    MovieDocument,\n    baseOptions,\n  );\n}\nexport function useMovieLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MovieQuery, MovieQueryVariables>,\n) {\n  return Apollo.useLazyQuery<MovieQuery, MovieQueryVariables>(\n    MovieDocument,\n    baseOptions,\n  );\n}\nexport type MovieQueryHookResult = ReturnType<typeof useMovieQuery>;\nexport type MovieLazyQueryHookResult = ReturnType<typeof useMovieLazyQuery>;\nexport type MovieQueryResult = Apollo.QueryResult<\n  MovieQuery,\n  MovieQueryVariables\n>;\nexport const TvDocument = gql`\n  query Tv($id: ID, $cursor: String) {\n    tv(id: $id) {\n      id\n      name\n      overview\n      first_air_date\n      poster_path\n      backdrop_path\n      vote_average\n      vote_count\n      seasons {\n        ...SeasonProps\n      }\n      watched(cursor: $cursor, filter: \"Reviewed\") {\n        ...WatchedCursorProps\n      }\n    }\n  }\n  ${SeasonPropsFragmentDoc}\n  ${WatchedCursorPropsFragmentDoc}\n`;\n\n/**\n * __useTvQuery__\n *\n * To run a query within a React component, call `useTvQuery` and pass it any options that fit your needs.\n * When your component renders, `useTvQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTvQuery({\n *   variables: {\n *      id: // value for 'id'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useTvQuery(\n  baseOptions?: Apollo.QueryHookOptions<TvQuery, TvQueryVariables>,\n) {\n  return Apollo.useQuery<TvQuery, TvQueryVariables>(TvDocument, baseOptions);\n}\nexport function useTvLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<TvQuery, TvQueryVariables>,\n) {\n  return Apollo.useLazyQuery<TvQuery, TvQueryVariables>(\n    TvDocument,\n    baseOptions,\n  );\n}\nexport type TvQueryHookResult = ReturnType<typeof useTvQuery>;\nexport type TvLazyQueryHookResult = ReturnType<typeof useTvLazyQuery>;\nexport type TvQueryResult = Apollo.QueryResult<TvQuery, TvQueryVariables>;\nexport const WatchedDocument = gql`\n  query Watched($id: ID!) {\n    watched(id: $id) {\n      ...WatchedProps\n      ...WatchedItemProps\n    }\n  }\n  ${WatchedPropsFragmentDoc}\n  ${WatchedItemPropsFragmentDoc}\n`;\n\n/**\n * __useWatchedQuery__\n *\n * To run a query within a React component, call `useWatchedQuery` and pass it any options that fit your needs.\n * When your component renders, `useWatchedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchedQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useWatchedQuery(\n  baseOptions: Apollo.QueryHookOptions<WatchedQuery, WatchedQueryVariables>,\n) {\n  return Apollo.useQuery<WatchedQuery, WatchedQueryVariables>(\n    WatchedDocument,\n    baseOptions,\n  );\n}\nexport function useWatchedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WatchedQuery,\n    WatchedQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<WatchedQuery, WatchedQueryVariables>(\n    WatchedDocument,\n    baseOptions,\n  );\n}\nexport type WatchedQueryHookResult = ReturnType<typeof useWatchedQuery>;\nexport type WatchedLazyQueryHookResult = ReturnType<typeof useWatchedLazyQuery>;\nexport type WatchedQueryResult = Apollo.QueryResult<\n  WatchedQuery,\n  WatchedQueryVariables\n>;\nexport const WatchesDocument = gql`\n  query Watches(\n    $userId: ID\n    $itemId: ID\n    $itemType: ItemType\n    $cursor: String\n    $tvItemId: ID\n    $tvItemType: TvItemType\n  ) {\n    watches(\n      userId: $userId\n      itemId: $itemId\n      itemType: $itemType\n      cursor: $cursor\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n    ) {\n      ...WatchedCursorWithItemsProps\n    }\n  }\n  ${WatchedCursorWithItemsPropsFragmentDoc}\n`;\n\n/**\n * __useWatchesQuery__\n *\n * To run a query within a React component, call `useWatchesQuery` and pass it any options that fit your needs.\n * When your component renders, `useWatchesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchesQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      cursor: // value for 'cursor'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *   },\n * });\n */\nexport function useWatchesQuery(\n  baseOptions?: Apollo.QueryHookOptions<WatchesQuery, WatchesQueryVariables>,\n) {\n  return Apollo.useQuery<WatchesQuery, WatchesQueryVariables>(\n    WatchesDocument,\n    baseOptions,\n  );\n}\nexport function useWatchesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WatchesQuery,\n    WatchesQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<WatchesQuery, WatchesQueryVariables>(\n    WatchesDocument,\n    baseOptions,\n  );\n}\nexport type WatchesQueryHookResult = ReturnType<typeof useWatchesQuery>;\nexport type WatchesLazyQueryHookResult = ReturnType<typeof useWatchesLazyQuery>;\nexport type WatchesQueryResult = Apollo.QueryResult<\n  WatchesQuery,\n  WatchesQueryVariables\n>;\nexport const ReviewsDocument = gql`\n  query Reviews(\n    $userId: ID\n    $itemId: ID\n    $itemType: ItemType\n    $cursor: String\n    $tvItemId: ID\n    $tvItemType: TvItemType\n  ) {\n    reviews(\n      userId: $userId\n      itemId: $itemId\n      itemType: $itemType\n      cursor: $cursor\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n    ) {\n      cursor\n      hasMore\n      reviews {\n        id\n        body\n        watched {\n          id\n          createdAt\n          rating {\n            id\n            value\n          }\n          tvItemType\n          tvItem {\n            ...WatchedTvItemProps\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n  ${WatchedTvItemPropsFragmentDoc}\n`;\n\n/**\n * __useReviewsQuery__\n *\n * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewsQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      cursor: // value for 'cursor'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *   },\n * });\n */\nexport function useReviewsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>,\n) {\n  return Apollo.useQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions,\n  );\n}\nexport function useReviewsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ReviewsQuery,\n    ReviewsQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions,\n  );\n}\nexport type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;\nexport type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;\nexport type ReviewsQueryResult = Apollo.QueryResult<\n  ReviewsQuery,\n  ReviewsQueryVariables\n>;\nexport const SearchContentDocument = gql`\n  query SearchContent($title: String!) {\n    searchContent(title: $title) {\n      id\n      tmdbId\n      title\n      release_date\n      type\n    }\n  }\n`;\n\n/**\n * __useSearchContentQuery__\n *\n * To run a query within a React component, call `useSearchContentQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchContentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchContentQuery({\n *   variables: {\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSearchContentQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SearchContentQuery,\n    SearchContentQueryVariables\n  >,\n) {\n  return Apollo.useQuery<SearchContentQuery, SearchContentQueryVariables>(\n    SearchContentDocument,\n    baseOptions,\n  );\n}\nexport function useSearchContentLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SearchContentQuery,\n    SearchContentQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SearchContentQuery, SearchContentQueryVariables>(\n    SearchContentDocument,\n    baseOptions,\n  );\n}\nexport type SearchContentQueryHookResult = ReturnType<\n  typeof useSearchContentQuery\n>;\nexport type SearchContentLazyQueryHookResult = ReturnType<\n  typeof useSearchContentLazyQuery\n>;\nexport type SearchContentQueryResult = Apollo.QueryResult<\n  SearchContentQuery,\n  SearchContentQueryVariables\n>;\nexport const AutoTrackedListDocument = gql`\n  query AutoTrackedList($userId: ID!, $cursor: String) {\n    autoTrackedList(userId: $userId, cursor: $cursor) {\n      cursor\n      hasMore\n      autoTracked {\n        id\n        itemType\n        item {\n          ...ItemData\n        }\n        tvItemType\n        tvItem {\n          ...WatchedTvItemProps\n        }\n        meta {\n          title\n          filename\n          url\n          provider\n          tvData {\n            season\n            episode\n          }\n        }\n        createdAt\n      }\n    }\n  }\n  ${ItemDataFragmentDoc}\n  ${WatchedTvItemPropsFragmentDoc}\n`;\n\n/**\n * __useAutoTrackedListQuery__\n *\n * To run a query within a React component, call `useAutoTrackedListQuery` and pass it any options that fit your needs.\n * When your component renders, `useAutoTrackedListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAutoTrackedListQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useAutoTrackedListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    AutoTrackedListQuery,\n    AutoTrackedListQueryVariables\n  >,\n) {\n  return Apollo.useQuery<AutoTrackedListQuery, AutoTrackedListQueryVariables>(\n    AutoTrackedListDocument,\n    baseOptions,\n  );\n}\nexport function useAutoTrackedListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    AutoTrackedListQuery,\n    AutoTrackedListQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<\n    AutoTrackedListQuery,\n    AutoTrackedListQueryVariables\n  >(AutoTrackedListDocument, baseOptions);\n}\nexport type AutoTrackedListQueryHookResult = ReturnType<\n  typeof useAutoTrackedListQuery\n>;\nexport type AutoTrackedListLazyQueryHookResult = ReturnType<\n  typeof useAutoTrackedListLazyQuery\n>;\nexport type AutoTrackedListQueryResult = Apollo.QueryResult<\n  AutoTrackedListQuery,\n  AutoTrackedListQueryVariables\n>;\nexport const AutoTrackedDocument = gql`\n  query AutoTracked($id: ID!) {\n    autoTracked(id: $id) {\n      id\n      itemType\n      item {\n        ...ItemData\n      }\n      tvItemType\n      tvItem {\n        ...WatchedTvItemProps\n      }\n      meta {\n        title\n        filename\n        url\n        provider\n        tvData {\n          season\n          episode\n        }\n      }\n      createdAt\n    }\n  }\n  ${ItemDataFragmentDoc}\n  ${WatchedTvItemPropsFragmentDoc}\n`;\n\n/**\n * __useAutoTrackedQuery__\n *\n * To run a query within a React component, call `useAutoTrackedQuery` and pass it any options that fit your needs.\n * When your component renders, `useAutoTrackedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAutoTrackedQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAutoTrackedQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    AutoTrackedQuery,\n    AutoTrackedQueryVariables\n  >,\n) {\n  return Apollo.useQuery<AutoTrackedQuery, AutoTrackedQueryVariables>(\n    AutoTrackedDocument,\n    baseOptions,\n  );\n}\nexport function useAutoTrackedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    AutoTrackedQuery,\n    AutoTrackedQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<AutoTrackedQuery, AutoTrackedQueryVariables>(\n    AutoTrackedDocument,\n    baseOptions,\n  );\n}\nexport type AutoTrackedQueryHookResult = ReturnType<typeof useAutoTrackedQuery>;\nexport type AutoTrackedLazyQueryHookResult = ReturnType<\n  typeof useAutoTrackedLazyQuery\n>;\nexport type AutoTrackedQueryResult = Apollo.QueryResult<\n  AutoTrackedQuery,\n  AutoTrackedQueryVariables\n>;\nexport const SeasonsDocument = gql`\n  query Seasons($itemId: ID!) {\n    seasons(itemId: $itemId) {\n      ...SeasonProps\n    }\n  }\n  ${SeasonPropsFragmentDoc}\n`;\n\n/**\n * __useSeasonsQuery__\n *\n * To run a query within a React component, call `useSeasonsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSeasonsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSeasonsQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *   },\n * });\n */\nexport function useSeasonsQuery(\n  baseOptions: Apollo.QueryHookOptions<SeasonsQuery, SeasonsQueryVariables>,\n) {\n  return Apollo.useQuery<SeasonsQuery, SeasonsQueryVariables>(\n    SeasonsDocument,\n    baseOptions,\n  );\n}\nexport function useSeasonsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SeasonsQuery,\n    SeasonsQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SeasonsQuery, SeasonsQueryVariables>(\n    SeasonsDocument,\n    baseOptions,\n  );\n}\nexport type SeasonsQueryHookResult = ReturnType<typeof useSeasonsQuery>;\nexport type SeasonsLazyQueryHookResult = ReturnType<typeof useSeasonsLazyQuery>;\nexport type SeasonsQueryResult = Apollo.QueryResult<\n  SeasonsQuery,\n  SeasonsQueryVariables\n>;\nexport const SettingsDocument = gql`\n  query Settings {\n    settings {\n      general {\n        autoConvert\n      }\n      extension {\n        autoTrack\n        minLengthSeconds\n        blacklist\n      }\n    }\n  }\n`;\n\n/**\n * __useSettingsQuery__\n *\n * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSettingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSettingsQuery(\n  baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>,\n) {\n  return Apollo.useQuery<SettingsQuery, SettingsQueryVariables>(\n    SettingsDocument,\n    baseOptions,\n  );\n}\nexport function useSettingsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SettingsQuery,\n    SettingsQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SettingsQuery, SettingsQueryVariables>(\n    SettingsDocument,\n    baseOptions,\n  );\n}\nexport type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;\nexport type SettingsLazyQueryHookResult = ReturnType<\n  typeof useSettingsLazyQuery\n>;\nexport type SettingsQueryResult = Apollo.QueryResult<\n  SettingsQuery,\n  SettingsQueryVariables\n>;\n","import * as React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\n\nimport { useAuthQuery } from '../graphql';\n\nexport default function AuthRoute({\n  redirectTo = '/login',\n  redirectComponent,\n  ...routeProps\n}: RouteProps & {\n  redirectTo?: string;\n  redirectComponent?: RouteProps['component'];\n}) {\n  const { data } = useAuthQuery();\n\n  if (data?.auth) return <Route {...routeProps} />;\n\n  return redirectComponent ? (\n    <Route {...routeProps} component={redirectComponent} />\n  ) : (\n    <Redirect to={redirectTo} />\n  );\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"style\", null, \"tspan { white-space:pre }.shp0 { fill: #ffffff;stroke: #000000;stroke-width: 3 } .shp1 { fill: #000000 } .shp2 { fill: #ffffff } \");\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp0\",\n  d: \"M14.5 2L14.5 2C21.41 2 27 7.59 27 14.5L27 33.5C27 40.41 21.41 46 14.5 46L14.5 46C7.59 46 2 40.41 2 33.5L2 14.5C2 7.59 7.59 2 14.5 2Z\"\n});\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp0\",\n  d: \"M41.5 2L41.5 2C48.41 2 54 7.59 54 14.5L54 33.5C54 40.41 48.41 46 41.5 46L41.5 46C34.59 46 29 40.41 29 33.5L29 14.5C29 7.59 34.59 2 41.5 2Z\"\n});\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp1\",\n  d: \"M44 38C39.02 38 35 33.98 35 29C35 24.02 39.02 20 44 20C48.98 20 53 24.02 53 29C53 33.98 48.98 38 44 38Z\"\n});\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp2\",\n  d: \"M40.5 28C39.12 28 38 26.88 38 25.5C38 24.12 39.12 23 40.5 23C41.88 23 43 24.12 43 25.5C43 26.88 41.88 28 40.5 28Z\"\n});\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp1\",\n  d: \"M17 38C12.02 38 8 33.98 8 29C8 24.02 12.02 20 17 20C21.98 20 26 24.02 26 29C26 33.98 21.98 38 17 38Z\"\n});\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp2\",\n  d: \"M13.5 28C12.12 28 11 26.88 11 25.5C11 24.12 12.12 23 13.5 23C14.88 23 16 24.12 16 25.5C16 26.88 14.88 28 13.5 28Z\"\n});\n\nvar SvgEyes = function SvgEyes(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 56 48\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgEyes, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/eyes.dae4ec2d.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\n\nimport { ReactComponent as Eyes} from '../assets/logos/eyes.svg';\n\nexport enum LogoSize {\n  text,\n  textLarge,\n  logo,\n  large,\n}\n\nconst sizes = {\n  [LogoSize.text]: [14, 12, '0 1px'],\n  [LogoSize.textLarge]: [16, 14, '1px 1px 0 2px'],\n  [LogoSize.logo]: [18, 16, '1px 1px 0'],\n  [LogoSize.large]: [24, 19, '1px 1px 0 2px'],\n}\n\nexport function Logo({ size } = { size: LogoSize.logo }) {\n  const [logoSize, eyeSize, eyePadding] = sizes[size]\n\n  return (\n    <div className=\"seenit-logo\" style={{ fontSize: logoSize }}>\n      S\n      <Eyes className=\"logo-eyes\" style={{ height: eyeSize, padding: eyePadding }} />\n      N&nbsp;IT\n    </div>\n  );\n}\n\nLogo.defaultProps  = {\n  size: LogoSize.logo,\n}\n","import * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MenuItem, PopoverPosition, Spinner } from '@blueprintjs/core';\nimport { Suggest, IItemRendererProps } from '@blueprintjs/select';\n\nimport { useSearchContentQuery, SearchItem } from '../graphql';\nimport useThrottle from './useThrottle';\n\nexport interface SearchOption {\n  label: string;\n  value: string | number;\n  item: SearchItem;\n}\n\nconst renderOption = (\n  { label, item }: SearchOption,\n  { handleClick, modifiers }: IItemRendererProps,\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n\n  return (\n    <MenuItem\n      active={modifiers.active}\n      key={item.id}\n      text={label}\n      onClick={handleClick}\n    />\n  );\n};\n\nconst Search: React.FC<{\n  selected?: SearchItem;\n  setSelected: (item: SearchItem) => void;\n}> = ({ selected, setSelected }) => {\n  const [query, setQuery] = React.useState('');\n\n  const { callback } = useThrottle(\n    (payload: string) => setQuery(payload),\n    1000,\n  );\n\n  const shouldSearch = query.length > 2;\n  const searchQuery = useSearchContentQuery({\n    variables: { title: query },\n    skip: query.length < 3,\n  });\n  const options =\n    searchQuery.data && searchQuery.data.searchContent\n      ? searchQuery.data.searchContent.reduce(\n          (acc: SearchOption[], item) =>\n            acc.concat({\n              label: `${item.title} (${\n                (item.release_date || '?').split('-')[0]\n              })`,\n              value: item.id,\n              item,\n            }),\n          [],\n        )\n      : [];\n\n  return (\n    <Suggest<SearchOption>\n      itemRenderer={renderOption}\n      items={options}\n      onQueryChange={callback}\n      onItemSelect={({ item }) => setSelected(item)}\n      noResults={\n        <MenuItem\n          disabled\n          text={\n            shouldSearch\n              ? searchQuery.loading\n                ? 'Loading...'\n                : 'Got nothing :('\n              : 'Type more to start seach'\n          }\n        />\n      }\n      initialContent={<MenuItem disabled text=\"Type more to start seach\" />}\n      inputValueRenderer={item => item.label}\n      popoverProps={{\n        minimal: true,\n        fill: true,\n        usePortal: false,\n        position: PopoverPosition.BOTTOM,\n      }}\n      inputProps={{\n        rightElement: searchQuery?.loading ? <Spinner size={16} /> : undefined,\n      }}\n      className=\"select-popover-centered\"\n    />\n  );\n};\n\nexport function SearchPage() {\n  const history = useHistory();\n\n  return (\n    <Search\n      setSelected={({ type, id }) => {\n        history.push(`/${type?.toLowerCase()}/${id}`);\n      }}\n    />\n  );\n}\n\nexport default Search;\n","import { useCallback, useRef, useEffect } from 'react';\n\nexport type ThrottleOptions = {\n  leading?: boolean;\n};\n\nexport type ThrottleReturnResult<T extends any[]> = {\n  callback: (...args: T) => void;\n  cancel: () => void;\n  callPending: () => void;\n};\n\nexport default function useThrottle<T extends any[]>(\n  fn: (...args: T) => any,\n  wait = 0,\n  options?: ThrottleOptions,\n): ThrottleReturnResult<T> {\n  const timer = useRef<ReturnType<typeof setTimeout>>();\n  const fnRef = useRef(fn);\n  const optionsRef = useRef<ThrottleOptions | undefined>(options);\n  const currentArgs = useRef<any>();\n\n  fnRef.current = fn;\n  optionsRef.current = options;\n\n  const cancel = useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = undefined;\n  }, []);\n\n  const callback = useCallback(\n    (...args: T) => {\n      currentArgs.current = args;\n\n      if (!timer.current) {\n        if (optionsRef.current?.leading) {\n          fnRef.current(...currentArgs.current);\n\n          timer.current = setTimeout(() => {\n            timer.current = undefined;\n          }, wait);\n        } else {\n          timer.current = setTimeout(() => {\n            fnRef.current(...currentArgs.current);\n            timer.current = undefined;\n          }, wait);\n        }\n      }\n    },\n    [wait],\n  );\n\n  const callPending = useCallback(() => {\n    if (!timer) {\n      return;\n    }\n\n    fnRef.current(...currentArgs.current);\n    cancel();\n  }, [cancel]);\n\n  useEffect(() => cancel, [cancel]);\n\n  return {\n    callback,\n    cancel,\n    callPending,\n  };\n}\n","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport {\n  Navbar,\n  Alignment,\n  Button,\n  Popover,\n  Menu,\n  Position,\n  MenuItem,\n} from '@blueprintjs/core';\n\nimport { Logo } from './Logo';\nimport { SearchPage } from './Search';\nimport { useLogoutMutation, useAuthQuery } from '../graphql';\n\nexport function UserBlock() {\n  const [setAuth] = useLogoutMutation();\n  const { data } = useAuthQuery();\n\n  if (!data?.auth) {\n    return (\n      <Link to={`/login`}>\n        <Button minimal icon=\"user\">\n          Login\n        </Button>\n      </Link>\n    );\n  }\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <Link to={`/profile/${data.auth.name}`}>\n            <MenuItem tagName=\"span\" text={'Profile'} />\n          </Link>\n          <Link to=\"/settings\">\n            <Button minimal>Settings</Button>\n          </Link>\n          <MenuItem tagName=\"span\" text={'Logout'} onClick={() => setAuth()} />\n        </Menu>\n      }\n      position={Position.BOTTOM}\n    >\n      {data.auth.name}\n    </Popover>\n  );\n}\n\nexport default function Navigation() {\n  return (\n    <div className=\"navigation-container\">\n      <Navbar fixedToTop>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>\n            <NavLink to=\"/\">\n              <Logo />\n            </NavLink>\n          </Navbar.Heading>\n          <Navbar.Divider />\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <SearchPage />\n          <Navbar.Divider />\n          <UserBlock />\n        </Navbar.Group>\n      </Navbar>\n    </div>\n  );\n}\n","const storagePrefix = 'seenit-web-';\n\nexport function getStorageValue<T = object>(key: string) {\n  const item = window.localStorage.getItem(storagePrefix + key);\n  if (!item) return null;\n\n  try {\n    return JSON.parse(item);\n  } catch {\n    return item;\n  }\n}\n\nexport function updateStorage<T = object | string>(key: string, value: T) {\n  if (!value) return window.localStorage.removeItem(storagePrefix + key);\n\n  return window.localStorage.setItem(\n    storagePrefix + key,\n    typeof value === 'string' ? value : JSON.stringify(value),\n  );\n}\n","import { ApolloCache, gql } from '@apollo/client';\n\nimport {\n  LoginMutation,\n  RegisterMutation,\n  AuthQuery,\n  SettingsDocument,\n} from '.';\nimport { updateStorage } from '../common/helpers/storage';\n\nexport const setAuthData = <T>(\n  cache: ApolloCache<T>,\n  auth?: LoginMutation['login']['user'] | RegisterMutation['register']['user'],\n  token?: string,\n) => {\n  updateStorage('token', token || null);\n  updateStorage('userData', auth || null);\n\n  cache.writeQuery({\n    query: gql`\n      {\n        auth\n      }\n    `,\n    data: {\n      auth: auth || null,\n    },\n  });\n};\n\nexport const updateUserSettings = <T>(\n  cache: ApolloCache<T>,\n  user: NonNullable<AuthQuery['auth']>,\n) => {\n  updateStorage('userData', user);\n\n  return cache.writeQuery({\n    query: SettingsDocument,\n    data: {\n      settings: user.settings,\n    },\n  });\n};\n","import React, { ChangeEvent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { FormGroup, InputGroup, Button, Intent } from '@blueprintjs/core';\nimport { ApolloCache, FetchResult } from '@apollo/client';\n\nimport {\n  useLoginMutation,\n  useRegisterMutation,\n  LoginMutation,\n  RegisterMutation,\n} from '../graphql';\nimport { setAuthData } from '../graphql/helpers';\n\nexport default function Login() {\n  const history = useHistory();\n  const [form, setForm] = React.useState({\n    email: '',\n    password: '',\n    name: '',\n  });\n  const [isLogin, setLogin] = React.useState(true);\n  const mutationParams = {\n    variables: form,\n    // refetchQueries: [\n    //   {\n    //     query: SetAuthDocument,\n    //     variables: {},\n    //   },\n    // ],\n    update: (\n      cache: ApolloCache<LoginMutation | RegisterMutation>,\n      { data }: FetchResult<LoginMutation | RegisterMutation>,\n    ) => {\n      if (!data) return;\n\n      const { token, user } = 'login' in data ? data.login : data.register;\n      setAuthData(cache, user, token);\n      document.dispatchEvent(new CustomEvent('seenit-login'));\n    },\n  };\n\n  const [login] = useLoginMutation(mutationParams);\n  const [register] = useRegisterMutation(mutationParams);\n  const mutationFn = isLogin ? login : register;\n\n  return (\n    <form\n      onSubmit={async event => {\n        event.preventDefault();\n\n        await mutationFn();\n        history.push('/');\n      }}\n    >\n      {!isLogin && (\n        <FormGroup label=\"Name\" labelFor=\"name-input\">\n          <InputGroup\n            id=\"name-input\"\n            large\n            leftIcon=\"user\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              setForm({ ...form, name: event.target.value })\n            }\n            placeholder=\"John Doe\"\n            value={form.name}\n          />\n        </FormGroup>\n      )}\n      <FormGroup label=\"Email\" labelFor=\"email-input\">\n        <InputGroup\n          id=\"email-input\"\n          large\n          type=\"email\"\n          leftIcon=\"envelope\"\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            setForm({ ...form, email: event.target.value })\n          }\n          placeholder=\"you@mail.com\"\n          value={form.email}\n        />\n      </FormGroup>\n      <FormGroup label=\"Password\" labelFor=\"password-input\">\n        <InputGroup\n          id=\"password-input\"\n          large\n          type=\"password\"\n          leftIcon=\"lock\"\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            setForm({ ...form, password: event.target.value })\n          }\n          placeholder=\"Your password\"\n          value={form.password}\n        />\n      </FormGroup>\n\n      <div className=\"flex flex-between\">\n        <Button type=\"submit\" intent={Intent.PRIMARY}>\n          {isLogin ? 'Login' : 'Register'}\n        </Button>\n        <Button type=\"button\" onClick={() => setLogin(!isLogin)}>\n          {isLogin ? 'Need to create an account?' : 'Already have an account?'}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { H1, H2, H3, Button } from '@blueprintjs/core';\n\nimport chromeSvg from './assets/logos/chrome.svg';\nimport vlcSvg from './assets/logos/vlc.svg';\n\nexport default function Home() {\n  return (\n    <div className=\"hero-box\">\n      <H1>Automatically track what you've watched</H1>\n      <H2 className=\"pt-3\">Start tracking</H2>\n      <div className=\"py-4\">\n        <Button large fill className=\"my-4\">\n          <Link to={`/login`}>Join seen it</Link>\n        </Button>\n        <Button large fill className=\"my-4\">\n          <Link to={`/setup`}>Download for your used platforms</Link>\n        </Button>\n      </div>\n      <div>\n        <H3 className=\"pb-2\">Currently works with</H3>\n        <div>\n          <img\n            className=\"mx-3\"\n            style={{ width: 48 }}\n            alt=\"Chrome\"\n            src={chromeSvg}\n          />\n          <img className=\"mx-3\" style={{ height: 48 }} alt=\"VLC\" src={vlcSvg} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport ReactRating from 'react-rating';\n\nexport default function Rating({\n  value,\n  className = '',\n  max = 10,\n}: {\n  value: number;\n  className?: string;\n  max?: number;\n}) {\n  const divider = max / 5;\n  const formattedValue = value / divider;\n\n  return (\n    <ReactRating\n      readonly\n      className={'rating ' + className}\n      initialRating={formattedValue}\n      fractions={2}\n      fullSymbol={<Icon icon={IconNames.STAR} color=\"gold\" />}\n      emptySymbol={<Icon icon={IconNames.STAR_EMPTY} color=\"gold\" />}\n    />\n  );\n}\n","import React, { ReactNode } from 'react';\n\nimport useInfiniteScroll from './useInfiniteScroll';\n\nexport default function InfiniteScroll({ children, loadMore, loading, hasMore }: {\n  children: ReactNode\n  loadMore: () => void\n  loading: boolean\n  hasMore: boolean\n}) {\n  const ref = useInfiniteScroll(loadMore, loading, hasMore);\n\n  return (\n    <>\n      {children}\n      {!loading && hasMore && <div ref={ref}>a</div>}\n    </>\n  );\n}\n","import { useRef, useEffect } from 'react';\n\nexport default function useInfiniteScroll(\n  loadMore: () => void,\n  isLoading: boolean,\n  hasMore: boolean,\n  rootMargin = '200px',\n) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (!entry.isIntersecting || isLoading || !hasMore) { return; }\n\n        loadMore();\n      },\n      {\n        rootMargin,\n      },\n    );\n\n    if (ref && ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => observer.disconnect();\n  }, [isLoading, loadMore, rootMargin, hasMore]);\n\n  return ref;\n}","import { WatchesQuery, TvQuery } from '../../graphql';\n\nexport function formatTvString(\n  tvItem: WatchesQuery['watches']['watched'][0]['tvItem'],\n) {\n  if (!tvItem) return null;\n\n  if ('season_number' in tvItem) return `S${tvItem.season_number}`;\n\n  return `S${tvItem.season.season_number}E${tvItem.episode_number}`;\n}\n\nexport const getSeasonEpisode = (\n  seasons: TvQuery['tv']['seasons'],\n  episodeId: string,\n) => {\n  for (let i = 0; i < seasons.length; i = +1) {\n    const episode = seasons[i].episodes.find(({ id }) => id === episodeId);\n\n    if (episode) return episode;\n  }\n};\n","import React, { MouseEvent, useState } from 'react';\nimport { ObservableQueryFields } from '@apollo/client';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { Spring } from 'react-spring/renderprops';\nimport { Card, Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport {\n  useUserQuery,\n  ItemType,\n  Movie,\n  Tv,\n  UserQueryVariables,\n  UserQuery,\n} from '../graphql';\nimport Rating from '../common/Rating';\nimport InfiniteScroll from '../common/InfiniteScroll';\nimport { formatTvString } from '../common/helpers/watched';\n\nconst loadMore = (\n  fetchMore: ObservableQueryFields<UserQuery, UserQueryVariables>['fetchMore'],\n  variables: UserQueryVariables,\n) => () => {\n  return fetchMore({\n    variables,\n    updateQuery: (prev, { fetchMoreResult }) => {\n      if (!fetchMoreResult?.user) return prev;\n\n      const prevWatched = prev.user.watched.watched || [];\n      const newWatched = fetchMoreResult.user.watched.watched || [];\n\n      return {\n        user: {\n          ...fetchMoreResult.user,\n          watched: {\n            ...fetchMoreResult.user.watched,\n            watched: [...prevWatched, ...newWatched],\n          },\n        },\n      };\n    },\n  });\n};\n\nexport default function Profile() {\n  const [selected, setSelected] = useState<any>({\n    style: undefined,\n    targetIndex: -1,\n  });\n\n  const { name } = useParams<{ name: string }>();\n  const history = useHistory();\n  const { loading, data, fetchMore } = useUserQuery({\n    variables: { name },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (!data?.user?.watched) return null;\n\n  const {\n    watched: { hasMore, cursor, watched },\n  } = data.user;\n  const targetItem = watched[selected.targetIndex] || null;\n\n  return (\n    <InfiniteScroll\n      loading={loading}\n      hasMore={hasMore}\n      loadMore={loadMore(fetchMore, { name, cursor })}\n    >\n      <div className=\"grid grid-card\">\n        {watched.map(\n          (\n            { id, item, itemType, rating, review, tvItem, createdAt },\n            index,\n          ) => {\n            if (!item) return null;\n\n            let name: string;\n            if (itemType === ItemType.Movie) {\n              name = (item as Movie).title;\n            } else {\n              name = (item as Tv).name;\n            }\n\n            return (\n              <Card\n                key={id}\n                className=\"card-watched\"\n                onClick={(e: MouseEvent<HTMLDivElement>) => {\n                  const position = e.currentTarget.getBoundingClientRect();\n                  setSelected({\n                    style: {\n                      left: position.left,\n                      top: position.top,\n                      width: position.width,\n                      height: position.height,\n                      position: 'fixed',\n                    },\n                    targetIndex: index,\n                  });\n                }}\n              >\n                <div>\n                  <div style={{ position: 'relative' }}>\n                    <img\n                      width=\"300\"\n                      height=\"200\"\n                      className=\"img-responsive\"\n                      src={`https://image.tmdb.org/t/p/w1280${item.poster_path}`}\n                      style={{ position: 'relative' }}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className=\"card-watched-footer\">\n                    {rating && <Rating value={rating.value} />}\n                    {review && review.body && (\n                      <Icon icon={IconNames.COMMENT} color=\"gold\" />\n                    )}\n                  </div>\n                  <div className=\"p-3 text-left title\">\n                    <div className=\"flex flex-content-between flex-items-center\">\n                      <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n                        {name}\n                      </strong>\n                      <div>{formatTvString(tvItem)}</div>\n                    </div>\n                    <p className=\"bp3-text-small card-watched-muted\">\n                      {formatDistanceStrict(createdAt, Date.now(), {\n                        addSuffix: true,\n                      })}\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            );\n          },\n        )}\n        {targetItem && (\n          <Spring\n            config={{ velocity: 120, friction: 16, clamp: true }}\n            // config={{ duration: 500, easing: '' }}\n            from={selected.style}\n            to={{\n              left: 0,\n              top: 50,\n              width: window.innerWidth,\n              height: window.innerHeight,\n            }}\n            onRest={() =>\n              history.push(\n                `/movie/${targetItem.item.id}/watched/${targetItem.id}`,\n              )\n            }\n          >\n            {props => (\n              <div style={props}>\n                <img\n                  width=\"300\"\n                  height=\"200\"\n                  className=\"img-responsive\"\n                  src={`https://image.tmdb.org/t/p/w1280${targetItem.item.poster_path}`}\n                  style={{\n                    position: 'relative',\n                    maxHeight: 300,\n                    objectFit: 'cover',\n                  }}\n                  alt=\"\"\n                />\n                <div style={{ height: '100%', backgroundColor: '#0C1821' }} />\n              </div>\n            )}\n          </Spring>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n}\n","import React from 'react';\n\nexport default function Setup() {\n  return (\n    <div>Download and setup the platform</div>\n  )\n}","import React from 'react';\nimport { formatDistanceStrict, format } from 'date-fns';\nimport { Tooltip } from '@blueprintjs/core';\n\nexport type Props = {\n  date: Date | number;\n  baseDate?: Date | number;\n  options?: Parameters<typeof formatDistanceStrict>[2];\n};\n\nexport function RelativeDate({\n  date,\n  baseDate = Date.now(),\n  options = { addSuffix: true },\n}: Props) {\n  return (\n    <Tooltip content={format(date, 'yyyy MMM dd, HH:mm')}>\n      {formatDistanceStrict(date, baseDate, options)}\n    </Tooltip>\n  );\n}\n","import React from 'react';\nimport { Card } from '@blueprintjs/core';\nimport { ItemType, Movie, Tv, Season, Episode } from '../graphql';\nimport { Link } from 'react-router-dom';\nimport { formatTvString } from './helpers/watched';\nimport { RelativeDate } from './RelativeDate';\n\ntype ItemData =\n  | Pick<Movie, 'id' | 'title' | 'poster_path'>\n  | Pick<Tv, 'id' | 'name' | 'poster_path'>;\n\ntype SeasonData = Pick<Season, 'id' | 'season_number'>;\ntype TvItemData =\n  | SeasonData\n  | (Pick<Episode, 'id' | 'episode_number'> & { season: SeasonData });\n\nexport default function Seen({\n  type,\n  item,\n  date,\n  tvItem,\n}: {\n  type: ItemType;\n  item: ItemData;\n  tvItem?: TvItemData;\n  date?: number | Date;\n}) {\n  const name = 'title' in item ? item.title : item.name;\n  const route = type === ItemType.Movie ? 'movie' : 'tv';\n\n  return (\n    <Link to={`/${route}/${item.id}`}>\n      <Card className=\"card-watched\">\n        <div style={{ position: 'relative' }}>\n          <img\n            width=\"300\"\n            height=\"200\"\n            className=\"img-responsive\"\n            src={`https://image.tmdb.org/t/p/w1280${item.poster_path}`}\n            style={{ position: 'relative' }}\n            alt=\"\"\n          />\n        </div>\n        <div className=\"p-3 text-left title\">\n          <div className=\"flex flex-content-between flex-items-center\">\n            <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n              {name}\n            </strong>\n            <div>{formatTvString(tvItem)}</div>\n          </div>\n          {date && (\n            <p className=\"bp3-text-small card-watched-muted\">\n              <RelativeDate date={date} />\n            </p>\n          )}\n        </div>\n      </Card>\n    </Link>\n  );\n}\n","export enum DialogQueryParams {\n  EditingAutoTracked = 'editing-auto-tracked',\n  EditingWatched = 'editing-watched',\n}\n","import { SyntheticEvent } from 'react';\n\nexport const preventBubbling = <T extends SyntheticEvent>(\n  cb?: (event: T) => void,\n) => (event: T) => {\n  event.stopPropagation();\n  cb?.(event);\n};\n\nexport const container = document.getElementById('root') || undefined;\n","import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\nimport {\n  Dialog,\n  Classes,\n  Button,\n  Icon,\n  IOverlayProps,\n  Intent,\n  MaybeElement,\n  IconName,\n} from '@blueprintjs/core';\nimport { container } from './helpers/general';\n\nexport default function BlockingAlert({\n  canEscapeKeyCancel = false,\n  canOutsideClickCancel = false,\n  confirmButtonText = 'Ok',\n  cancelButtonText,\n  onConfirm,\n  onCancel,\n  isLoading = false,\n  className = '',\n  intent,\n  icon,\n  children,\n  ...overlayProps\n}: {\n  isOpen: boolean;\n  canEscapeKeyCancel?: boolean;\n  canOutsideClickCancel?: boolean;\n  confirmButtonText?: string;\n  cancelButtonText?: string;\n  onConfirm: (event: React.MouseEvent) => void;\n  onCancel?: (event?: React.SyntheticEvent) => void;\n  isLoading?: boolean;\n  className?: string;\n  intent?: Intent;\n  icon?: IconName | MaybeElement;\n  children?: ReactNode;\n  overlayProps?: IOverlayProps;\n}) {\n  return (\n    <Dialog\n      {...overlayProps}\n      portalContainer={container}\n      className={classNames(Classes.ALERT, className)}\n      canEscapeKeyClose={canEscapeKeyCancel && !isLoading}\n      canOutsideClickClose={canOutsideClickCancel && !isLoading}\n      onClose={onCancel}\n    >\n      <div className={Classes.ALERT_BODY}>\n        <Icon icon={icon} iconSize={40} intent={intent} />\n        <div className={Classes.ALERT_CONTENTS}>{children}</div>\n      </div>\n      <div className={Classes.ALERT_FOOTER}>\n        <Button\n          intent={intent}\n          text={confirmButtonText}\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n        />\n        {cancelButtonText && (\n          <Button\n            text={cancelButtonText}\n            onClick={onCancel}\n            disabled={isLoading}\n          />\n        )}\n      </div>\n    </Dialog>\n  );\n}\n","import React, { ReactNode } from 'react';\nimport { Intent } from '@blueprintjs/core';\n\nimport BlockingAlert from './BlockingAlert';\n\nexport default function DeleteConfirmation({\n  title,\n  isOpen,\n  isLoading,\n  onCancel,\n  onConfirm,\n}: {\n  title: ReactNode;\n  isOpen: boolean;\n  isLoading?: boolean;\n  onCancel?: () => void;\n  onConfirm: () => void;\n}) {\n  return (\n    <BlockingAlert\n      cancelButtonText=\"Cancel\"\n      confirmButtonText=\"Remove\"\n      icon=\"trash\"\n      intent={Intent.DANGER}\n      isOpen={isOpen || false}\n      isLoading={isLoading}\n      onCancel={onCancel}\n      onConfirm={onConfirm}\n    >\n      {title}\n    </BlockingAlert>\n  );\n}\n","import React from 'react';\nimport {\n  Card,\n  ButtonGroup,\n  Button,\n  NonIdealState,\n  Code,\n  Icon,\n} from '@blueprintjs/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { AutoTrackedListQuery } from '../graphql';\nimport { formatTvString } from '../common/helpers/watched';\nimport { RelativeDate } from '../common/RelativeDate';\nimport { preventBubbling } from '../common/helpers/general';\nimport { DialogQueryParams } from '../common/dialog/query-params';\n\ntype Props = AutoTrackedListQuery['autoTrackedList']['autoTracked'][0] & {\n  isSelected: boolean;\n  onSelect: () => void;\n  onDeselect: () => void;\n  onSave: () => void;\n  onRemove: () => void;\n};\n\nexport function AutoTrackedItems({\n  id,\n  createdAt,\n  meta,\n  item,\n  tvItem,\n  isSelected,\n  onSelect,\n  onDeselect,\n  onSave,\n  onRemove,\n}: Props) {\n  const name = item ? ('title' in item ? item.title : item.name) : '';\n  const location = useLocation();\n  const search = new URLSearchParams(location.search);\n  search.set(DialogQueryParams.EditingAutoTracked, id);\n\n  return (\n    <Card\n      className={`card-watched fill-container ${isSelected ? 'selected' : ''}`}\n      elevation={isSelected ? 4 : undefined}\n      onClick={isSelected ? onDeselect : onSelect}\n    >\n      {item && (\n        <>\n          <div>\n            <img\n              width=\"300\"\n              height=\"200\"\n              className=\"img-responsive\"\n              src={`https://image.tmdb.org/t/p/w342${item.poster_path}`}\n              alt={`${name} poster`}\n            />\n          </div>\n\n          <div className=\"p-3 title\">\n            <div className=\"flex flex-content-between flex-items-center\">\n              <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n                {name}\n              </strong>\n              <div>{formatTvString(tvItem)}</div>\n            </div>\n            {createdAt && (\n              <p className=\"bp3-text-small card-watched-muted\">\n                <RelativeDate date={createdAt} />\n              </p>\n            )}\n          </div>\n        </>\n      )}\n      {!item && (\n        <NonIdealState\n          icon=\"help\"\n          title=\"Couldn't find item\"\n          description={\n            <div className=\"text-left px-2\" style={{ width: '100%' }}>\n              <div className=\"mb-3\">\n                <strong>Here's what we know:</strong>\n              </div>\n              <div className=\"mb-1\">\n                Watched <RelativeDate date={createdAt} />\n              </div>\n              {meta.title && (\n                <div className=\"mb-1\">\n                  <span>Title read as </span>\n                  <Code>{meta.title}</Code>{' '}\n                </div>\n              )}\n              {meta.tvData && (\n                <div className=\"mb-1\">\n                  <span>TV info - </span>\n                  {meta.tvData.season && <span>S{meta.tvData.season}</span>}\n                  {meta.tvData.episode && <span>E{meta.tvData.episode}</span>}\n                </div>\n              )}\n              {meta.provider && (\n                <div className=\"mb-1\">\n                  <span>Tracked on {meta.provider}, from</span>\n                  <br />\n                  {meta.url && (\n                    <Code\n                      className=\"mt-1\"\n                      style={{\n                        display: 'inline-block',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        width: '100%',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {meta.url}\n                    </Code>\n                  )}\n                  {meta.filename && (\n                    <Code\n                      className=\"mt-1\"\n                      style={{\n                        display: 'inline-block',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        width: '100%',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {meta.filename}\n                    </Code>\n                  )}\n                </div>\n              )}\n            </div>\n          }\n        />\n      )}\n      <ButtonGroup fill minimal onClick={preventBubbling()}>\n        {item && (\n          <Button disabled={!item} icon=\"tick\" onClick={onSave}>\n            Save\n          </Button>\n        )}\n        <Link<any>\n          to={{ search: search.toString() }}\n          replace\n          className=\"bp3-button\"\n        >\n          <Icon icon=\"edit\" className=\"mr-2\" />\n          <span>Edit</span>\n        </Link>\n\n        <Button icon=\"trash\" onClick={onRemove}>\n          Remove\n        </Button>\n      </ButtonGroup>\n    </Card>\n  );\n}\n","import { Position, Toaster } from '@blueprintjs/core';\n\nexport const AppToaster = Toaster.create({\n  position: Position.TOP_RIGHT,\n});\n","import React, { useState } from 'react';\nimport { H2, Checkbox, Button, Classes, Icon, Intent } from '@blueprintjs/core';\n\nimport {\n  useUserQuery,\n  useAuthQuery,\n  useWatchesQuery,\n  useAutoTrackedListQuery,\n  useConvertAutoTrackedMutation,\n  useRemoveAutoTrackedMutation,\n} from '../graphql';\nimport Seen from '../common/Seen';\nimport DeleteConfirmation from '../common/DeleteConfirmation';\nimport { AutoTrackedItems } from './AutoTrackedItems';\nimport { AppToaster } from '../common/toaster';\n\nexport default function Dashboard() {\n  const { data: localUser } = useAuthQuery();\n  const userData = localUser?.auth;\n  const { data: watchesData } = useWatchesQuery({\n    variables: {\n      userId: localUser?.auth?.id,\n    },\n  });\n  const { data: autoTrackedData } = useAutoTrackedListQuery({\n    variables: {\n      userId: localUser?.auth?.id || '',\n    },\n  });\n  const { data } = useUserQuery({\n    variables: { id: userData?.id },\n  });\n  const [removeAutoTracked, { loading }] = useRemoveAutoTrackedMutation({\n    refetchQueries: ['AutoTrackedList'],\n  });\n  const [convertAutoTracked] = useConvertAutoTrackedMutation({\n    refetchQueries: ['AutoTrackedList'],\n  });\n\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [pendingRemoval, setPendingRemoval] = useState<{\n    title: React.ReactNode;\n    onConfirm: () => void;\n  } | null>();\n\n  if (!userData) return null;\n  if (!data?.user?.watched) return null;\n\n  return (\n    <>\n      <div>\n        <div className=\"p-4 pb-1\">\n          <H2>Automatically tracked shows</H2>\n          <div className=\"flex flex-items-center\">\n            <Checkbox\n              className=\"m-0 py-2\"\n              checked={\n                selectedIds.length ===\n                autoTrackedData?.autoTrackedList.autoTracked.length\n              }\n              indeterminate={\n                !!selectedIds.length &&\n                selectedIds.length <\n                  (autoTrackedData?.autoTrackedList.autoTracked.length || 0)\n              }\n              label={\n                selectedIds.length\n                  ? `${selectedIds.length} Selected`\n                  : 'Select all'\n              }\n              onChange={() =>\n                setSelectedIds(\n                  selectedIds.length ===\n                    autoTrackedData?.autoTrackedList.autoTracked.length\n                    ? []\n                    : autoTrackedData?.autoTrackedList.autoTracked.map(\n                        ({ id }) => id,\n                      ) || [],\n                )\n              }\n            />\n            {!!selectedIds.length && (\n              <>\n                <Button\n                  small\n                  className=\"ml-2\"\n                  icon=\"tick\"\n                  onClick={async () => {\n                    const ids = selectedIds.filter(id => {\n                      const trackedItem = autoTrackedData?.autoTrackedList.autoTracked.find(\n                        item => item.id === id,\n                      );\n                      return trackedItem && trackedItem.item;\n                    });\n                    const hasItemlessIds = ids.length !== selectedIds.length;\n\n                    await convertAutoTracked({ variables: { ids } });\n                    if (hasItemlessIds) {\n                      AppToaster.show({\n                        message: \"Couldn't save items without shows\",\n                        intent: Intent.WARNING,\n                      });\n                    }\n                    setSelectedIds([]);\n                  }}\n                >\n                  Save\n                </Button>\n                <Button\n                  small\n                  className=\"ml-2\"\n                  icon=\"trash\"\n                  onClick={() =>\n                    setPendingRemoval({\n                      title: (\n                        <p>\n                          Are you sure you want to remove the selected items?\n                        </p>\n                      ),\n                      onConfirm: async () => {\n                        await removeAutoTracked({\n                          variables: { ids: selectedIds },\n                        });\n                        setSelectedIds([]);\n                        setPendingRemoval(null);\n                      },\n                    })\n                  }\n                >\n                  Remove\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"grid grid-card\">\n          {autoTrackedData?.autoTrackedList.autoTracked.map(\n            ({ id, createdAt, meta, item, tvItem }, i, arr) => (\n              <div\n                key={id}\n                className={Classes.INTENT_PRIMARY}\n                style={{\n                  position: 'relative',\n                }}\n              >\n                {selectedIds.includes(id) && (\n                  <Icon\n                    icon=\"tick-circle\"\n                    intent={Intent.PRIMARY}\n                    iconSize={16}\n                    style={{\n                      position: 'absolute',\n                      left: -8,\n                      top: -8,\n                      zIndex: 1,\n                    }}\n                  />\n                )}\n                <AutoTrackedItems\n                  id={id}\n                  createdAt={createdAt}\n                  meta={meta}\n                  item={item}\n                  tvItem={tvItem}\n                  isSelected={selectedIds.includes(id)}\n                  onSelect={() => setSelectedIds([...selectedIds, id])}\n                  onDeselect={() =>\n                    setSelectedIds(selectedIds.filter(sid => sid !== id))\n                  }\n                  onSave={() =>\n                    convertAutoTracked({ variables: { ids: [id] } })\n                  }\n                  onRemove={() =>\n                    setPendingRemoval({\n                      title: (\n                        <p>Are you sure you want to remove the tracked item?</p>\n                      ),\n                      onConfirm: async () => {\n                        await removeAutoTracked({ variables: { ids: [id] } });\n                        setPendingRemoval(null);\n                      },\n                    })\n                  }\n                />\n              </div>\n            ),\n          )}\n        </div>\n        <div className=\"p-4 pb-1\">\n          <H2>Your last seen</H2>\n        </div>\n        <div className=\"grid grid-card\">\n          {watchesData?.watches.watched.map(\n            ({ id, itemType, item, createdAt, tvItem }) => (\n              <Seen\n                key={id}\n                type={itemType}\n                item={item}\n                tvItem={tvItem || undefined}\n                date={createdAt}\n              />\n            ),\n          )}\n        </div>\n      </div>\n      {pendingRemoval && (\n        <DeleteConfirmation\n          isOpen={!!pendingRemoval}\n          isLoading={loading}\n          title={pendingRemoval.title}\n          onConfirm={pendingRemoval.onConfirm}\n          onCancel={() => setPendingRemoval(null)}\n        />\n      )}\n    </>\n  );\n}\n","import { WatchesQuery, MovieQuery, ReviewsQuery } from '.';\n\nexport const mergeWatches = (\n  prev: WatchesQuery,\n  next?: WatchesQuery,\n): WatchesQuery =>\n  next\n    ? {\n        watches: {\n          ...next.watches,\n          watched: [...prev.watches.watched, ...next.watches.watched],\n        },\n      }\n    : prev;\n\nexport const mergeMovie = (prev: MovieQuery, next?: MovieQuery): MovieQuery =>\n  next\n    ? {\n        movie: {\n          ...next.movie,\n          watched: {\n            ...next.movie.watched,\n            watched: [\n              ...prev.movie.watched.watched,\n              ...next.movie.watched.watched,\n            ],\n          },\n        },\n      }\n    : prev;\n\nexport const mergeReviews = (\n  prev: ReviewsQuery,\n  next?: ReviewsQuery,\n): ReviewsQuery =>\n  next\n    ? {\n        reviews: {\n          ...next.reviews,\n          reviews: [...prev.reviews.reviews, ...next.reviews.reviews],\n        },\n      }\n    : prev;\n","import { ObservableQueryFields } from '@apollo/client';\n\nexport const loadMore = <Q extends {}, V extends {}>(\n  fetchMore: ObservableQueryFields<Q, V>['fetchMore'],\n  variables: V,\n  mergeProps: (prev: Q, next?: Q) => Q,\n) => () => {\n  return fetchMore({\n    variables,\n    updateQuery: (prev, { fetchMoreResult }) =>\n      mergeProps(prev, fetchMoreResult),\n  });\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { User } from '../graphql';\nimport Rating from '../common/Rating';\n\nexport default function Review({\n  review,\n  user,\n  rating,\n  createdAt,\n}: {\n  review: string;\n  user: Pick<User, 'id' | 'name'>;\n  rating?: number;\n  createdAt: Date | number;\n}) {\n  return (\n    <div>\n      <Link to={`/profile/${user.name}`}>{user.name}</Link>\n      &nbsp;\n      <span className=\"bp3-text-muted\">\n        {formatDistanceStrict(createdAt, Date.now(), { addSuffix: true })}\n      </span>\n      {rating && <Rating className=\"ml-2\" value={rating} />}\n      <p>{review}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Spinner, Button, NonIdealState } from '@blueprintjs/core';\n\nimport { useReviewsQuery } from '../graphql';\nimport { mergeReviews } from '../graphql/fetchMore';\nimport { loadMore } from '../common/helpers/graphql';\nimport Review from './Review';\n\nexport default function ReviewList({\n  itemId,\n  tvItemId,\n}: {\n  itemId: string;\n  tvItemId?: string;\n}) {\n  const reviewsVariables = {\n    itemId,\n    tvItemId,\n  };\n\n  const { data: reviewsData, loading, fetchMore } = useReviewsQuery({\n    variables: reviewsVariables,\n  });\n\n  if (loading) return <Spinner />;\n\n  // TODO: most likely error, handle it\n  if (!reviewsData?.reviews) return null;\n\n  const { reviews, hasMore, cursor } = reviewsData?.reviews;\n\n  if (!reviews.length) {\n    return <NonIdealState icon=\"chat\" title=\"No reviews yet\" />;\n  }\n\n  return (\n    <>\n      {reviews.map(({ id, body, watched: { rating, user, createdAt } }) => (\n        <Review\n          key={id}\n          review={body}\n          user={user}\n          createdAt={createdAt}\n          rating={rating?.value}\n        />\n      ))}\n      {hasMore && (\n        <Button\n          text=\"Show more\"\n          onClick={loadMore(\n            fetchMore,\n            {\n              ...reviewsVariables,\n              cursor,\n            },\n            mergeReviews,\n          )}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Card,\n  Elevation,\n  ButtonGroup,\n  Button,\n  Intent,\n} from '@blueprintjs/core';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { WatchesQuery, useRemoveWatchedMutation } from '../graphql';\nimport Rating from '../common/Rating';\nimport { formatTvString } from '../common/helpers/watched';\nimport BlockingAlert from '../common/BlockingAlert';\n\nexport default function Watched({\n  watched,\n  onClickEdit,\n  className,\n}: {\n  watched: WatchesQuery['watches']['watched'][0];\n  onClickEdit: (watched: WatchesQuery['watches']['watched'][0]) => void;\n  className?: string;\n}) {\n  const { id, createdAt, rating, review, tvItem } = watched;\n  const [deleteAlert, setDeleteAlert] = useState<{\n    dialogOpen: boolean;\n    isLoading: boolean;\n  }>({\n    dialogOpen: false,\n    isLoading: false,\n  });\n\n  const [\n    removeWatched,\n    { loading: loadingRemoveWatched },\n  ] = useRemoveWatchedMutation({\n    update: (cache, { data: removedWatched }) => {\n      const removedId = removedWatched?.removeWatched;\n      const dataId = cache.identify({\n        id: removedId,\n        __typename: 'Watched',\n      });\n\n      if (!removedId || !dataId) return;\n\n      cache.evict({ id: dataId });\n      cache.gc();\n    },\n  });\n\n  return (\n    <Card elevation={Elevation.ONE} className={className}>\n      <div className=\"flex flex-content-between flex-items-center mb-2\">\n        <div>\n          <span>Seen </span>\n          {tvItem && <span>{formatTvString(tvItem)} </span>}\n          <span className=\"bp3-text-muted mr-2\">\n            {formatDistanceStrict(createdAt, Date.now(), {\n              addSuffix: true,\n            })}\n          </span>\n          {rating && <Rating value={rating.value} />}\n        </div>\n        <ButtonGroup>\n          <Button icon=\"edit\" small onClick={() => onClickEdit(watched)}>\n            Edit\n          </Button>\n\n          <Button\n            small\n            icon=\"trash\"\n            intent={Intent.DANGER}\n            loading={loadingRemoveWatched}\n            onClick={() =>\n              setDeleteAlert({ dialogOpen: true, isLoading: false })\n            }\n          >\n            Remove\n          </Button>\n          <BlockingAlert\n            cancelButtonText=\"Cancel\"\n            confirmButtonText=\"Remove\"\n            icon=\"trash\"\n            intent={Intent.DANGER}\n            isOpen={deleteAlert.dialogOpen}\n            isLoading={deleteAlert.isLoading}\n            onCancel={() =>\n              setDeleteAlert({ dialogOpen: false, isLoading: false })\n            }\n            onConfirm={async () => {\n              if (!deleteAlert.dialogOpen) return;\n\n              setDeleteAlert({ ...deleteAlert, isLoading: true });\n              await removeWatched({\n                variables: { itemId: id },\n              });\n            }}\n          >\n            <p>\n              Are you sure you want to remove this watched entry?\n              <br />\n              <br />\n              <i>\n                This will also remove the associated rating and review if any.\n                Removing cannot be undone.\n              </i>\n            </p>\n          </BlockingAlert>\n        </ButtonGroup>\n      </div>\n      {review && <p>{review.body}</p>}\n      {!review && <p className=\"bp3-text-muted\">No review</p>}\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Spinner, NonIdealState, Button } from '@blueprintjs/core';\nimport { useWatchesQuery, WatchesQuery } from '../graphql';\nimport Watched from './Watched';\nimport { loadMore } from '../common/helpers/graphql';\nimport { mergeWatches } from '../graphql/fetchMore';\n\nexport default function UserWatchedList({\n  itemId,\n  userId,\n  onEdit,\n}: {\n  itemId: string;\n  userId: string;\n  onEdit: (watched: WatchesQuery['watches']['watched'][0]) => void;\n}) {\n  const watchesVariables = {\n    userId,\n    itemId,\n  };\n\n  const { data: userWatched, loading, fetchMore } = useWatchesQuery({\n    variables: watchesVariables,\n    skip: !userId,\n  });\n\n  if (loading) return <Spinner />;\n\n  // TODO: most likely error, handle it\n  if (!userWatched?.watches) return null;\n\n  const { watched, hasMore, cursor } = userWatched.watches;\n\n  if (!watched.length) {\n    return (\n      <NonIdealState\n        icon=\"film\"\n        title=\"Not yet seen\"\n        description=\"Have you seen it? Watch it or track it!\"\n        // action={<Button text=\"Seen it\" />}\n      />\n    );\n  }\n\n  return (\n    <>\n      {watched.map(watched => (\n        <Watched\n          key={watched.id}\n          watched={watched}\n          onClickEdit={watched => onEdit(watched)}\n        />\n      ))}\n      {hasMore && (\n        <Button\n          text=\"Show more\"\n          onClick={loadMore(\n            fetchMore,\n            {\n              ...watchesVariables,\n              cursor,\n            },\n            mergeWatches,\n          )}\n        />\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport ReactRating from 'react-rating';\n\nexport default function RatingInput({\n  value,\n  onChange,\n  className = '',\n}: {\n  value: number;\n  onChange: ReactRating['props']['onChange'];\n  className?: string;\n}) {\n  return (\n    <ReactRating\n      onChange={onChange}\n      className={'rating ' + className}\n      initialRating={value}\n      fractions={2}\n      fullSymbol={\n        <Icon icon={IconNames.STAR} color=\"gold\" iconSize={Icon.SIZE_LARGE} />\n      }\n      emptySymbol={\n        <Icon\n          icon={IconNames.STAR_EMPTY}\n          color=\"gold\"\n          iconSize={Icon.SIZE_LARGE}\n        />\n      }\n    />\n  );\n}\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport { FormGroup, TextArea, Button, Intent } from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\n\nimport RatingInput from './RatingInput';\nimport { WatchedFormItemData, WatchedValues } from './WatchedForm';\n\ninterface Props {\n  item: WatchedFormItemData;\n  values?: WatchedValues;\n  onSubmit: (\n    values: WatchedValues,\n    formActions: FormikHelpers<WatchedValues>,\n  ) => void;\n  isLoading: boolean;\n}\n\nexport default function WatchedMovieForm({\n  item,\n  onSubmit,\n  isLoading,\n  values = { review: '', createdAt: Date.now() },\n}: Props) {\n  return (\n    <React.Fragment>\n      <div className=\"flex p-3\">\n        {item.poster && (\n          <div className=\"pr-3\">\n            <img\n              src={`https://image.tmdb.org/t/p/w185${item.poster}`}\n              alt={`Poster for ${item.title}`}\n              className=\"img-responsive\"\n            />\n          </div>\n        )}\n        <Formik<WatchedValues>\n          enableReinitialize\n          initialValues={values}\n          onSubmit={onSubmit}\n        >\n          {({ values, handleChange, handleSubmit, setFieldValue }) => (\n            <form className=\"flex-grow\" onSubmit={handleSubmit}>\n              <FormGroup label=\"Watched on\" labelFor=\"createdAt\">\n                <DateInput\n                  popoverProps={{\n                    fill: true,\n                  }}\n                  formatDate={date => date.toLocaleString()}\n                  parseDate={str => new Date(str)}\n                  placeholder=\"M/D/YYYY\"\n                  onChange={date => setFieldValue('createdAt', +new Date(date))}\n                  value={new Date(values.createdAt)}\n                />\n              </FormGroup>\n              <FormGroup label=\"Review\" labelFor=\"review\">\n                <TextArea\n                  fill\n                  growVertically\n                  large\n                  name=\"review\"\n                  onChange={handleChange}\n                  value={values.review}\n                  placeholder=\"Any thoughts on what you watched?\"\n                />\n              </FormGroup>\n              <FormGroup label=\"Rating\" labelFor=\"rating\">\n                <div className=\"flex flex-content-between flex-items-center\">\n                  <div>\n                    <RatingInput\n                      value={values.rating || 0}\n                      className=\"seen-rating\"\n                      onChange={value => setFieldValue('rating', value)}\n                    />{' '}\n                    <span>{values.rating || '?'}/5</span>\n                  </div>\n                  {values.rating && (\n                    <Button\n                      icon=\"cross\"\n                      intent={Intent.DANGER}\n                      minimal\n                      small\n                      onClick={() => setFieldValue('rating', undefined)}\n                    />\n                  )}\n                </div>\n              </FormGroup>\n              <Button\n                type=\"submit\"\n                large\n                fill\n                intent={Intent.PRIMARY}\n                loading={isLoading}\n              >\n                Add\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n}\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport {\n  FormGroup,\n  TextArea,\n  Button,\n  Intent,\n  MenuItem,\n  PopoverPosition,\n  MenuDivider,\n  Tooltip,\n  Spinner,\n} from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\n\nimport { TvQuery, useSeasonsQuery } from '../graphql';\nimport RatingInput from './RatingInput';\nimport { Suggest, ItemRenderer } from '@blueprintjs/select';\nimport { TvData } from '../show/Tv/WatchedTvDialog';\nimport { WatchedValues } from './WatchedForm';\n\ninterface ItemSelection {\n  id: string;\n  name: string;\n  seasonName: string;\n  lastSeasonEpisode: boolean;\n  lastSeason: boolean;\n}\n\nconst itemFilter = (query: string, items: ItemSelection[]) =>\n  items.filter(({ name, seasonName }) =>\n    `${name} ${seasonName}`.toLowerCase().includes(query.toLowerCase()),\n  );\n\nconst getSelectOptions = (seasons: TvQuery['tv']['seasons']) =>\n  seasons.reduce(\n    (\n      acc: Array<ItemSelection>,\n      { season_number: season, episodes },\n      seasonIndex,\n    ) => {\n      acc.push(\n        ...episodes.map(\n          ({ id, name, episode_number: episode }, episodeIndex) => ({\n            id,\n            name,\n            seasonName: season ? `S${season}E${episode}` : '',\n            value: { season, episode },\n            lastSeasonEpisode: episodeIndex + 1 === episodes.length,\n            lastSeason: seasonIndex + 1 === seasons.length,\n          }),\n        ),\n      );\n\n      return acc;\n    },\n    [],\n  );\n\nconst renderEpisode: ItemRenderer<ItemSelection> = (\n  episode,\n  { handleClick, modifiers, query },\n) => {\n  if (!modifiers.matchesPredicate) return null;\n\n  return (\n    <React.Fragment key={episode.id}>\n      <MenuItem\n        active={modifiers.active}\n        text={episode.name}\n        label={episode.seasonName || undefined}\n        onClick={handleClick}\n      />\n      {!query && episode.lastSeasonEpisode && !episode.lastSeason && (\n        <MenuDivider />\n      )}\n    </React.Fragment>\n  );\n};\n\ninterface Props {\n  item: TvData;\n  values?: WatchedValues;\n  onSubmit: (\n    values: WatchedValues,\n    formActions: FormikHelpers<WatchedValues>,\n  ) => void;\n  isLoading: boolean;\n}\n\nexport default function WatchedTvForm({\n  item,\n  onSubmit,\n  isLoading,\n  values = { createdAt: Date.now(), review: '' },\n}: Props) {\n  const { data, loading: isSeasonsLoading } = useSeasonsQuery({\n    variables: {\n      itemId: item.id,\n    },\n    skip: !!item.seasons,\n  });\n  const seasons = item.seasons || data?.seasons || [];\n\n  const options = getSelectOptions(seasons);\n  return (\n    <div className=\"flex p-3\">\n      {item.poster && (\n        <div className=\"pr-3\">\n          <img\n            src={`https://image.tmdb.org/t/p/w185${item.poster}`}\n            alt={`Poster for ${item.title}`}\n            className=\"img-responsive\"\n          />\n        </div>\n      )}\n      <Formik<WatchedValues>\n        enableReinitialize\n        initialValues={values}\n        onSubmit={onSubmit}\n      >\n        {({ values, handleChange, handleSubmit, setFieldValue }) => (\n          <form className=\"flex-grow\" onSubmit={handleSubmit}>\n            <FormGroup label=\"Watched on\" labelFor=\"createdAt\">\n              <DateInput\n                popoverProps={{\n                  fill: true,\n                }}\n                formatDate={date => date.toLocaleString()}\n                parseDate={str => new Date(str)}\n                placeholder=\"M/D/YYYY\"\n                onChange={date => setFieldValue('createdAt', +new Date(date))}\n                value={new Date(values.createdAt)}\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Episode\"\n              labelFor=\"tvItemId\"\n              helperText=\"Empty episode field indicates the whole show\"\n            >\n              <Suggest<ItemSelection>\n                selectedItem={\n                  options.find(({ id }) => id === values.tvItemId) || null\n                }\n                inputValueRenderer={({ name, seasonName }) =>\n                  `${name} - ${seasonName}`\n                }\n                itemRenderer={renderEpisode}\n                items={options}\n                itemListPredicate={itemFilter}\n                onItemSelect={({ id }) => setFieldValue('tvItemId', id)}\n                noResults={<MenuItem disabled text=\"Got nothing :(\" />}\n                popoverProps={{\n                  minimal: true,\n                  fill: true,\n                  usePortal: false,\n                  position: PopoverPosition.BOTTOM,\n                }}\n                disabled={isSeasonsLoading}\n                inputProps={{\n                  placeholder: 'Select an episode',\n                  rightElement: !isSeasonsLoading ? (\n                    <Tooltip content=\"Clear selection\">\n                      <Button\n                        icon=\"cross\"\n                        minimal\n                        onClick={() => setFieldValue('tvItemId', null)}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <Tooltip content=\"Loading season data\">\n                      <Spinner size={16} />\n                    </Tooltip>\n                  ),\n                }}\n                className=\"select-popover-centered\"\n              />\n            </FormGroup>\n            <FormGroup label=\"Review\" labelFor=\"review\">\n              <TextArea\n                fill\n                growVertically\n                large\n                name=\"review\"\n                onChange={handleChange}\n                value={values.review}\n                placeholder=\"Any thoughts on what you watched?\"\n              />\n            </FormGroup>\n            <FormGroup label=\"Rating\" labelFor=\"rating\">\n              <div className=\"flex flex-content-between flex-items-center\">\n                <div>\n                  <RatingInput\n                    value={values.rating || 0}\n                    className=\"seen-rating\"\n                    onChange={value => setFieldValue('rating', value)}\n                  />{' '}\n                  <span>{values.rating || '?'}/5</span>\n                </div>\n                {values.rating && (\n                  <Button\n                    icon=\"cross\"\n                    intent={Intent.DANGER}\n                    minimal\n                    small\n                    onClick={() => setFieldValue('rating', undefined)}\n                  />\n                )}\n              </div>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              large\n              fill\n              intent={Intent.PRIMARY}\n              loading={isLoading}\n            >\n              Add\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport {\n  MovieQuery,\n  TvQuery,\n  WatchesQuery,\n  AutoTrackedMeta,\n  ItemDataFragment,\n} from '../graphql';\nimport WatchedMovieForm from './WatchedMovieForm';\nimport WatchedTvForm from './WatchedTvForm';\nimport { FormikConfig } from 'formik';\n\nexport type EditingWatched =\n  | null\n  | {\n      isEditing: false;\n      autoTracked?: {\n        id: string;\n        createdAt: number;\n        meta: AutoTrackedMeta;\n        tvItemId?: string;\n      };\n    }\n  | { isEditing: true; item: WatchesQuery['watches']['watched'][0] };\n\nexport type WatchedFormItemData = {\n  id: string;\n  title: string;\n  poster: string;\n};\n\nexport type WatchedValues = {\n  createdAt: number;\n  review: string;\n  rating?: number;\n  tvItemId?: string;\n};\n\ntype Props = {\n  editingWatched: EditingWatched;\n  onSubmit: FormikConfig<WatchedValues>['onSubmit'];\n  isLoading: boolean;\n  item: TvQuery['tv'] | MovieQuery['movie'] | ItemDataFragment;\n};\n\nexport default function WatchedForm({\n  editingWatched,\n  onSubmit,\n  isLoading,\n  item,\n}: Props) {\n  const values = editingWatched?.isEditing\n    ? {\n        createdAt: editingWatched.item.createdAt,\n        review: editingWatched.item.review?.body || '',\n        rating: editingWatched.item.rating?.value,\n        tvItemId: editingWatched.item.tvItem?.id,\n      }\n    : editingWatched?.autoTracked\n    ? {\n        createdAt: editingWatched.autoTracked.createdAt,\n        tvItemId: editingWatched.autoTracked.tvItemId,\n        review: '',\n      }\n    : undefined;\n\n  if ('title' in item) {\n    return (\n      <WatchedMovieForm\n        item={{\n          id: item.id,\n          title: item.title,\n          poster: item.poster_path || '',\n        }}\n        values={values}\n        onSubmit={onSubmit}\n        isLoading={isLoading}\n      />\n    );\n  }\n\n  if ('name' in item) {\n    return (\n      <WatchedTvForm\n        item={{\n          id: item.id,\n          title: item.name,\n          poster: item.poster_path || '',\n          seasons: 'seasons' in item ? item.seasons : undefined,\n        }}\n        values={values}\n        onSubmit={onSubmit}\n        isLoading={isLoading}\n      />\n    );\n  }\n\n  return null;\n}\n","import React from 'react';\n\nimport {\n  useAddWatchedMutation,\n  useEditWatchedMutation,\n  TvItemType,\n  TvQuery,\n  MovieQuery,\n  ItemType,\n  ItemDataFragment,\n} from '../graphql';\nimport WatchedForm, { EditingWatched } from '../common/WatchedForm';\n\nexport type Props = {\n  editingWatched: EditingWatched;\n  afterSave: () => void;\n  item: TvQuery['tv'] | MovieQuery['movie'] | ItemDataFragment;\n};\n\nexport default function WatchedMutationForm({\n  editingWatched,\n  afterSave,\n  item,\n}: Props) {\n  const [addWatched, { loading: addWatchedLoading }] = useAddWatchedMutation();\n  const [editWatched, { loading: editWatchedLoading }] = useEditWatchedMutation(\n    {\n      update: cache => {\n        // GC potentially removed content like ratings.\n        // TODO: investigate more how apollo gc is triggered to potentially handle this automatically\n        cache.gc();\n      },\n    },\n  );\n  const isLoading = addWatchedLoading || editWatchedLoading;\n\n  return (\n    <WatchedForm\n      editingWatched={editingWatched}\n      item={item}\n      isLoading={isLoading}\n      onSubmit={async ({ createdAt, rating, review, tvItemId }) => {\n        let query;\n\n        if (editingWatched?.isEditing) {\n          query = editWatched({\n            variables: {\n              createdAt,\n              id: editingWatched.item.id,\n              tvItemId,\n              tvItemType: tvItemId ? TvItemType.Episode : undefined,\n              rating: rating\n                ? {\n                    id: editingWatched.item.rating?.id,\n                    value: rating,\n                  }\n                : undefined,\n              review: review\n                ? {\n                    id: editingWatched.item.review?.id,\n                    body: review,\n                  }\n                : undefined,\n            },\n            // Assuming this can only be accessed from the dashboard so initiating the auto tracked item list refetch\n            refetchQueries:\n              'autoTracked' in editingWatched ? ['AutoTrackedList'] : undefined,\n          });\n        }\n\n        query = addWatched({\n          variables: {\n            createdAt,\n            itemId: item.id,\n            itemType: 'name' in item ? ItemType.Tv : ItemType.Movie,\n            tvItemId,\n            tvItemType: tvItemId ? TvItemType.Episode : undefined,\n            rating: rating ? { value: rating } : undefined,\n            review: review ? { body: review } : undefined,\n            autoTrackedId:\n              editingWatched && 'autoTracked' in editingWatched\n                ? editingWatched.autoTracked?.id\n                : undefined,\n          },\n          refetchQueries: ['AutoTrackedList'],\n        });\n\n        await query;\n        afterSave();\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport { Dialog } from '@blueprintjs/core';\n\nimport { EditingWatched } from '../common/WatchedForm';\nimport WatchedMutationForm from '../common/WatchedMutationForm';\nimport { TvQuery, MovieQuery, ItemDataFragment } from '../graphql';\nimport { container } from '../common/helpers/general';\n\nexport default function WatchedDialog({\n  editingWatched,\n  item,\n  onClose,\n}: {\n  editingWatched: EditingWatched;\n  item: TvQuery['tv'] | MovieQuery['movie'] | ItemDataFragment;\n  onClose: () => void;\n}) {\n  const name = 'name' in item ? item.name : item.title;\n\n  return (\n    <Dialog\n      className=\"fluid-dialog\"\n      title={`Seen ${name}`}\n      canOutsideClickClose={false}\n      onClose={onClose}\n      isOpen={!!editingWatched}\n      portalContainer={container}\n      lazy\n    >\n      <WatchedMutationForm\n        editingWatched={editingWatched}\n        item={item}\n        afterSave={onClose}\n      />\n    </Dialog>\n  );\n}\n","import React, { useState } from 'react';\nimport { useParams, RouteComponentProps } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { Button, Intent, H1, H2 } from '@blueprintjs/core';\n\nimport { useMovieQuery, useAuthQuery } from '../../graphql';\nimport Rating from '../../common/Rating';\nimport { EditingWatched } from '../../common/WatchedForm';\nimport ReviewList from '../ReviewList';\nimport UserWatchedList from '../UserWatchedList';\nimport WatchedDialog from '../WatchedDialog';\n\ntype MovieRouteParams = {\n  id: string;\n};\n\nexport default function Movie({\n  match,\n}: RouteComponentProps<MovieRouteParams>) {\n  const [editingWatched, setEditingWatched] = useState<EditingWatched>(null);\n\n  const { id } = useParams<MovieRouteParams>();\n\n  const { data: localUser } = useAuthQuery();\n  const { data } = useMovieQuery({\n    variables: {\n      id,\n    },\n    returnPartialData: true,\n  });\n  if (!data?.movie) return null;\n\n  const {\n    title,\n    overview,\n    poster_path,\n    vote_count,\n    vote_average,\n    release_date,\n  } = data.movie;\n  const rating = vote_count > 100 ? vote_average : null;\n\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <img\n          width=\"300\"\n          height=\"200\"\n          className=\"img-responsive\"\n          src={`https://image.tmdb.org/t/p/w1280${poster_path}`}\n          style={{\n            position: 'relative',\n            maxHeight: '300px',\n            objectFit: 'cover',\n          }}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"p-3\">\n        <H1>{title}</H1>\n        {rating && <Rating value={rating} />}\n        {release_date && <p>{format(new Date(release_date), 'yyyy')}</p>}\n        <p>{overview}</p>\n        {localUser?.auth && (\n          <Button\n            intent={Intent.PRIMARY}\n            large\n            onClick={() => setEditingWatched({ isEditing: false })}\n          >\n            Seen it\n          </Button>\n        )}\n\n        {localUser?.auth?.id && (\n          <div>\n            <H2>Your latest tracked</H2>\n            <UserWatchedList\n              itemId={id}\n              userId={localUser.auth.id}\n              onEdit={item => setEditingWatched({ isEditing: true, item })}\n            />\n          </div>\n        )}\n\n        <div>\n          <H2>Latest reviews</H2>\n          <ReviewList itemId={id} />\n        </div>\n\n        <WatchedDialog\n          item={data.movie}\n          editingWatched={editingWatched}\n          onClose={() => setEditingWatched(null)}\n        />\n      </div>\n    </>\n  );\n}\n","import React, { forwardRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, H3, Button, H2 } from '@blueprintjs/core';\nimport { format } from 'date-fns';\n\nimport { TvQuery } from '../../graphql';\nimport Rating from '../../common/Rating';\nimport ReviewList from '../ReviewList';\n\nexport default forwardRef(\n  (\n    {\n      episode: {\n        id,\n        episode_number,\n        name,\n        air_date,\n        overview,\n        vote_average,\n        vote_count,\n      },\n      tvId,\n    }: {\n      episode: TvQuery['tv']['seasons'][0]['episodes'][0];\n      tvId: string;\n    },\n    ref,\n  ) => {\n    const rating = vote_count > 1 ? vote_average : null;\n    return (\n      <div ref={ref as any}>\n        <Link to=\"../\">\n          <Button fill large icon=\"chevron-left\">\n            Back to overview\n          </Button>\n        </Link>\n        <Card>\n          <div className=\"flex flex-content-between mb-3\">\n            <div>\n              <H3 className=\"mb-0\">\n                {episode_number} {name}\n              </H3>\n              {rating && <Rating value={rating} />}\n            </div>\n            {air_date && <div>{format(+air_date, 'do MMM yyyy')}</div>}\n          </div>\n          <p>{overview}</p>\n        </Card>\n        <div>\n          <H2>Latest reviews</H2>\n          <ReviewList itemId={tvId} tvItemId={id} />\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { useState } from 'react';\nimport { Card, H3, Divider, Collapse, Button, Text } from '@blueprintjs/core';\nimport { format } from 'date-fns';\n\nimport { TvQuery } from '../../graphql';\nimport { Link } from 'react-router-dom';\n\ntype SeasonType = TvQuery['tv']['seasons'][0];\n\ntype SeasonProps = {\n  season: SeasonType;\n  tvId: string;\n  expanded?: boolean;\n};\n\nexport default function Season({ season, expanded = false }: SeasonProps) {\n  const [isExpanded, setIsExpanded] = useState<boolean>(expanded);\n\n  return (\n    <Card key={season.id} className=\"mb-2\">\n      <div className=\"flex\">\n        <img\n          className=\"img-responsive\"\n          style={{ maxWidth: 100, objectFit: 'contain' }}\n          width=\"300\"\n          height=\"200\"\n          src={`https://image.tmdb.org/t/p/w780${season.poster_path}`}\n          alt={`Season ${season.id} poster`}\n        />\n        <div className=\"w-100 pl-3\">\n          <div className=\"mb-3 flex flex-content-between flex-items-center\">\n            <H3 className=\"mb-0\">{season.name}</H3>\n            {season.air_date && <div>{format(+season.air_date, 'yyyy')}</div>}\n          </div>\n          <p>{season.overview}</p>\n        </div>\n      </div>\n      <Divider className=\"my-3\" />\n      <Collapse isOpen={isExpanded}>\n        <H3>Episodes</H3>\n        <div>\n          {season.episodes.map((episode, i) => (\n            <div key={episode.id} className=\"flex mb-3\">\n              <div className=\"pr-3 text-center\" style={{ width: '32px' }}>\n                <Text ellipsize>{episode.episode_number}</Text>\n              </div>\n              <div className=\"w-100\">\n                <div className=\"pb-2 flex flex-content-between\">\n                  <div>\n                    <strong>{episode.name}</strong>\n                  </div>\n                  <div className=\"pl-3\">\n                    {episode.air_date && (\n                      <Text ellipsize>\n                        {format(+episode.air_date, 'do MMM yyyy')}\n                      </Text>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <p>{episode.overview}</p>\n                  <Link\n                    to={({ pathname }) =>\n                      `${pathname.replace(/\\/$/, '')}/episode/${episode.id}`\n                    }\n                  >\n                    <Button>View reviews</Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Collapse>\n      <Button\n        fill\n        minimal\n        icon={isExpanded ? 'collapse-all' : 'expand-all'}\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        {isExpanded ? 'Collapse' : 'Expand'}\n      </Button>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { H2 } from '@blueprintjs/core';\n\nimport { TvQuery } from '../../graphql';\nimport Season from './Season';\nimport ReviewList from '../ReviewList';\nimport UserWatchedList from '../UserWatchedList';\n\nexport default function TvOverview({\n  tv,\n  itemId,\n  userId,\n  onEditWatched,\n}: {\n  tv: TvQuery['tv'];\n  itemId: string;\n  userId?: string;\n  onEditWatched: (watched: any) => void;\n}) {\n  return (\n    <>\n      {userId && (\n        <div>\n          <H2>Your latest tracked</H2>\n\n          <UserWatchedList\n            itemId={itemId}\n            userId={userId}\n            onEdit={onEditWatched}\n          />\n        </div>\n      )}\n      <div>\n        <H2>Seasons</H2>\n        {tv.seasons.map(season => (\n          <Season key={season.id} season={season} tvId={itemId} />\n        ))}\n      </div>\n      <div>\n        <H2>Latest reviews</H2>\n        <ReviewList itemId={itemId} />\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { Dialog } from '@blueprintjs/core';\n\nimport {\n  WatchesQuery,\n  useAddWatchedMutation,\n  useEditWatchedMutation,\n  TvItemType,\n  ItemType,\n  TvQuery,\n} from '../../graphql';\nimport WatchedTvForm from '../../common/WatchedTvForm';\nimport { container } from '../../common/helpers/general';\n\nexport type EditingWatched =\n  | null\n  | {\n      isEditing: false;\n      autoTracked?: { id: string; createdAt: number; tvItemId?: string };\n    }\n  | { isEditing: true; item: WatchesQuery['watches']['watched'][0] };\n\nexport type TvData = {\n  id: string;\n  title: string;\n  poster: string;\n  seasons?: TvQuery['tv']['seasons'];\n};\n\nexport default function WatchedTvDialog({\n  tv,\n  editingWatched,\n  onClose,\n}: {\n  tv: TvData;\n  editingWatched: EditingWatched;\n  onClose: () => void;\n}) {\n  const [addWatched, addWatchedVariables] = useAddWatchedMutation();\n  const [editWatched] = useEditWatchedMutation({\n    update: cache => {\n      // GC potentially removed content like ratings.\n      // TODO: investigate more how apollo gc is triggered to potentially handle this automatically\n      cache.gc();\n    },\n  });\n\n  return (\n    <Dialog\n      className=\"fluid-dialog\"\n      title={`Seen ${tv.title}`}\n      canOutsideClickClose={false}\n      onClose={onClose}\n      isOpen={!!editingWatched}\n      lazy\n      portalContainer={container}\n    >\n      <WatchedTvForm\n        item={tv}\n        values={\n          editingWatched?.isEditing\n            ? {\n                createdAt: editingWatched.item.createdAt,\n                review: editingWatched.item.review?.body || '',\n                rating: editingWatched.item.rating?.value,\n                tvItemId: editingWatched.item.tvItem?.id,\n              }\n            : editingWatched?.autoTracked\n            ? {\n                createdAt: editingWatched.autoTracked.createdAt,\n                tvItemId: editingWatched.autoTracked.tvItemId,\n                review: '',\n              }\n            : undefined\n        }\n        isLoading={addWatchedVariables.loading}\n        onSubmit={async ({ createdAt, rating, review, tvItemId }) => {\n          let query;\n\n          if (editingWatched?.isEditing) {\n            query = editWatched({\n              variables: {\n                createdAt,\n                id: editingWatched.item.id,\n                tvItemId,\n                tvItemType: tvItemId ? TvItemType.Episode : undefined,\n                rating: rating\n                  ? {\n                      id: editingWatched.item.rating?.id,\n                      value: rating,\n                    }\n                  : undefined,\n                review: review\n                  ? {\n                      id: editingWatched.item.review?.id,\n                      body: review,\n                    }\n                  : undefined,\n              },\n            });\n          }\n\n          query = addWatched({\n            variables: {\n              createdAt,\n              itemId: tv.id,\n              itemType: ItemType.Tv,\n              tvItemId,\n              tvItemType: tvItemId ? TvItemType.Episode : undefined,\n              rating: rating ? { value: rating } : undefined,\n              review: review ? { body: review } : undefined,\n              autoTrackedId:\n                editingWatched && 'autoTracked' in editingWatched\n                  ? editingWatched.autoTracked?.id\n                  : undefined,\n            },\n          });\n\n          await query;\n          onClose();\n        }}\n      />\n    </Dialog>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  useParams,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport { Intent, Button, H1 } from '@blueprintjs/core';\nimport { format } from 'date-fns';\n\nimport { useTvQuery, useAuthQuery } from '../../graphql';\nimport Rating from '../../common/Rating';\nimport { getSeasonEpisode } from '../../common/helpers/watched';\nimport EpisodeDetails from './EpisodeDetails';\nimport TvOverview from './TvOverview';\nimport WatchedTvDialog, { EditingWatched } from './WatchedTvDialog';\n\ntype TvRouteParams = {\n  id: string;\n};\n\nexport default function Tv({ match }: RouteComponentProps<TvRouteParams>) {\n  const [editingWatched, setEditingWatched] = useState<EditingWatched>(null);\n\n  const { id } = useParams<TvRouteParams>();\n\n  const { data: localUser } = useAuthQuery();\n  const { data } = useTvQuery({\n    variables: {\n      id,\n    },\n  });\n\n  if (!data?.tv) return null;\n\n  const {\n    name,\n    overview,\n    first_air_date,\n    vote_count,\n    vote_average,\n    poster_path,\n    seasons,\n  } = data.tv;\n  const rating = vote_count > 100 ? vote_average : null;\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <img\n          width=\"300\"\n          height=\"200\"\n          className=\"img-responsive\"\n          src={`https://image.tmdb.org/t/p/w1280${poster_path}`}\n          style={{\n            position: 'relative',\n            maxHeight: '300px',\n            objectFit: 'cover',\n          }}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"p-3\">\n        <H1>{name}</H1>\n        {rating && <Rating value={rating} />}\n        {first_air_date && <p>{format(new Date(first_air_date), 'yyyy')}</p>}\n        <p>{overview}</p>\n        {localUser?.auth && (\n          <Button\n            intent={Intent.PRIMARY}\n            large\n            onClick={() => setEditingWatched({ isEditing: false })}\n          >\n            Seen it\n          </Button>\n        )}\n        <Switch>\n          <Route\n            path={`${match.path}/episode/:episodeId`}\n            render={({ match }) => {\n              const episode = getSeasonEpisode(seasons, match.params.episodeId);\n\n              if (!episode) return null;\n\n              return episode && <EpisodeDetails tvId={id} episode={episode} />;\n            }}\n          />\n          <Route\n            path={`${match.path}`}\n            render={({ match }) => {\n              return (\n                <TvOverview\n                  tv={data.tv}\n                  userId={localUser?.auth?.id}\n                  itemId={id}\n                  onEditWatched={item =>\n                    setEditingWatched({ isEditing: true, item })\n                  }\n                />\n              );\n            }}\n          />\n        </Switch>\n        <WatchedTvDialog\n          tv={{\n            id: data.tv.id,\n            title: name,\n            poster: data.tv.poster_path || '',\n            seasons,\n          }}\n          editingWatched={editingWatched}\n          onClose={() => setEditingWatched(null)}\n        />\n      </div>\n    </>\n  );\n}\n","import * as React from 'react';\nimport {\n  InputGroup,\n  Button,\n  FormGroup,\n  Intent,\n  Callout,\n  Colors,\n} from '@blueprintjs/core';\n\nconst inputRegex = new RegExp(\n  '^(?:(?:(?:https?|ftp|\\\\*):)?\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:\\\\*\\\\.?)?(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+((?:\\\\*)|(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)))(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$',\n  'i',\n);\n\nfunction submitItem(\n  value: string,\n  list: string[],\n  setValue: React.Dispatch<React.SetStateAction<string>>,\n  updateList: (value: string[]) => void,\n  setError: React.Dispatch<React.SetStateAction<string>>,\n  hasClashing: boolean,\n) {\n  if (!value || !inputRegex.test(value)) {\n    setError('Invalid address');\n    return;\n  }\n  if (hasClashing) {\n    setError('This address is already covered.');\n    return;\n  }\n\n  const regexVal = `^${value\n    .replace(/[.+?^${}()/|[\\]\\\\]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .toLowerCase()}`;\n  // TODO: consider one upping this by also seeing if it's already negated by some rule.\n  if (list.includes(regexVal)) {\n    setError('This address is already in the list.');\n    return;\n  }\n  updateList([...list, regexVal]);\n  setValue('');\n}\n\ninterface BlacklistProps {\n  id?: string;\n  list: string[];\n  updateList: (value: string[]) => void;\n  helperTextPrefix?: React.ReactNode;\n}\n\ninterface ListItem {\n  matches: boolean;\n  display: string;\n}\n\nconst Blacklist = ({\n  id,\n  list,\n  updateList,\n  helperTextPrefix,\n}: BlacklistProps) => {\n  const [input, setInput] = React.useState('');\n  const [error, setError] = React.useState<string>('');\n  const { list: cleanList, hasClashing } = list.reduce(\n    (acc: { list: ListItem[]; hasClashing: boolean }, item) => {\n      const matches = !!input && new RegExp(item, 'i').test(input);\n      acc.hasClashing = acc.hasClashing || !!matches;\n      acc.list.push({\n        matches,\n        display: item.replace(/\\^|\\.(\\*)|\\\\/g, '$1'),\n      });\n\n      return acc;\n    },\n    { list: [], hasClashing: false },\n  );\n\n  return (\n    <React.Fragment>\n      <FormGroup\n        label=\"Blacklisted sites\"\n        labelFor=\"blacklist-input\"\n        helperText={\n          <>\n            {helperTextPrefix}\n            <span>\n              Supports basic wildcards, some supported examples:\n              <br />\n              https://www.netflix.com/watch/80186674\n              <br />\n              *://*.google.com/video/*\n              <br />\n              //youtube.*\n              <br />\n              *://watch.*\n            </span>\n          </>\n        }\n      >\n        <InputGroup\n          id={id}\n          value={input}\n          intent={error ? Intent.DANGER : Intent.NONE}\n          placeholder=\"https://netflix.com/*\"\n          onChange={({ currentTarget }: React.FormEvent<HTMLInputElement>) => {\n            setInput(currentTarget.value);\n            setError('');\n          }}\n          onKeyPress={event =>\n            event.key === 'Enter'\n              ? submitItem(\n                  (event.target as HTMLInputElement).value,\n                  list,\n                  setInput,\n                  updateList,\n                  setError,\n                  hasClashing,\n                )\n              : null\n          }\n          rightElement={\n            <Button\n              onClick={() =>\n                submitItem(\n                  input,\n                  list,\n                  setInput,\n                  updateList,\n                  setError,\n                  hasClashing,\n                )\n              }\n              icon=\"add\"\n              minimal\n            />\n          }\n        />\n        {error ? <Callout intent={Intent.DANGER}>{error}</Callout> : null}\n      </FormGroup>\n      <ul>\n        {cleanList.map((item, i) => (\n          <li\n            key={item.display}\n            style={{ color: item.matches ? Colors.RED1 : 'inherit' }}\n          >\n            {item.display}\n            <Button\n              icon=\"delete\"\n              intent={item.matches ? Intent.DANGER : Intent.NONE}\n              minimal\n              onClick={() => updateList(list.filter(val => val !== list[i]))}\n            />\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n};\n\nexport default Blacklist;\n","import React from 'react';\nimport {\n  H1,\n  H2,\n  Switch,\n  FormGroup,\n  NumericInput,\n  Button,\n  Spinner,\n} from '@blueprintjs/core';\nimport { Formik, Form } from 'formik';\n\nimport {\n  useUpdateSettingsMutation,\n  useAuthQuery,\n  useSettingsQuery,\n} from '../graphql';\nimport Blacklist from './Blacklist';\nimport { updateUserSettings } from '../graphql/helpers';\n\nexport default function Settings() {\n  const { data, loading } = useSettingsQuery({\n    pollInterval: 60000,\n    fetchPolicy: 'network-only',\n  });\n  const { data: localUser } = useAuthQuery();\n  const currentSettings = data?.settings;\n  const [updateSettings] = useUpdateSettingsMutation({\n    update: (cache, { data }) => {\n      if (!data) return;\n\n      updateUserSettings(cache, {\n        ...localUser?.auth!,\n        settings: data.updateSettings,\n      });\n    },\n  });\n\n  const form =\n    loading || !currentSettings\n      ? null\n      : {\n          general: {\n            autoConvert: currentSettings.general.autoConvert,\n          },\n          extension: {\n            autoTrack: currentSettings.extension.autoTrack,\n            minLengthSeconds: currentSettings.extension.minLengthSeconds,\n            blacklist: currentSettings.extension.blacklist,\n          },\n        };\n\n  return (\n    <>\n      <H1>Settings</H1>\n      <p className=\"mb-4\">\n        Set your preferences for browser extension, desktop app and control how\n        tracking works\n      </p>\n      {!form ? (\n        <Spinner size={16} />\n      ) : (\n        <Formik\n          onSubmit={values => updateSettings({ variables: values })}\n          enableReinitialize\n          initialValues={form}\n        >\n          {({ values, handleChange, setFieldValue, isSubmitting }) => (\n            <Form>\n              <div>\n                <H2 className=\"mt-4\">General</H2>\n                <p className=\"mb-4\">Site specific settings</p>\n\n                <FormGroup\n                  label=\"Auto tracked\"\n                  helperText=\"Enabling this publishes identified auto tracked items directly to your watched list instead of saving them as a draft first\"\n                >\n                  <Switch\n                    name=\"general.autoConvert\"\n                    label=\"Automatically publish eligible items\"\n                    checked={values.general.autoConvert}\n                    onChange={handleChange}\n                  />\n                </FormGroup>\n              </div>\n              <div>\n                <H2 className=\"mt-4\">Extension</H2>\n                <p className=\"mb-4\">Controls the browser extension behavior</p>\n\n                <FormGroup\n                  label=\"Tracking\"\n                  helperText=\"Enabling this removes the watched popup after finishing a video and instead automatically saves the item as a draft\"\n                >\n                  <Switch\n                    name=\"extension.autoTrack\"\n                    label=\"Automatically track finished videos\"\n                    checked={values.extension.autoTrack}\n                    onChange={handleChange}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label=\"Minimum video length\"\n                  helperText=\"Specify minimum amount in seconds for videos to be registered as watched\"\n                >\n                  <NumericInput\n                    onValueChange={value =>\n                      setFieldValue('extension.minLengthSeconds', value)\n                    }\n                    value={values.extension.minLengthSeconds}\n                  />\n                </FormGroup>\n                <Blacklist\n                  list={values.extension.blacklist}\n                  updateList={list =>\n                    setFieldValue('extension.blacklist', list)\n                  }\n                  helperTextPrefix={<p>List of domains that are not tracked</p>}\n                />\n              </div>\n              <Button type=\"submit\" loading={isSubmitting}>\n                Save\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport { NonIdealState, Button } from '@blueprintjs/core';\nimport { Link } from 'react-router-dom';\n\nexport default function NotFound() {\n  return (\n    <NonIdealState\n      icon=\"map\"\n      className=\"p-5\"\n      title=\"Uh oh\"\n      description=\"Page not found. You sure the link is correct?\"\n      action={\n        <Link to=\"/\">\n          <Button>Go to homepage</Button>\n        </Link>\n      }\n    />\n  );\n}\n","import React, { ReactNode } from 'react';\n\nexport default function BasicLayout({ children }: { children: ReactNode }) {\n  return <div className=\"p-4\">{children}</div>;\n}\n","import React, { useState } from 'react';\n\nimport {\n  MovieQuery,\n  TvQuery,\n  SearchItem,\n  useTvQuery,\n  useMovieQuery,\n  ItemType,\n  ItemDataFragment,\n} from '../graphql';\nimport { Dialog, Spinner, Code } from '@blueprintjs/core';\nimport Search from '../common/Search';\nimport { RelativeDate } from '../common/RelativeDate';\nimport { EditingWatched } from '../common/WatchedForm';\nimport WatchedMutationForm from '../common/WatchedMutationForm';\nimport { container } from '../common/helpers/general';\n\nexport default function AutoTrackedDialog({\n  item,\n  editingWatched,\n  onClose,\n}: {\n  item?: MovieQuery['movie'] | TvQuery['tv'] | ItemDataFragment | null;\n  editingWatched: EditingWatched;\n  onClose: () => void;\n}) {\n  const [selected, setSelected] = useState<SearchItem>();\n  const queryVariables = { id: selected?.id };\n  const tvQuery = useTvQuery({\n    variables: queryVariables,\n    skip: selected?.type !== ItemType.Tv,\n  });\n  const movieQuery = useMovieQuery({\n    variables: queryVariables,\n    skip: selected?.type !== ItemType.Movie,\n  });\n  const { data, loading } =\n    selected?.type === ItemType.Movie ? movieQuery : tvQuery;\n\n  const dataItem = data ? ('tv' in data ? data.tv : data.movie) : undefined;\n  const selectedItem = item || dataItem;\n\n  const title = item\n    ? `Seen ${'name' in item ? item.name : item.title}`\n    : 'Find auto tracked';\n  const meta =\n    editingWatched && !editingWatched.isEditing && editingWatched.autoTracked\n      ? editingWatched.autoTracked.meta\n      : undefined;\n\n  return (\n    <Dialog\n      className=\"fluid-dialog\"\n      title={title}\n      canOutsideClickClose={false}\n      isOpen={!!editingWatched}\n      lazy\n      onClose={onClose}\n      portalContainer={container}\n    >\n      {!item &&\n        editingWatched &&\n        'autoTracked' in editingWatched &&\n        editingWatched.autoTracked && (\n          <div className=\"p-3\">\n            <p>\n              Seen <RelativeDate date={editingWatched.autoTracked.createdAt} />\n            </p>\n            <strong>Here's what we know:</strong>\n            {meta && meta.title && (\n              <p className=\"mb-1\">\n                <span>Title read as </span>\n                <Code>{meta.title}</Code>\n              </p>\n            )}\n            {meta && meta.tvData && (\n              <div className=\"mb-1\">\n                <span>TV info - </span>\n                {meta.tvData.season && <span>S{meta.tvData.season}</span>}\n                {meta.tvData.episode && <span>E{meta.tvData.episode}</span>}\n              </div>\n            )}\n            {meta && meta.provider && (\n              <div className=\"mb-1\">\n                <span>Tracked on {meta.provider}, from</span>\n                <br />\n                {meta.url && (\n                  <Code\n                    className=\"mt-1\"\n                    style={{\n                      display: 'inline-block',\n                      textOverflow: 'ellipsis',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '320px',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    {meta.url}\n                  </Code>\n                )}\n                {meta.filename && (\n                  <Code\n                    className=\"mt-1\"\n                    style={{\n                      display: 'inline-block',\n                      textOverflow: 'ellipsis',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '320px',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    {meta.filename}\n                  </Code>\n                )}\n              </div>\n            )}\n            <Search selected={selected} setSelected={setSelected} />\n          </div>\n        )}\n      {loading && <Spinner />}\n      {selectedItem && !loading && (\n        <WatchedMutationForm\n          item={selectedItem}\n          editingWatched={editingWatched}\n          afterSave={onClose}\n        />\n      )}\n    </Dialog>\n  );\n}\n","import React, { ComponentProps } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport { DialogQueryParams } from './common/dialog/query-params';\nimport { useAutoTrackedQuery, useWatchedQuery } from './graphql';\n\nimport AutoTrackedDialog from './show/AutoTrackedDialog';\nimport WatchedDialog from './show/WatchedDialog';\n\n// This should be broken up into smaller pieces, maybe a HOC for onClose handlers\n// Need to add support for totally new entries, that requires the ability to separately identify the item whether it's a movie/tv and query it\nconst AutoTrackedDialogWithQueryParams = (\n  props: Omit<ComponentProps<typeof AutoTrackedDialog>, 'onClose'>,\n) => {\n  const history = useHistory();\n  return (\n    <AutoTrackedDialog\n      {...props}\n      onClose={() => {\n        const searchParams = new URLSearchParams(history.location.search);\n        searchParams.delete(DialogQueryParams.EditingAutoTracked);\n\n        history.replace(`${history.location.pathname}?${searchParams}`);\n      }}\n    />\n  );\n};\n\nconst WatchedDialogWithQueryParams = (\n  props: Omit<ComponentProps<typeof WatchedDialog>, 'onClose'>,\n) => {\n  const history = useHistory();\n  return (\n    <WatchedDialog\n      {...props}\n      onClose={() => {\n        const searchParams = new URLSearchParams(history.location.search);\n        searchParams.delete(DialogQueryParams.EditingWatched);\n\n        history.replace(`${history.location.pathname}?${searchParams}`);\n      }}\n    />\n  );\n};\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default function DialogRoutes() {\n  let query = useQuery();\n  const editingAutoTracked = query.get(DialogQueryParams.EditingAutoTracked);\n  const editingWatched = query.get(DialogQueryParams.EditingWatched);\n\n  const { data: autoTrackedData } = useAutoTrackedQuery({\n    variables: {\n      id: editingAutoTracked || '',\n    },\n    skip: !editingAutoTracked,\n  });\n  const { data: watchedData } = useWatchedQuery({\n    variables: {\n      id: editingWatched || '',\n    },\n    skip: !editingWatched,\n  });\n\n  if (editingAutoTracked && autoTrackedData) {\n    const { autoTracked } = autoTrackedData;\n\n    return (\n      <AutoTrackedDialogWithQueryParams\n        item={autoTracked.item}\n        editingWatched={{\n          isEditing: false,\n          autoTracked: {\n            id: autoTracked.id,\n            createdAt: autoTracked.createdAt,\n            meta: autoTracked.meta,\n            tvItemId: autoTracked.tvItem?.id,\n          },\n        }}\n      />\n    );\n  }\n\n  if (editingWatched && watchedData) {\n    const { watched } = watchedData;\n\n    return (\n      <WatchedDialogWithQueryParams\n        editingWatched={{\n          isEditing: true,\n          item: watched,\n        }}\n        item={watched.item}\n      />\n    );\n  }\n\n  return null;\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.scss';\nimport AuthRoute from './auth/AuthRoute';\nimport Navigation from './common/Navigation';\n\nimport Login from './auth/Login';\nimport Home from './Home';\nimport Profile from './profile/Profile';\nimport Setup from './setup/Setup';\nimport Dashboard from './dashboard/Dashboard';\nimport Movie from './show/Movie/Movie';\nimport Tv from './show/Tv/Tv';\nimport Settings from './settings/Settings';\nimport NotFound from './generic/NotFound';\nimport BasicLayout from './layouts/BasicLayout';\nimport DialogRoutes from './DialogRoutes';\n\nexport default function App() {\n  return (\n    <>\n      <Navigation />\n      <div>\n        <Switch>\n          <AuthRoute\n            exact\n            path=\"/\"\n            component={Dashboard}\n            redirectComponent={Home}\n          />\n          <Route path=\"/movie/:id\" component={Movie} />\n          <Route path=\"/tv/:id\" component={Tv} />\n          <Route exact path=\"/profile/:name\" component={Profile} />\n          <BasicLayout>\n            <Switch>\n              <Route exact path=\"/setup\" component={Setup} />\n              <Route exact path=\"/login\" component={Login} />\n              <AuthRoute exact path=\"/settings\" component={Settings} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </BasicLayout>\n        </Switch>\n\n        <DialogRoutes />\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Resolvers, gql, ApolloCache, ApolloClient } from '@apollo/client';\nimport { setAuthData } from './helpers';\n\nexport const typeDefs = gql`\n  extend type Query {\n    auth: User\n    isExtensionCheckDone: Boolean\n  }\n`;\n\nexport const resolvers: Resolvers = {\n  Mutation: {\n    logout: (\n      root,\n      variables,\n      { cache, client }: { cache: ApolloCache<any>; client: ApolloClient<any> },\n    ) => {\n      setAuthData(cache);\n      const currentCache = cache.extract();\n      const preservedCache = {\n        ROOT_QUERY: {\n          isExtensionCheckDone: currentCache.ROOT_QUERY.isExtensionCheckDone,\n        },\n      };\n      cache.restore(preservedCache);\n    },\n  },\n};\n","export interface PossibleTypesResultData {\n  possibleTypes: {\n    [key: string]: string[];\n  };\n}\nconst result: PossibleTypesResultData = {\n  possibleTypes: {\n    Item: ['Movie', 'Tv'],\n    TvItem: ['Season', 'Episode'],\n    AutoTrackedResult: ['AutoTracked', 'Watched'],\n    TmdbMedia: ['TmdbMovie', 'TmdbTv'],\n  },\n};\nexport default result;\n","import { TypePolicies } from '@apollo/client';\n\nimport { WatchedCursor } from '.';\n\nconst typePolicies: TypePolicies = {\n  WatchedCursor: {\n    fields: {\n      watched: {\n        read(watched: WatchedCursor['watched'], { readField }) {\n          return watched.filter(item => !!readField('id', item));\n        },\n      },\n    },\n  },\n  Query: {\n    fields: {\n      autoTracked(_, { args, toReference }) {\n        return toReference({\n          __typename: 'AutoTracked',\n          id: args?.id,\n        });\n      },\n    },\n  },\n};\n\nexport default typePolicies;\n","const extensionSyncTimeout = 5000;\n\nexport const extensionSyncPromise = new Promise((resolve, reject) => {\n  document.addEventListener('seenit-extension-sync', () => resolve(true));\n\n  setTimeout(() => reject('timeout'), extensionSyncTimeout);\n}).catch(() => false);\n\nexport const extensionCheckPromise = new Promise((resolve, reject) => {\n  if (!process.env.REACT_APP_EXTENSION_ID)\n    return reject('Missing extension id variable');\n\n  try {\n    chrome.runtime.sendMessage(\n      process.env.REACT_APP_EXTENSION_ID,\n      // process.env.REACT_APP_EXTENSION_ID.slice(0, -1) + 'a',\n      'ping',\n      response => {\n        if (chrome.runtime.lastError) return reject(chrome.runtime.lastError);\n\n        if (response === 'pong') return resolve(true);\n      },\n    );\n  } catch (err) {\n    reject(err);\n  }\n});\n\nexport const extensionAuthPromise = extensionCheckPromise\n  .then(() => extensionSyncPromise)\n  .catch(() => false);\n","import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { resolvers, typeDefs } from './graphql/resolvers';\nimport { getStorageValue } from './common/helpers/storage';\nimport introspectionQueryResultData from './graphql/introspection';\nimport { AuthDocument, IsExtensionCheckDoneDocument } from './graphql';\nimport { setAuthData } from './graphql/helpers';\nimport typePolicies from './graphql/typePolicies';\nimport { extensionAuthPromise } from './services/extension';\n\nextensionAuthPromise.then(d => {\n  cache.writeQuery({\n    query: AuthDocument,\n    data: {\n      auth: getStorageValue('userData') || null,\n    },\n  });\n  cache.writeQuery({\n    query: IsExtensionCheckDoneDocument,\n    data: {\n      isExtensionCheckDone: true,\n    },\n  });\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  const isAuthenticationError = graphQLErrors?.some(\n    ({ extensions = {} }) => extensions.code === 'UNAUTHENTICATED',\n  );\n\n  if (isAuthenticationError) {\n    // TODO: implement refresh token\n    setAuthData(cache);\n    return;\n  }\n});\n\nexport const cache = new InMemoryCache({\n  possibleTypes: introspectionQueryResultData.possibleTypes,\n  typePolicies,\n  // cacheRedirects: {\n  //   Query: {\n  //     movie: (_, { id }, { getCacheKey }) =>\n  //       getCacheKey({ __typename: 'Movie', id }),\n  //     tv: (_, { id }, { getCacheKey }) => getCacheKey({ __typename: 'Tv', id }),\n  //     watched: (_, { id }, { getCacheKey }) =>\n  //       getCacheKey({ __typename: 'Watched', id }),\n  //     user: (_, { id }, { getCacheKey }) =>\n  //       id ? getCacheKey({ __typename: 'User', id }) : undefined,\n  //     // getCacheKey({ __typename: 'Watched', id }),\n  //     // Try adding user: User?\n  //   },\n  //   Watched: {\n  //     user: (watched, args, { getCacheKey }) => {\n  //       return watched && watched.userId\n  //         ? getCacheKey({ __typename: 'User', id: watched.userId })\n  //         : undefined;\n  //     },\n  //   },\n  // },\n});\n\nconst httpLink = new BatchHttpLink({\n  uri: `http://localhost:9000/graphql`,\n  // uri: `https://server.seenit.show/graphql`,\n});\n\nconst authLink = setContext(async request => {\n  await extensionAuthPromise;\n  const token = getStorageValue('token');\n\n  return {\n    headers: {\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nexport const apolloClient = new ApolloClient({\n  cache,\n  resolvers,\n  // TODO: follow issue till base param and errorLink gets addressed\n  // uri: `http://localhost:9000/graphql`,\n  // headers: {\n  //   authorization: getStorageValue('token')\n  //     ? `Bearer ${getStorageValue('token')}`\n  //     : '',\n  // },\n  // defaultOptions: {\n  //   query: {\n  //     fetchPolicy: 'network-only',\n  //   },\n  // },\n  link: ApolloLink.from([errorLink, authLink, httpLink]),\n  typeDefs,\n});\n","import React, { ReactNode } from 'react';\n\nimport { useIsExtensionCheckDoneQuery } from './graphql';\n\nconst ExtensionSetupBlocker = ({ children }: { children: ReactNode }) => {\n  const { data } = useIsExtensionCheckDoneQuery();\n\n  return data?.isExtensionCheckDone ? <>{children}</> : null;\n};\n\nexport default ExtensionSetupBlocker;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { apolloClient } from './apollo';\nimport { container } from './common/helpers/general';\nimport ExtensionSetupBlocker from './ExtensionSetupBlocker';\n\n(async () => {\n  ReactDOM.render(\n    <ApolloProvider client={apolloClient}>\n      <BrowserRouter>\n        <ExtensionSetupBlocker>\n          <App />\n        </ExtensionSetupBlocker>\n      </BrowserRouter>\n    </ApolloProvider>,\n    container || null,\n  );\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}