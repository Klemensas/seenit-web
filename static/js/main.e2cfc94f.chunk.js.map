{"version":3,"sources":["assets/logos/chrome.svg","assets/logos/vlc.svg","graphql/index.tsx","auth/AuthRoute.tsx","assets/logos/eyes.svg","common/Logo.tsx","common/Search.tsx","common/useThrottle.ts","common/Navigation.tsx","common/helpers/storage.ts","graphql/helpers.ts","auth/Login.tsx","Home.tsx","common/Rating.tsx","common/InfiniteScroll.tsx","common/useInfiniteScroll.tsx","common/helpers/watched.ts","profile/Profile.tsx","setup/Setup.tsx","common/RelativeDate.tsx","common/Seen.tsx","common/helpers/general.ts","common/dialog/query-params.ts","common/BlockingAlert.tsx","common/DeleteConfirmation.tsx","dashboard/AutoTrackedItem.tsx","common/toaster.ts","dashboard/Dashboard.tsx","graphql/fetchMore.ts","common/helpers/graphql.ts","show/Review.tsx","show/ReviewList.tsx","show/Watched.tsx","show/UserWatchedList.tsx","common/RatingInput.tsx","common/WatchedMovieForm.tsx","common/WatchedTvForm.tsx","common/WatchedForm.tsx","common/WatchedMutationForm.tsx","show/WatchedDialog.tsx","show/Movie/Movie.tsx","show/Tv/EpisodeDetails.tsx","show/Tv/Season.tsx","show/Tv/TvOverview.tsx","show/Tv/WatchedTvDialog.tsx","show/Tv/Tv.tsx","settings/Blacklist.tsx","settings/ImportedItem.tsx","settings/Import.tsx","common/constants.ts","settings/Settings.tsx","generic/NotFound.tsx","layouts/BasicLayout.tsx","show/AutoTrackedDialog.tsx","DialogRoutes.tsx","App.tsx","serviceWorker.ts","graphql/resolvers.ts","graphql/introspection.ts","graphql/typePolicies.ts","services/extension.ts","apollo.ts","ExtensionSetupBlocker.tsx","index.tsx"],"names":["module","exports","ItemType","TvItemType","TmdbMediaType","ManagedSettingsFragmentDoc","gql","WatchedTvItemPropsFragmentDoc","WatchedPropsFragmentDoc","WatchedCursorPropsFragmentDoc","ItemDataFragmentDoc","WatchedItemPropsFragmentDoc","WatchedCursorWithItemsPropsFragmentDoc","SeasonPropsFragmentDoc","SearchItemDataFragmentDoc","WatchedImportDataFragmentDoc","LoginDocument","RegisterDocument","LogoutDocument","AddWatchedDocument","useAddWatchedMutation","baseOptions","Apollo","EditWatchedDocument","useEditWatchedMutation","RemoveWatchedDocument","RemoveAutoTrackedDocument","ConvertAutoTrackedDocument","UpdateSettingsDocument","AuthDocument","useAuthQuery","IsExtensionCheckDoneDocument","UserDocument","useUserQuery","MovieDocument","useMovieQuery","TvDocument","useTvQuery","WatchedDocument","WatchesDocument","useWatchesQuery","ReviewsDocument","SearchContentDocument","AutoTrackedListDocument","AutoTrackedDocument","SeasonsDocument","SettingsDocument","ImportLetterboxdDocument","AuthRoute","redirectTo","redirectComponent","routeProps","data","auth","component","to","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","LogoSize","createElement","className","d","_ref7","_ref8","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","sizes","text","textLarge","logo","large","Logo","size","logoSize","eyeSize","eyePadding","style","fontSize","height","padding","defaultProps","renderOption","label","item","handleClick","modifiers","matchesPredicate","active","id","onClick","Search","selected","setSelected","React","query","setQuery","callback","fn","wait","options","timer","useRef","fnRef","optionsRef","currentArgs","current","cancel","useCallback","clearTimeout","undefined","args","leading","setTimeout","callPending","useEffect","useThrottle","payload","shouldSearch","searchQuery","variables","skip","searchContent","reduce","acc","concat","release_date","split","value","itemRenderer","items","onQueryChange","onItemSelect","noResults","disabled","loading","initialContent","inputValueRenderer","popoverProps","minimal","fill","usePortal","position","PopoverPosition","BOTTOM","inputProps","rightElement","SearchPage","history","useHistory","type","push","toLowerCase","UserBlock","setAuth","content","name","tagName","Position","icon","Navigation","fixedToTop","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","getStorageValue","window","localStorage","getItem","JSON","parse","updateStorage","setItem","stringify","removeItem","setAuthData","cache","token","writeQuery","Login","useState","email","password","form","setForm","isLogin","setLogin","mutationParams","update","login","register","user","document","dispatchEvent","CustomEvent","useRegisterMutation","mutationFn","onSubmit","event","a","preventDefault","labelFor","leftIcon","onChange","placeholder","intent","Intent","PRIMARY","Home","width","alt","src","chromeSvg","vlcSvg","RatingSize","Rating","max","formattedValue","iconSize","Small","readonly","initialRating","fractions","fullSymbol","IconNames","STAR","color","emptySymbol","STAR_EMPTY","InfiniteScroll","children","loadMore","hasMore","isLoading","rootMargin","observer","IntersectionObserver","isIntersecting","observe","disconnect","useInfiniteScroll","formatTvString","tvItem","season_number","season","episode_number","fetchMore","updateQuery","prev","fetchMoreResult","prevWatched","watched","newWatched","Profile","targetIndex","useParams","notifyOnNetworkStatusChange","cursor","targetItem","map","index","itemType","rating","review","createdAt","Movie","e","currentTarget","getBoundingClientRect","left","top","poster_path","body","COMMENT","formatDistanceStrict","Date","now","addSuffix","config","velocity","friction","clamp","from","innerWidth","innerHeight","onRest","maxHeight","objectFit","backgroundColor","Setup","RelativeDate","date","baseDate","format","Seen","route","container","DialogQueryParams","preventBubbling","cb","stopPropagation","getAppContainer","getElementById","BlockingAlert","canEscapeKeyCancel","canOutsideClickCancel","confirmButtonText","cancelButtonText","onConfirm","onCancel","overlayProps","portalContainer","classNames","Classes","ALERT","canEscapeKeyClose","canOutsideClickClose","onClose","ALERT_BODY","ALERT_CONTENTS","ALERT_FOOTER","DeleteConfirmation","isOpen","DANGER","AutoTrackedItem","meta","isSelected","onSelect","onDeselect","onSave","onRemove","location","useLocation","search","URLSearchParams","set","EditingAutoTracked","elevation","description","tvData","episode","provider","url","display","textOverflow","whiteSpace","overflow","filename","toString","replace","AppToaster","Toaster","create","TOP_RIGHT","Dashboard","localUser","userData","watchesData","userId","autoTrackedData","useRemoveAutoTrackedMutation","refetchQueries","removeAutoTracked","useConvertAutoTrackedMutation","convertAutoTracked","selectedIds","setSelectedIds","pendingRemoval","setPendingRemoval","checked","autoTrackedList","autoTracked","indeterminate","small","ids","filter","trackedItem","find","hasItemlessIds","show","message","WARNING","arr","INTENT_PRIMARY","includes","zIndex","sid","watches","mergeWatches","next","mergeReviews","reviews","mergeProps","Review","ReviewList","reviewsVariables","itemId","tvItemId","reviewsData","Watched","onClickEdit","dialogOpen","deleteAlert","setDeleteAlert","removedWatched","removedId","removeWatched","dataId","identify","__typename","evict","gc","loadingRemoveWatched","Elevation","ONE","UserWatchedList","onEdit","watchesVariables","userWatched","RatingInput","Icon","SIZE_LARGE","WatchedMovieForm","values","poster","enableReinitialize","initialValues","handleChange","handleSubmit","setFieldValue","formatDate","toLocaleString","parseDate","str","growVertically","itemFilter","seasonName","renderEpisode","lastSeasonEpisode","lastSeason","WatchedTvForm","seasons","isSeasonsLoading","seasonIndex","episodes","episodeIndex","getSelectOptions","helperText","selectedItem","itemListPredicate","WatchedForm","editingWatched","isEditing","WatchedMutationForm","afterSave","addWatched","addWatchedLoading","editWatched","editWatchedLoading","tvItemType","Episode","Tv","autoTrackedId","WatchedDialog","lazy","match","setEditingWatched","returnPartialData","movie","overview","vote_count","vote_average","air_date","tvId","Season","expanded","isExpanded","setIsExpanded","maxWidth","ellipsize","pathname","TvOverview","tv","onEditWatched","WatchedTvDialog","addWatchedVariables","first_air_date","path","render","episodeId","getSeasonEpisode","params","EpisodeDetails","inputRegex","RegExp","submitItem","list","setValue","updateList","setError","hasClashing","test","regexVal","Blacklist","helperTextPrefix","input","setInput","error","matches","cleanList","NONE","onKeyPress","Colors","RED1","val","ImportedItem","imported","original","Import","importActive","setImportActive","targetFile","setTargetFile","sizeLimitExceeded","result","selectedItems","setSelectedItems","importState","setImportState","fileInputRef","Array","importLetterboxd","defaultSelectedTabId","vertical","panel","panelClassName","files","selectImport","href","rel","hasSelection","accept","onInputChange","file","refetch","Settings","pollInterval","fetchPolicy","currentSettings","settings","useUpdateSettingsMutation","readQuery","updateUserSettings","updateSettings","general","autoConvert","extension","autoTrack","minLengthSeconds","blacklist","isSubmitting","onValueChange","NotFound","action","BasicLayout","AutoTrackedDialog","queryVariables","tvQuery","movieQuery","dataItem","AutoTrackedDialogWithQueryParams","searchParams","delete","WatchedDialogWithQueryParams","EditingWatched","DialogRoutes","editingAutoTracked","get","watchedData","useWatchedQuery","App","exact","Boolean","hostname","typeDefs","resolvers","Mutation","logout","root","client","preservedCache","ROOT_QUERY","isExtensionCheckDone","extract","restore","possibleTypes","Item","TvItem","TmdbMedia","AutoTrackedResult","typePolicies","WatchedCursor","fields","read","readField","Query","_","toReference","extensionSyncPromise","Promise","resolve","reject","addEventListener","catch","extensionAuthPromise","chrome","runtime","sendMessage","process","response","lastError","err","then","errorLink","onError","graphQLErrors","networkError","some","extensions","code","InMemoryCache","introspectionQueryResultData","uri","authLink","BatchHttpLink","setContext","request","headers","authorization","apolloClient","ApolloClient","link","ApolloLink","createUploadLink","ExtensionSetupBlocker","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2cfc94f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chrome.fb7a4d16.svg\";","module.exports = __webpack_public_path__ + \"static/media/vlc.78c4bd2f.svg\";","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _?: Maybe<Scalars['Boolean']>;\n  auth?: Maybe<User>;\n  autoTracked: AutoTracked;\n  autoTrackedList: AutoTrackedCursor;\n  episode: Episode;\n  importLetterboxd: Array<ImportResult>;\n  isExtensionCheckDone?: Maybe<Scalars['Boolean']>;\n  me: User;\n  movie: Movie;\n  reviews: ReviewCursor;\n  searchContent: Array<SearchItem>;\n  season: Season;\n  seasons: Array<Season>;\n  settings: Settings;\n  tv: Tv;\n  user: User;\n  users?: Maybe<Array<User>>;\n  watched: Watched;\n  watches: WatchedCursor;\n};\n\nexport type QueryAutoTrackedArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryAutoTrackedListArgs = {\n  userId: Scalars['ID'];\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type QueryEpisodeArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryImportLetterboxdArgs = {\n  file: Scalars['Upload'];\n};\n\nexport type QueryMovieArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryReviewsArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type QuerySearchContentArgs = {\n  title: Scalars['String'];\n};\n\nexport type QuerySeasonArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QuerySeasonsArgs = {\n  itemId: Scalars['ID'];\n};\n\nexport type QueryTvArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryUserArgs = {\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type QueryWatchedArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryWatchesArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  _?: Maybe<Scalars['Boolean']>;\n  addAutoTracked: AutoTrackedResult;\n  addToExtensionBlacklist: Settings;\n  addWatched: Watched;\n  convertAutoTracked: ConvertedAutoTracked;\n  editWatched: Watched;\n  login: LocalAuth;\n  logout?: Maybe<Scalars['Boolean']>;\n  register: LocalAuth;\n  removeAutoTracked: Array<Scalars['ID']>;\n  removeWatched: Scalars['ID'];\n  updateSettings: Settings;\n};\n\nexport type MutationAddAutoTrackedArgs = {\n  meta: AutoTrackedMetaInput;\n  createdAt: Scalars['Float'];\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n};\n\nexport type MutationAddToExtensionBlacklistArgs = {\n  blacklistItem: Scalars['String'];\n};\n\nexport type MutationAddWatchedArgs = {\n  itemId: Scalars['ID'];\n  itemType: ItemType;\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  createdAt?: Maybe<Scalars['Float']>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  autoTrackedId?: Maybe<Scalars['ID']>;\n};\n\nexport type MutationConvertAutoTrackedArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\nexport type MutationEditWatchedArgs = {\n  id: Scalars['ID'];\n  createdAt?: Maybe<Scalars['Float']>;\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n};\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationRegisterArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationRemoveAutoTrackedArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\nexport type MutationRemoveWatchedArgs = {\n  itemId: Scalars['ID'];\n};\n\nexport type MutationUpdateSettingsArgs = {\n  general: GeneralSettingsInput;\n  extension: ExtensionSettingsInput;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  _?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Movie = {\n  __typename?: 'Movie';\n  id: Scalars['ID'];\n  adult: Scalars['Boolean'];\n  backdrop_path?: Maybe<Scalars['String']>;\n  belongs_to_collection?: Maybe<Collection>;\n  budget: Scalars['Int'];\n  genre?: Maybe<Array<Maybe<Genre>>>;\n  homepage?: Maybe<Scalars['String']>;\n  imdb_id?: Maybe<Scalars['String']>;\n  original_language?: Maybe<Scalars['String']>;\n  original_title?: Maybe<Scalars['String']>;\n  overview: Scalars['String'];\n  popularity?: Maybe<Scalars['Float']>;\n  poster_path?: Maybe<Scalars['String']>;\n  production_companies?: Maybe<Array<Maybe<Company>>>;\n  production_countries?: Maybe<Array<Maybe<Country>>>;\n  release_date?: Maybe<Scalars['String']>;\n  revenue?: Maybe<Scalars['Int']>;\n  runtime?: Maybe<Scalars['Int']>;\n  spoken_languages?: Maybe<Array<Maybe<Language>>>;\n  status?: Maybe<Scalars['String']>;\n  tagline?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  video?: Maybe<Scalars['Boolean']>;\n  vote_average: Scalars['Float'];\n  vote_count: Scalars['Int'];\n  tmdbId?: Maybe<Scalars['Int']>;\n  watched: WatchedCursor;\n};\n\nexport type MovieWatchedArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type Genre = {\n  __typename?: 'Genre';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Collection = {\n  __typename?: 'Collection';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  poster_path?: Maybe<Scalars['String']>;\n  backdrop_path?: Maybe<Scalars['String']>;\n};\n\nexport type Company = {\n  __typename?: 'Company';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  logo_path?: Maybe<Scalars['String']>;\n  origin_country?: Maybe<Scalars['String']>;\n};\n\nexport type Country = {\n  __typename?: 'Country';\n  iso_3166_1?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Language = {\n  __typename?: 'Language';\n  iso_639_1?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Tv = {\n  __typename?: 'Tv';\n  id: Scalars['ID'];\n  backdrop_path?: Maybe<Scalars['String']>;\n  created_by?: Maybe<Array<Maybe<Author>>>;\n  episode_run_time?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  first_air_date?: Maybe<Scalars['String']>;\n  genres?: Maybe<Array<Maybe<Genre>>>;\n  homepage: Scalars['String'];\n  in_production?: Maybe<Scalars['Boolean']>;\n  languages?: Maybe<Array<Maybe<Scalars['String']>>>;\n  last_air_date: Scalars['String'];\n  last_episode_to_air?: Maybe<Episode>;\n  name: Scalars['String'];\n  next_episode_to_air?: Maybe<Episode>;\n  networks?: Maybe<Array<Maybe<Network>>>;\n  number_of_episodes: Scalars['Int'];\n  number_of_seasons: Scalars['Int'];\n  origin_country?: Maybe<Array<Maybe<Scalars['String']>>>;\n  original_language: Scalars['String'];\n  original_name: Scalars['String'];\n  overview: Scalars['String'];\n  popularity: Scalars['Int'];\n  poster_path?: Maybe<Scalars['String']>;\n  production_companies?: Maybe<Array<Maybe<Company>>>;\n  seasons: Array<Season>;\n  status: Scalars['String'];\n  type: Scalars['String'];\n  vote_average: Scalars['Float'];\n  vote_count: Scalars['Int'];\n  tmdbId?: Maybe<Scalars['Int']>;\n  watched: WatchedCursor;\n};\n\nexport type TvWatchedArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n};\n\nexport type Author = {\n  __typename?: 'Author';\n  id?: Maybe<Scalars['Int']>;\n  credit_id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['Int']>;\n  profile_path?: Maybe<Scalars['String']>;\n};\n\nexport type Network = {\n  __typename?: 'Network';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  logo_path?: Maybe<Scalars['String']>;\n  origin_country?: Maybe<Scalars['String']>;\n};\n\nexport type Season = {\n  __typename?: 'Season';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n  air_date?: Maybe<Scalars['String']>;\n  episode_count: Scalars['Int'];\n  poster_path?: Maybe<Scalars['String']>;\n  season_number: Scalars['Int'];\n  tmdbId: Scalars['Int'];\n  tvId: Scalars['ID'];\n  tv: Tv;\n  episodes: Array<Episode>;\n};\n\nexport type Episode = {\n  __typename?: 'Episode';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n  episode_number: Scalars['Int'];\n  air_date?: Maybe<Scalars['String']>;\n  production_code?: Maybe<Scalars['String']>;\n  still_path?: Maybe<Scalars['String']>;\n  vote_average: Scalars['Float'];\n  vote_count: Scalars['Int'];\n  tmdbId: Scalars['Int'];\n  seasonId: Scalars['ID'];\n  season: Season;\n};\n\nexport enum ItemType {\n  Movie = 'Movie',\n  Tv = 'Tv',\n}\n\nexport enum TvItemType {\n  Season = 'Season',\n  Episode = 'Episode',\n}\n\nexport type Item = Movie | Tv;\n\nexport type TvItem = Season | Episode;\n\nexport type Watched = {\n  __typename?: 'Watched';\n  id: Scalars['ID'];\n  tmdbId: Scalars['Int'];\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n  userId: Scalars['ID'];\n  user: User;\n  itemType: ItemType;\n  item: Item;\n  rating?: Maybe<Rating>;\n  review?: Maybe<Review>;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n};\n\nexport type WatchedCursor = {\n  __typename?: 'WatchedCursor';\n  watched: Array<Watched>;\n  cursor?: Maybe<Scalars['String']>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n  watched: WatchedCursor;\n  settings: Settings;\n};\n\nexport type UserWatchedArgs = {\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type LocalAuth = {\n  __typename?: 'LocalAuth';\n  user: User;\n  token: Scalars['String'];\n};\n\nexport type TmdbMovie = {\n  __typename?: 'TmdbMovie';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  overview?: Maybe<Scalars['String']>;\n  original_title?: Maybe<Scalars['String']>;\n  original_language?: Maybe<Scalars['String']>;\n  poster_path?: Maybe<Scalars['String']>;\n  genre_ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  adult?: Maybe<Scalars['Boolean']>;\n  release_date?: Maybe<Scalars['String']>;\n  backdrop_path?: Maybe<Scalars['String']>;\n  video?: Maybe<Scalars['Boolean']>;\n  vote_count?: Maybe<Scalars['Int']>;\n  vote_average?: Maybe<Scalars['Float']>;\n  popularity?: Maybe<Scalars['Int']>;\n  media_type?: Maybe<TmdbMediaType>;\n};\n\nexport type TmdbTv = {\n  __typename?: 'TmdbTv';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  overview?: Maybe<Scalars['String']>;\n  original_name?: Maybe<Scalars['String']>;\n  original_language?: Maybe<Scalars['String']>;\n  poster_path?: Maybe<Scalars['String']>;\n  genre_ids?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  backdrop_path?: Maybe<Scalars['String']>;\n  first_air_date?: Maybe<Scalars['String']>;\n  origin_country?: Maybe<Array<Maybe<Scalars['String']>>>;\n  vote_count?: Maybe<Scalars['Int']>;\n  vote_average?: Maybe<Scalars['Float']>;\n  popularity?: Maybe<Scalars['Int']>;\n  media_type?: Maybe<TmdbMediaType>;\n};\n\nexport type TmdbPerson = {\n  __typename?: 'TmdbPerson';\n  popularity?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  vote_average?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  profile_path?: Maybe<Scalars['String']>;\n  adult?: Maybe<Scalars['String']>;\n  known_for?: Maybe<TmdbMedia>;\n  media_type?: Maybe<TmdbMediaType>;\n};\n\nexport type Search = {\n  __typename?: 'Search';\n  results?: Maybe<Array<TmdbMedia>>;\n  page: Scalars['Int'];\n  total_pages: Scalars['Int'];\n  total_results: Scalars['Int'];\n};\n\nexport type SearchItem = {\n  __typename?: 'SearchItem';\n  id: Scalars['String'];\n  tmdbId: Scalars['Int'];\n  title: Scalars['String'];\n  release_date?: Maybe<Scalars['String']>;\n  popularity?: Maybe<Scalars['Float']>;\n  poster_path?: Maybe<Scalars['String']>;\n  type: ItemType;\n};\n\nexport type TmdbMedia = TmdbMovie | TmdbTv;\n\nexport enum TmdbMediaType {\n  Movie = 'Movie',\n  Tv = 'Tv',\n}\n\nexport type Rating = {\n  __typename?: 'Rating';\n  id: Scalars['ID'];\n  value: Scalars['Float'];\n  tmdbId: Scalars['Int'];\n  userId: Scalars['ID'];\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n  user?: Maybe<User>;\n  watched?: Maybe<Watched>;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n};\n\nexport type RatingInput = {\n  id?: Maybe<Scalars['ID']>;\n  value: Scalars['Float'];\n};\n\nexport type Review = {\n  __typename?: 'Review';\n  id: Scalars['ID'];\n  body: Scalars['String'];\n  tmdbId: Scalars['Int'];\n  userId: Scalars['ID'];\n  user: User;\n  watched: Watched;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n};\n\nexport type ReviewInput = {\n  id?: Maybe<Scalars['ID']>;\n  body: Scalars['String'];\n};\n\nexport type ReviewCursor = {\n  __typename?: 'ReviewCursor';\n  reviews: Array<Review>;\n  cursor?: Maybe<Scalars['String']>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type AutoTrackedResult = AutoTracked | Watched;\n\nexport type AutoTrackedMetaTvData = {\n  __typename?: 'AutoTrackedMetaTvData';\n  season?: Maybe<Scalars['String']>;\n  episode?: Maybe<Scalars['String']>;\n};\n\nexport type AutoTrackedMeta = {\n  __typename?: 'AutoTrackedMeta';\n  title?: Maybe<Scalars['String']>;\n  tvData?: Maybe<AutoTrackedMetaTvData>;\n  filename?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  provider: Scalars['String'];\n};\n\nexport type AutoTracked = {\n  __typename?: 'AutoTracked';\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  user: User;\n  itemType?: Maybe<ItemType>;\n  item?: Maybe<Item>;\n  tvItemType?: Maybe<TvItemType>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItem?: Maybe<TvItem>;\n  meta: AutoTrackedMeta;\n  createdAt: Scalars['Float'];\n  updatedAt: Scalars['Float'];\n};\n\nexport type TvDataInput = {\n  season?: Maybe<Scalars['String']>;\n  episode?: Maybe<Scalars['String']>;\n};\n\nexport type AutoTrackedMetaInput = {\n  title?: Maybe<Scalars['String']>;\n  tvData?: Maybe<TvDataInput>;\n  filename?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  provider: Scalars['String'];\n};\n\nexport type AutoTrackedCursor = {\n  __typename?: 'AutoTrackedCursor';\n  autoTracked: Array<AutoTracked>;\n  cursor?: Maybe<Scalars['String']>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type ConvertedAutoTracked = {\n  __typename?: 'ConvertedAutoTracked';\n  removedIds: Array<Scalars['ID']>;\n  watched: Array<Watched>;\n};\n\nexport type Settings = {\n  __typename?: 'Settings';\n  id: Scalars['ID'];\n  general: GeneralSettings;\n  extension: ExtensionSettings;\n  user: User;\n};\n\nexport type GeneralSettings = {\n  __typename?: 'GeneralSettings';\n  autoConvert: Scalars['Boolean'];\n};\n\nexport type ExtensionSettings = {\n  __typename?: 'ExtensionSettings';\n  autoTrack: Scalars['Boolean'];\n  minLengthSeconds: Scalars['Int'];\n  blacklist: Array<Scalars['String']>;\n};\n\nexport type GeneralSettingsInput = {\n  autoConvert: Scalars['Boolean'];\n};\n\nexport type ExtensionSettingsInput = {\n  autoTrack: Scalars['Boolean'];\n  minLengthSeconds: Scalars['Int'];\n  blacklist: Array<Scalars['String']>;\n};\n\nexport type LetterboxdItem = {\n  __typename?: 'LetterboxdItem';\n  date: Scalars['String'];\n  name: Scalars['String'];\n  year: Scalars['String'];\n  watchedDate?: Maybe<Scalars['String']>;\n  rating?: Maybe<Scalars['String']>;\n  review?: Maybe<Scalars['String']>;\n};\n\nexport type WatchedImport = {\n  __typename?: 'WatchedImport';\n  tmdbId: Scalars['Int'];\n  itemId?: Maybe<Scalars['ID']>;\n  itemType: ItemType;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  createdAt: Scalars['Float'];\n  item: SearchItem;\n  rating?: Maybe<Rating>;\n  review?: Maybe<Review>;\n};\n\nexport type ImportResult = {\n  __typename?: 'ImportResult';\n  imported?: Maybe<WatchedImport>;\n  original: LetterboxdItem;\n};\n\nexport type UserInput = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  updatedAt?: Maybe<Scalars['Float']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login: { __typename?: 'LocalAuth' } & Pick<LocalAuth, 'token'> & {\n      user: { __typename?: 'User' } & Pick<\n        User,\n        'id' | 'name' | 'email' | 'createdAt' | 'updatedAt'\n      > & {\n          settings: { __typename?: 'Settings' } & {\n            general: { __typename?: 'GeneralSettings' } & Pick<\n              GeneralSettings,\n              'autoConvert'\n            >;\n            extension: { __typename?: 'ExtensionSettings' } & Pick<\n              ExtensionSettings,\n              'autoTrack' | 'minLengthSeconds' | 'blacklist'\n            >;\n          };\n        };\n    };\n};\n\nexport type RegisterMutationVariables = Exact<{\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type RegisterMutation = { __typename?: 'Mutation' } & {\n  register: { __typename?: 'LocalAuth' } & Pick<LocalAuth, 'token'> & {\n      user: { __typename?: 'User' } & Pick<\n        User,\n        'id' | 'name' | 'email' | 'createdAt' | 'updatedAt'\n      > & {\n          settings: { __typename?: 'Settings' } & {\n            general: { __typename?: 'GeneralSettings' } & Pick<\n              GeneralSettings,\n              'autoConvert'\n            >;\n            extension: { __typename?: 'ExtensionSettings' } & Pick<\n              ExtensionSettings,\n              'autoTrack' | 'minLengthSeconds' | 'blacklist'\n            >;\n          };\n        };\n    };\n};\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never }>;\n\nexport type LogoutMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'logout'\n>;\n\nexport type AddWatchedMutationVariables = Exact<{\n  itemId: Scalars['ID'];\n  itemType: ItemType;\n  createdAt: Scalars['Float'];\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n  autoTrackedId?: Maybe<Scalars['ID']>;\n}>;\n\nexport type AddWatchedMutation = { __typename?: 'Mutation' } & {\n  addWatched: { __typename?: 'Watched' } & Pick<\n    Watched,\n    'id' | 'itemType' | 'createdAt' | 'tvItemType'\n  > & {\n      rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>>;\n      review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'id' | 'body'>>;\n      tvItem?: Maybe<\n        | ({ __typename?: 'Season' } & Pick<Season, 'id' | 'season_number'>)\n        | ({ __typename?: 'Episode' } & Pick<\n            Episode,\n            'id' | 'episode_number'\n          > & {\n              season: { __typename?: 'Season' } & Pick<\n                Season,\n                'id' | 'season_number'\n              >;\n            })\n      >;\n    };\n};\n\nexport type EditWatchedMutationVariables = Exact<{\n  id: Scalars['ID'];\n  createdAt: Scalars['Float'];\n  rating?: Maybe<RatingInput>;\n  review?: Maybe<ReviewInput>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n}>;\n\nexport type EditWatchedMutation = { __typename?: 'Mutation' } & {\n  editWatched: { __typename?: 'Watched' } & Pick<\n    Watched,\n    'id' | 'itemType' | 'createdAt' | 'tvItemType'\n  > & {\n      rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>>;\n      review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'id' | 'body'>>;\n      tvItem?: Maybe<\n        | ({ __typename?: 'Season' } & Pick<Season, 'id' | 'season_number'>)\n        | ({ __typename?: 'Episode' } & Pick<\n            Episode,\n            'id' | 'episode_number'\n          > & {\n              season: { __typename?: 'Season' } & Pick<\n                Season,\n                'id' | 'season_number'\n              >;\n            })\n      >;\n    };\n};\n\nexport type RemoveWatchedMutationVariables = Exact<{\n  itemId: Scalars['ID'];\n}>;\n\nexport type RemoveWatchedMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'removeWatched'\n>;\n\nexport type RemoveAutoTrackedMutationVariables = Exact<{\n  ids: Array<Scalars['ID']>;\n}>;\n\nexport type RemoveAutoTrackedMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'removeAutoTracked'\n>;\n\nexport type ConvertAutoTrackedMutationVariables = Exact<{\n  ids: Array<Scalars['ID']>;\n}>;\n\nexport type ConvertAutoTrackedMutation = { __typename?: 'Mutation' } & {\n  convertAutoTracked: { __typename?: 'ConvertedAutoTracked' } & Pick<\n    ConvertedAutoTracked,\n    'removedIds'\n  >;\n};\n\nexport type ManagedSettingsFragment = { __typename?: 'Settings' } & {\n  general: { __typename?: 'GeneralSettings' } & Pick<\n    GeneralSettings,\n    'autoConvert'\n  >;\n  extension: { __typename?: 'ExtensionSettings' } & Pick<\n    ExtensionSettings,\n    'autoTrack' | 'minLengthSeconds' | 'blacklist'\n  >;\n};\n\nexport type UpdateSettingsMutationVariables = Exact<{\n  general: GeneralSettingsInput;\n  extension: ExtensionSettingsInput;\n}>;\n\nexport type UpdateSettingsMutation = { __typename?: 'Mutation' } & {\n  updateSettings: { __typename?: 'Settings' } & ManagedSettingsFragment;\n};\n\nexport type AuthQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type AuthQuery = { __typename?: 'Query' } & {\n  auth?: Maybe<\n    { __typename?: 'User' } & Pick<\n      User,\n      'id' | 'name' | 'email' | 'createdAt'\n    > & {\n        settings: { __typename?: 'Settings' } & {\n          general: { __typename?: 'GeneralSettings' } & Pick<\n            GeneralSettings,\n            'autoConvert'\n          >;\n          extension: { __typename?: 'ExtensionSettings' } & Pick<\n            ExtensionSettings,\n            'autoTrack' | 'minLengthSeconds' | 'blacklist'\n          >;\n        };\n      }\n  >;\n};\n\nexport type IsExtensionCheckDoneQueryVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type IsExtensionCheckDoneQuery = { __typename?: 'Query' } & Pick<\n  Query,\n  'isExtensionCheckDone'\n>;\n\nexport type WatchedPropsFragment = { __typename?: 'Watched' } & Pick<\n  Watched,\n  'id' | 'createdAt' | 'tvItemType'\n> & {\n    tvItem?: Maybe<\n      | ({ __typename?: 'Season' } & WatchedTvItemProps_Season_Fragment)\n      | ({ __typename?: 'Episode' } & WatchedTvItemProps_Episode_Fragment)\n    >;\n    rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>>;\n    review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'id' | 'body'>>;\n    user: { __typename?: 'User' } & Pick<User, 'id' | 'name'>;\n  };\n\nexport type WatchedItemPropsFragment = { __typename?: 'Watched' } & Pick<\n  Watched,\n  'itemType'\n> & {\n    item:\n      | ({ __typename?: 'Movie' } & ItemData_Movie_Fragment)\n      | ({ __typename?: 'Tv' } & ItemData_Tv_Fragment);\n  };\n\ntype WatchedTvItemProps_Season_Fragment = { __typename?: 'Season' } & Pick<\n  Season,\n  'id' | 'season_number'\n>;\n\ntype WatchedTvItemProps_Episode_Fragment = { __typename?: 'Episode' } & Pick<\n  Episode,\n  'id' | 'episode_number'\n> & {\n    season: { __typename?: 'Season' } & Pick<Season, 'id' | 'season_number'>;\n  };\n\nexport type WatchedTvItemPropsFragment =\n  | WatchedTvItemProps_Season_Fragment\n  | WatchedTvItemProps_Episode_Fragment;\n\nexport type WatchedCursorPropsFragment = {\n  __typename?: 'WatchedCursor';\n} & Pick<WatchedCursor, 'cursor' | 'hasMore'> & {\n    watched: Array<{ __typename?: 'Watched' } & WatchedPropsFragment>;\n  };\n\nexport type WatchedCursorWithItemsPropsFragment = {\n  __typename?: 'WatchedCursor';\n} & Pick<WatchedCursor, 'cursor' | 'hasMore'> & {\n    watched: Array<\n      { __typename?: 'Watched' } & WatchedPropsFragment &\n        WatchedItemPropsFragment\n    >;\n  };\n\nexport type SeasonPropsFragment = { __typename?: 'Season' } & Pick<\n  Season,\n  | 'id'\n  | 'name'\n  | 'overview'\n  | 'episode_count'\n  | 'air_date'\n  | 'poster_path'\n  | 'season_number'\n> & {\n    episodes: Array<\n      { __typename?: 'Episode' } & Pick<\n        Episode,\n        | 'id'\n        | 'name'\n        | 'overview'\n        | 'episode_number'\n        | 'air_date'\n        | 'vote_average'\n        | 'vote_count'\n      >\n    >;\n  };\n\nexport type UserQueryVariables = Exact<{\n  name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type UserQuery = { __typename?: 'Query' } & {\n  user: { __typename?: 'User' } & Pick<User, 'id' | 'name' | 'createdAt'> & {\n      watched: {\n        __typename?: 'WatchedCursor';\n      } & WatchedCursorWithItemsPropsFragment;\n    };\n};\n\nexport type MovieQueryVariables = Exact<{\n  id?: Maybe<Scalars['ID']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type MovieQuery = { __typename?: 'Query' } & {\n  movie: { __typename?: 'Movie' } & Pick<\n    Movie,\n    | 'id'\n    | 'title'\n    | 'overview'\n    | 'release_date'\n    | 'poster_path'\n    | 'backdrop_path'\n    | 'vote_average'\n    | 'vote_count'\n  > & {\n      watched: { __typename?: 'WatchedCursor' } & WatchedCursorPropsFragment;\n    };\n};\n\nexport type TvQueryVariables = Exact<{\n  id?: Maybe<Scalars['ID']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type TvQuery = { __typename?: 'Query' } & {\n  tv: { __typename?: 'Tv' } & Pick<\n    Tv,\n    | 'id'\n    | 'name'\n    | 'overview'\n    | 'first_air_date'\n    | 'poster_path'\n    | 'backdrop_path'\n    | 'vote_average'\n    | 'vote_count'\n  > & {\n      seasons: Array<{ __typename?: 'Season' } & SeasonPropsFragment>;\n      watched: { __typename?: 'WatchedCursor' } & WatchedCursorPropsFragment;\n    };\n};\n\nexport type WatchedQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type WatchedQuery = { __typename?: 'Query' } & {\n  watched: { __typename?: 'Watched' } & WatchedPropsFragment &\n    WatchedItemPropsFragment;\n};\n\nexport type WatchesQueryVariables = Exact<{\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  cursor?: Maybe<Scalars['String']>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n}>;\n\nexport type WatchesQuery = { __typename?: 'Query' } & {\n  watches: {\n    __typename?: 'WatchedCursor';\n  } & WatchedCursorWithItemsPropsFragment;\n};\n\nexport type ReviewsQueryVariables = Exact<{\n  userId?: Maybe<Scalars['ID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<ItemType>;\n  cursor?: Maybe<Scalars['String']>;\n  tvItemId?: Maybe<Scalars['ID']>;\n  tvItemType?: Maybe<TvItemType>;\n}>;\n\nexport type ReviewsQuery = { __typename?: 'Query' } & {\n  reviews: { __typename?: 'ReviewCursor' } & Pick<\n    ReviewCursor,\n    'cursor' | 'hasMore'\n  > & {\n      reviews: Array<\n        { __typename?: 'Review' } & Pick<Review, 'id' | 'body'> & {\n            watched: { __typename?: 'Watched' } & Pick<\n              Watched,\n              'id' | 'createdAt' | 'tvItemType'\n            > & {\n                rating?: Maybe<\n                  { __typename?: 'Rating' } & Pick<Rating, 'id' | 'value'>\n                >;\n                tvItem?: Maybe<\n                  | ({\n                      __typename?: 'Season';\n                    } & WatchedTvItemProps_Season_Fragment)\n                  | ({\n                      __typename?: 'Episode';\n                    } & WatchedTvItemProps_Episode_Fragment)\n                >;\n                user: { __typename?: 'User' } & Pick<User, 'id' | 'name'>;\n              };\n          }\n      >;\n    };\n};\n\nexport type SearchItemDataFragment = { __typename?: 'SearchItem' } & Pick<\n  SearchItem,\n  'id' | 'tmdbId' | 'title' | 'release_date' | 'poster_path' | 'type'\n>;\n\nexport type SearchContentQueryVariables = Exact<{\n  title: Scalars['String'];\n}>;\n\nexport type SearchContentQuery = { __typename?: 'Query' } & {\n  searchContent: Array<{ __typename?: 'SearchItem' } & SearchItemDataFragment>;\n};\n\nexport type AutoTrackedListQueryVariables = Exact<{\n  userId: Scalars['ID'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\nexport type AutoTrackedListQuery = { __typename?: 'Query' } & {\n  autoTrackedList: { __typename?: 'AutoTrackedCursor' } & Pick<\n    AutoTrackedCursor,\n    'cursor' | 'hasMore'\n  > & {\n      autoTracked: Array<\n        { __typename?: 'AutoTracked' } & Pick<\n          AutoTracked,\n          'id' | 'itemType' | 'tvItemType' | 'createdAt'\n        > & {\n            item?: Maybe<\n              | ({ __typename?: 'Movie' } & ItemData_Movie_Fragment)\n              | ({ __typename?: 'Tv' } & ItemData_Tv_Fragment)\n            >;\n            tvItem?: Maybe<\n              | ({ __typename?: 'Season' } & WatchedTvItemProps_Season_Fragment)\n              | ({\n                  __typename?: 'Episode';\n                } & WatchedTvItemProps_Episode_Fragment)\n            >;\n            meta: { __typename?: 'AutoTrackedMeta' } & Pick<\n              AutoTrackedMeta,\n              'title' | 'filename' | 'url' | 'provider'\n            > & {\n                tvData?: Maybe<\n                  { __typename?: 'AutoTrackedMetaTvData' } & Pick<\n                    AutoTrackedMetaTvData,\n                    'season' | 'episode'\n                  >\n                >;\n              };\n          }\n      >;\n    };\n};\n\ntype ItemData_Movie_Fragment = { __typename?: 'Movie' } & Pick<\n  Movie,\n  'id' | 'title' | 'release_date' | 'poster_path' | 'backdrop_path'\n>;\n\ntype ItemData_Tv_Fragment = { __typename?: 'Tv' } & Pick<\n  Tv,\n  'id' | 'name' | 'first_air_date' | 'poster_path' | 'backdrop_path'\n>;\n\nexport type ItemDataFragment = ItemData_Movie_Fragment | ItemData_Tv_Fragment;\n\nexport type AutoTrackedQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type AutoTrackedQuery = { __typename?: 'Query' } & {\n  autoTracked: { __typename?: 'AutoTracked' } & Pick<\n    AutoTracked,\n    'id' | 'itemType' | 'tvItemType' | 'createdAt'\n  > & {\n      item?: Maybe<\n        | ({ __typename?: 'Movie' } & ItemData_Movie_Fragment)\n        | ({ __typename?: 'Tv' } & ItemData_Tv_Fragment)\n      >;\n      tvItem?: Maybe<\n        | ({ __typename?: 'Season' } & WatchedTvItemProps_Season_Fragment)\n        | ({ __typename?: 'Episode' } & WatchedTvItemProps_Episode_Fragment)\n      >;\n      meta: { __typename?: 'AutoTrackedMeta' } & Pick<\n        AutoTrackedMeta,\n        'title' | 'filename' | 'url' | 'provider'\n      > & {\n          tvData?: Maybe<\n            { __typename?: 'AutoTrackedMetaTvData' } & Pick<\n              AutoTrackedMetaTvData,\n              'season' | 'episode'\n            >\n          >;\n        };\n    };\n};\n\nexport type SeasonsQueryVariables = Exact<{\n  itemId: Scalars['ID'];\n}>;\n\nexport type SeasonsQuery = { __typename?: 'Query' } & {\n  seasons: Array<{ __typename?: 'Season' } & SeasonPropsFragment>;\n};\n\nexport type SettingsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type SettingsQuery = { __typename?: 'Query' } & {\n  settings: { __typename?: 'Settings' } & ManagedSettingsFragment;\n};\n\nexport type WatchedImportDataFragment = { __typename?: 'WatchedImport' } & Pick<\n  WatchedImport,\n  'tmdbId' | 'itemId' | 'itemType' | 'tvItemId' | 'tvItemType' | 'createdAt'\n> & {\n    rating?: Maybe<{ __typename?: 'Rating' } & Pick<Rating, 'value'>>;\n    review?: Maybe<{ __typename?: 'Review' } & Pick<Review, 'body'>>;\n    item: { __typename?: 'SearchItem' } & SearchItemDataFragment;\n  };\n\nexport type ImportLetterboxdQueryVariables = Exact<{\n  file: Scalars['Upload'];\n}>;\n\nexport type ImportLetterboxdQuery = { __typename?: 'Query' } & {\n  importLetterboxd: Array<\n    { __typename?: 'ImportResult' } & {\n      original: { __typename?: 'LetterboxdItem' } & Pick<\n        LetterboxdItem,\n        'date' | 'name' | 'year' | 'watchedDate' | 'rating' | 'review'\n      >;\n      imported?: Maybe<\n        { __typename?: 'WatchedImport' } & WatchedImportDataFragment\n      >;\n    }\n  >;\n};\n\nexport const ManagedSettingsFragmentDoc = gql`\n  fragment ManagedSettings on Settings {\n    general {\n      autoConvert\n    }\n    extension {\n      autoTrack\n      minLengthSeconds\n      blacklist\n    }\n  }\n`;\nexport const WatchedTvItemPropsFragmentDoc = gql`\n  fragment WatchedTvItemProps on TvItem {\n    ... on Episode {\n      id\n      episode_number\n      season {\n        id\n        season_number\n      }\n    }\n    ... on Season {\n      id\n      season_number\n    }\n  }\n`;\nexport const WatchedPropsFragmentDoc = gql`\n  fragment WatchedProps on Watched {\n    id\n    createdAt\n    tvItemType\n    tvItem {\n      ...WatchedTvItemProps\n    }\n    rating {\n      id\n      value\n    }\n    review {\n      id\n      body\n    }\n    user {\n      id\n      name\n    }\n  }\n  ${WatchedTvItemPropsFragmentDoc}\n`;\nexport const WatchedCursorPropsFragmentDoc = gql`\n  fragment WatchedCursorProps on WatchedCursor {\n    cursor\n    hasMore\n    watched {\n      ...WatchedProps\n    }\n  }\n  ${WatchedPropsFragmentDoc}\n`;\nexport const ItemDataFragmentDoc = gql`\n  fragment ItemData on Item {\n    ... on Movie {\n      id\n      title\n      release_date\n      poster_path\n      backdrop_path\n    }\n    ... on Tv {\n      id\n      name\n      first_air_date\n      poster_path\n      backdrop_path\n    }\n  }\n`;\nexport const WatchedItemPropsFragmentDoc = gql`\n  fragment WatchedItemProps on Watched {\n    itemType\n    item {\n      ...ItemData\n    }\n  }\n  ${ItemDataFragmentDoc}\n`;\nexport const WatchedCursorWithItemsPropsFragmentDoc = gql`\n  fragment WatchedCursorWithItemsProps on WatchedCursor {\n    cursor\n    hasMore\n    watched {\n      ...WatchedProps\n      ...WatchedItemProps\n    }\n  }\n  ${WatchedPropsFragmentDoc}\n  ${WatchedItemPropsFragmentDoc}\n`;\nexport const SeasonPropsFragmentDoc = gql`\n  fragment SeasonProps on Season {\n    id\n    name\n    overview\n    episode_count\n    air_date\n    poster_path\n    season_number\n    episodes {\n      id\n      name\n      overview\n      episode_number\n      air_date\n      vote_average\n      vote_count\n    }\n  }\n`;\nexport const SearchItemDataFragmentDoc = gql`\n  fragment SearchItemData on SearchItem {\n    id\n    tmdbId\n    title\n    release_date\n    poster_path\n    type\n  }\n`;\nexport const WatchedImportDataFragmentDoc = gql`\n  fragment WatchedImportData on WatchedImport {\n    tmdbId\n    itemId\n    itemType\n    tvItemId\n    tvItemType\n    createdAt\n    rating {\n      value\n    }\n    review {\n      body\n    }\n    itemType\n    item {\n      ...SearchItemData\n    }\n  }\n  ${SearchItemDataFragmentDoc}\n`;\nexport const LoginDocument = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n        name\n        email\n        createdAt\n        updatedAt\n        settings {\n          general {\n            autoConvert\n          }\n          extension {\n            autoTrack\n            minLengthSeconds\n            blacklist\n          }\n        }\n      }\n    }\n  }\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >,\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions,\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const RegisterDocument = gql`\n  mutation Register($name: String!, $email: String!, $password: String!) {\n    register(name: $name, email: $email, password: $password) {\n      token\n      user {\n        id\n        name\n        email\n        createdAt\n        updatedAt\n        settings {\n          general {\n            autoConvert\n          }\n          extension {\n            autoTrack\n            minLengthSeconds\n            blacklist\n          }\n        }\n      }\n    }\n  }\n`;\nexport type RegisterMutationFn = Apollo.MutationFunction<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >,\n) {\n  return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(\n    RegisterDocument,\n    baseOptions,\n  );\n}\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\nexport const LogoutDocument = gql`\n  mutation Logout {\n    logout @client\n  }\n`;\nexport type LogoutMutationFn = Apollo.MutationFunction<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LogoutMutation,\n    LogoutMutationVariables\n  >,\n) {\n  return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(\n    LogoutDocument,\n    baseOptions,\n  );\n}\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\nexport const AddWatchedDocument = gql`\n  mutation AddWatched(\n    $itemId: ID!\n    $itemType: ItemType!\n    $createdAt: Float!\n    $rating: RatingInput\n    $review: ReviewInput\n    $tvItemId: ID\n    $tvItemType: TvItemType\n    $autoTrackedId: ID\n  ) {\n    addWatched(\n      itemId: $itemId\n      itemType: $itemType\n      createdAt: $createdAt\n      rating: $rating\n      review: $review\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n      autoTrackedId: $autoTrackedId\n    ) {\n      id\n      itemType\n      createdAt\n      rating {\n        id\n        value\n      }\n      review {\n        id\n        body\n      }\n      tvItemType\n      tvItem {\n        ... on Episode {\n          id\n          episode_number\n          season {\n            id\n            season_number\n          }\n        }\n        ... on Season {\n          id\n          season_number\n        }\n      }\n    }\n  }\n`;\nexport type AddWatchedMutationFn = Apollo.MutationFunction<\n  AddWatchedMutation,\n  AddWatchedMutationVariables\n>;\n\n/**\n * __useAddWatchedMutation__\n *\n * To run a mutation, you first call `useAddWatchedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddWatchedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addWatchedMutation, { data, loading, error }] = useAddWatchedMutation({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      createdAt: // value for 'createdAt'\n *      rating: // value for 'rating'\n *      review: // value for 'review'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *      autoTrackedId: // value for 'autoTrackedId'\n *   },\n * });\n */\nexport function useAddWatchedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    AddWatchedMutation,\n    AddWatchedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<AddWatchedMutation, AddWatchedMutationVariables>(\n    AddWatchedDocument,\n    baseOptions,\n  );\n}\nexport type AddWatchedMutationHookResult = ReturnType<\n  typeof useAddWatchedMutation\n>;\nexport type AddWatchedMutationResult = Apollo.MutationResult<\n  AddWatchedMutation\n>;\nexport type AddWatchedMutationOptions = Apollo.BaseMutationOptions<\n  AddWatchedMutation,\n  AddWatchedMutationVariables\n>;\nexport const EditWatchedDocument = gql`\n  mutation EditWatched(\n    $id: ID!\n    $createdAt: Float!\n    $rating: RatingInput\n    $review: ReviewInput\n    $tvItemId: ID\n    $tvItemType: TvItemType\n  ) {\n    editWatched(\n      id: $id\n      createdAt: $createdAt\n      rating: $rating\n      review: $review\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n    ) {\n      id\n      itemType\n      createdAt\n      rating {\n        id\n        value\n      }\n      review {\n        id\n        body\n      }\n      tvItemType\n      tvItem {\n        ... on Episode {\n          id\n          episode_number\n          season {\n            id\n            season_number\n          }\n        }\n        ... on Season {\n          id\n          season_number\n        }\n      }\n    }\n  }\n`;\nexport type EditWatchedMutationFn = Apollo.MutationFunction<\n  EditWatchedMutation,\n  EditWatchedMutationVariables\n>;\n\n/**\n * __useEditWatchedMutation__\n *\n * To run a mutation, you first call `useEditWatchedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWatchedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWatchedMutation, { data, loading, error }] = useEditWatchedMutation({\n *   variables: {\n *      id: // value for 'id'\n *      createdAt: // value for 'createdAt'\n *      rating: // value for 'rating'\n *      review: // value for 'review'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *   },\n * });\n */\nexport function useEditWatchedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    EditWatchedMutation,\n    EditWatchedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<EditWatchedMutation, EditWatchedMutationVariables>(\n    EditWatchedDocument,\n    baseOptions,\n  );\n}\nexport type EditWatchedMutationHookResult = ReturnType<\n  typeof useEditWatchedMutation\n>;\nexport type EditWatchedMutationResult = Apollo.MutationResult<\n  EditWatchedMutation\n>;\nexport type EditWatchedMutationOptions = Apollo.BaseMutationOptions<\n  EditWatchedMutation,\n  EditWatchedMutationVariables\n>;\nexport const RemoveWatchedDocument = gql`\n  mutation RemoveWatched($itemId: ID!) {\n    removeWatched(itemId: $itemId)\n  }\n`;\nexport type RemoveWatchedMutationFn = Apollo.MutationFunction<\n  RemoveWatchedMutation,\n  RemoveWatchedMutationVariables\n>;\n\n/**\n * __useRemoveWatchedMutation__\n *\n * To run a mutation, you first call `useRemoveWatchedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveWatchedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeWatchedMutation, { data, loading, error }] = useRemoveWatchedMutation({\n *   variables: {\n *      itemId: // value for 'itemId'\n *   },\n * });\n */\nexport function useRemoveWatchedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveWatchedMutation,\n    RemoveWatchedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    RemoveWatchedMutation,\n    RemoveWatchedMutationVariables\n  >(RemoveWatchedDocument, baseOptions);\n}\nexport type RemoveWatchedMutationHookResult = ReturnType<\n  typeof useRemoveWatchedMutation\n>;\nexport type RemoveWatchedMutationResult = Apollo.MutationResult<\n  RemoveWatchedMutation\n>;\nexport type RemoveWatchedMutationOptions = Apollo.BaseMutationOptions<\n  RemoveWatchedMutation,\n  RemoveWatchedMutationVariables\n>;\nexport const RemoveAutoTrackedDocument = gql`\n  mutation RemoveAutoTracked($ids: [ID!]!) {\n    removeAutoTracked(ids: $ids)\n  }\n`;\nexport type RemoveAutoTrackedMutationFn = Apollo.MutationFunction<\n  RemoveAutoTrackedMutation,\n  RemoveAutoTrackedMutationVariables\n>;\n\n/**\n * __useRemoveAutoTrackedMutation__\n *\n * To run a mutation, you first call `useRemoveAutoTrackedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveAutoTrackedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeAutoTrackedMutation, { data, loading, error }] = useRemoveAutoTrackedMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useRemoveAutoTrackedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveAutoTrackedMutation,\n    RemoveAutoTrackedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    RemoveAutoTrackedMutation,\n    RemoveAutoTrackedMutationVariables\n  >(RemoveAutoTrackedDocument, baseOptions);\n}\nexport type RemoveAutoTrackedMutationHookResult = ReturnType<\n  typeof useRemoveAutoTrackedMutation\n>;\nexport type RemoveAutoTrackedMutationResult = Apollo.MutationResult<\n  RemoveAutoTrackedMutation\n>;\nexport type RemoveAutoTrackedMutationOptions = Apollo.BaseMutationOptions<\n  RemoveAutoTrackedMutation,\n  RemoveAutoTrackedMutationVariables\n>;\nexport const ConvertAutoTrackedDocument = gql`\n  mutation ConvertAutoTracked($ids: [ID!]!) {\n    convertAutoTracked(ids: $ids) {\n      removedIds\n    }\n  }\n`;\nexport type ConvertAutoTrackedMutationFn = Apollo.MutationFunction<\n  ConvertAutoTrackedMutation,\n  ConvertAutoTrackedMutationVariables\n>;\n\n/**\n * __useConvertAutoTrackedMutation__\n *\n * To run a mutation, you first call `useConvertAutoTrackedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useConvertAutoTrackedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [convertAutoTrackedMutation, { data, loading, error }] = useConvertAutoTrackedMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useConvertAutoTrackedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    ConvertAutoTrackedMutation,\n    ConvertAutoTrackedMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    ConvertAutoTrackedMutation,\n    ConvertAutoTrackedMutationVariables\n  >(ConvertAutoTrackedDocument, baseOptions);\n}\nexport type ConvertAutoTrackedMutationHookResult = ReturnType<\n  typeof useConvertAutoTrackedMutation\n>;\nexport type ConvertAutoTrackedMutationResult = Apollo.MutationResult<\n  ConvertAutoTrackedMutation\n>;\nexport type ConvertAutoTrackedMutationOptions = Apollo.BaseMutationOptions<\n  ConvertAutoTrackedMutation,\n  ConvertAutoTrackedMutationVariables\n>;\nexport const UpdateSettingsDocument = gql`\n  mutation UpdateSettings(\n    $general: GeneralSettingsInput!\n    $extension: ExtensionSettingsInput!\n  ) {\n    updateSettings(general: $general, extension: $extension) {\n      ...ManagedSettings\n    }\n  }\n  ${ManagedSettingsFragmentDoc}\n`;\nexport type UpdateSettingsMutationFn = Apollo.MutationFunction<\n  UpdateSettingsMutation,\n  UpdateSettingsMutationVariables\n>;\n\n/**\n * __useUpdateSettingsMutation__\n *\n * To run a mutation, you first call `useUpdateSettingsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSettingsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSettingsMutation, { data, loading, error }] = useUpdateSettingsMutation({\n *   variables: {\n *      general: // value for 'general'\n *      extension: // value for 'extension'\n *   },\n * });\n */\nexport function useUpdateSettingsMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateSettingsMutation,\n    UpdateSettingsMutationVariables\n  >,\n) {\n  return Apollo.useMutation<\n    UpdateSettingsMutation,\n    UpdateSettingsMutationVariables\n  >(UpdateSettingsDocument, baseOptions);\n}\nexport type UpdateSettingsMutationHookResult = ReturnType<\n  typeof useUpdateSettingsMutation\n>;\nexport type UpdateSettingsMutationResult = Apollo.MutationResult<\n  UpdateSettingsMutation\n>;\nexport type UpdateSettingsMutationOptions = Apollo.BaseMutationOptions<\n  UpdateSettingsMutation,\n  UpdateSettingsMutationVariables\n>;\nexport const AuthDocument = gql`\n  query Auth {\n    auth @client {\n      id\n      name\n      email\n      createdAt\n      settings {\n        general {\n          autoConvert\n        }\n        extension {\n          autoTrack\n          minLengthSeconds\n          blacklist\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useAuthQuery__\n *\n * To run a query within a React component, call `useAuthQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAuthQuery(\n  baseOptions?: Apollo.QueryHookOptions<AuthQuery, AuthQueryVariables>,\n) {\n  return Apollo.useQuery<AuthQuery, AuthQueryVariables>(\n    AuthDocument,\n    baseOptions,\n  );\n}\nexport function useAuthLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AuthQuery, AuthQueryVariables>,\n) {\n  return Apollo.useLazyQuery<AuthQuery, AuthQueryVariables>(\n    AuthDocument,\n    baseOptions,\n  );\n}\nexport type AuthQueryHookResult = ReturnType<typeof useAuthQuery>;\nexport type AuthLazyQueryHookResult = ReturnType<typeof useAuthLazyQuery>;\nexport type AuthQueryResult = Apollo.QueryResult<AuthQuery, AuthQueryVariables>;\nexport const IsExtensionCheckDoneDocument = gql`\n  query IsExtensionCheckDone {\n    isExtensionCheckDone @client\n  }\n`;\n\n/**\n * __useIsExtensionCheckDoneQuery__\n *\n * To run a query within a React component, call `useIsExtensionCheckDoneQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsExtensionCheckDoneQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsExtensionCheckDoneQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useIsExtensionCheckDoneQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >,\n) {\n  return Apollo.useQuery<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >(IsExtensionCheckDoneDocument, baseOptions);\n}\nexport function useIsExtensionCheckDoneLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<\n    IsExtensionCheckDoneQuery,\n    IsExtensionCheckDoneQueryVariables\n  >(IsExtensionCheckDoneDocument, baseOptions);\n}\nexport type IsExtensionCheckDoneQueryHookResult = ReturnType<\n  typeof useIsExtensionCheckDoneQuery\n>;\nexport type IsExtensionCheckDoneLazyQueryHookResult = ReturnType<\n  typeof useIsExtensionCheckDoneLazyQuery\n>;\nexport type IsExtensionCheckDoneQueryResult = Apollo.QueryResult<\n  IsExtensionCheckDoneQuery,\n  IsExtensionCheckDoneQueryVariables\n>;\nexport const UserDocument = gql`\n  query User($name: String, $id: ID, $cursor: String) {\n    user(name: $name, id: $id) {\n      id\n      name\n      createdAt\n      watched(cursor: $cursor) {\n        ...WatchedCursorWithItemsProps\n      }\n    }\n  }\n  ${WatchedCursorWithItemsPropsFragmentDoc}\n`;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      name: // value for 'name'\n *      id: // value for 'id'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useUserQuery(\n  baseOptions?: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>,\n) {\n  return Apollo.useQuery<UserQuery, UserQueryVariables>(\n    UserDocument,\n    baseOptions,\n  );\n}\nexport function useUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>,\n) {\n  return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(\n    UserDocument,\n    baseOptions,\n  );\n}\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const MovieDocument = gql`\n  query Movie($id: ID, $cursor: String) {\n    movie(id: $id) {\n      id\n      title\n      overview\n      release_date\n      poster_path\n      backdrop_path\n      vote_average\n      vote_count\n      watched(cursor: $cursor, filter: \"Reviewed\") {\n        ...WatchedCursorProps\n      }\n    }\n  }\n  ${WatchedCursorPropsFragmentDoc}\n`;\n\n/**\n * __useMovieQuery__\n *\n * To run a query within a React component, call `useMovieQuery` and pass it any options that fit your needs.\n * When your component renders, `useMovieQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMovieQuery({\n *   variables: {\n *      id: // value for 'id'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useMovieQuery(\n  baseOptions?: Apollo.QueryHookOptions<MovieQuery, MovieQueryVariables>,\n) {\n  return Apollo.useQuery<MovieQuery, MovieQueryVariables>(\n    MovieDocument,\n    baseOptions,\n  );\n}\nexport function useMovieLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MovieQuery, MovieQueryVariables>,\n) {\n  return Apollo.useLazyQuery<MovieQuery, MovieQueryVariables>(\n    MovieDocument,\n    baseOptions,\n  );\n}\nexport type MovieQueryHookResult = ReturnType<typeof useMovieQuery>;\nexport type MovieLazyQueryHookResult = ReturnType<typeof useMovieLazyQuery>;\nexport type MovieQueryResult = Apollo.QueryResult<\n  MovieQuery,\n  MovieQueryVariables\n>;\nexport const TvDocument = gql`\n  query Tv($id: ID, $cursor: String) {\n    tv(id: $id) {\n      id\n      name\n      overview\n      first_air_date\n      poster_path\n      backdrop_path\n      vote_average\n      vote_count\n      seasons {\n        ...SeasonProps\n      }\n      watched(cursor: $cursor, filter: \"Reviewed\") {\n        ...WatchedCursorProps\n      }\n    }\n  }\n  ${SeasonPropsFragmentDoc}\n  ${WatchedCursorPropsFragmentDoc}\n`;\n\n/**\n * __useTvQuery__\n *\n * To run a query within a React component, call `useTvQuery` and pass it any options that fit your needs.\n * When your component renders, `useTvQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTvQuery({\n *   variables: {\n *      id: // value for 'id'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useTvQuery(\n  baseOptions?: Apollo.QueryHookOptions<TvQuery, TvQueryVariables>,\n) {\n  return Apollo.useQuery<TvQuery, TvQueryVariables>(TvDocument, baseOptions);\n}\nexport function useTvLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<TvQuery, TvQueryVariables>,\n) {\n  return Apollo.useLazyQuery<TvQuery, TvQueryVariables>(\n    TvDocument,\n    baseOptions,\n  );\n}\nexport type TvQueryHookResult = ReturnType<typeof useTvQuery>;\nexport type TvLazyQueryHookResult = ReturnType<typeof useTvLazyQuery>;\nexport type TvQueryResult = Apollo.QueryResult<TvQuery, TvQueryVariables>;\nexport const WatchedDocument = gql`\n  query Watched($id: ID!) {\n    watched(id: $id) {\n      ...WatchedProps\n      ...WatchedItemProps\n    }\n  }\n  ${WatchedPropsFragmentDoc}\n  ${WatchedItemPropsFragmentDoc}\n`;\n\n/**\n * __useWatchedQuery__\n *\n * To run a query within a React component, call `useWatchedQuery` and pass it any options that fit your needs.\n * When your component renders, `useWatchedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchedQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useWatchedQuery(\n  baseOptions: Apollo.QueryHookOptions<WatchedQuery, WatchedQueryVariables>,\n) {\n  return Apollo.useQuery<WatchedQuery, WatchedQueryVariables>(\n    WatchedDocument,\n    baseOptions,\n  );\n}\nexport function useWatchedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WatchedQuery,\n    WatchedQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<WatchedQuery, WatchedQueryVariables>(\n    WatchedDocument,\n    baseOptions,\n  );\n}\nexport type WatchedQueryHookResult = ReturnType<typeof useWatchedQuery>;\nexport type WatchedLazyQueryHookResult = ReturnType<typeof useWatchedLazyQuery>;\nexport type WatchedQueryResult = Apollo.QueryResult<\n  WatchedQuery,\n  WatchedQueryVariables\n>;\nexport const WatchesDocument = gql`\n  query Watches(\n    $userId: ID\n    $itemId: ID\n    $itemType: ItemType\n    $cursor: String\n    $tvItemId: ID\n    $tvItemType: TvItemType\n  ) {\n    watches(\n      userId: $userId\n      itemId: $itemId\n      itemType: $itemType\n      cursor: $cursor\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n    ) {\n      ...WatchedCursorWithItemsProps\n    }\n  }\n  ${WatchedCursorWithItemsPropsFragmentDoc}\n`;\n\n/**\n * __useWatchesQuery__\n *\n * To run a query within a React component, call `useWatchesQuery` and pass it any options that fit your needs.\n * When your component renders, `useWatchesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchesQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      cursor: // value for 'cursor'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *   },\n * });\n */\nexport function useWatchesQuery(\n  baseOptions?: Apollo.QueryHookOptions<WatchesQuery, WatchesQueryVariables>,\n) {\n  return Apollo.useQuery<WatchesQuery, WatchesQueryVariables>(\n    WatchesDocument,\n    baseOptions,\n  );\n}\nexport function useWatchesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WatchesQuery,\n    WatchesQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<WatchesQuery, WatchesQueryVariables>(\n    WatchesDocument,\n    baseOptions,\n  );\n}\nexport type WatchesQueryHookResult = ReturnType<typeof useWatchesQuery>;\nexport type WatchesLazyQueryHookResult = ReturnType<typeof useWatchesLazyQuery>;\nexport type WatchesQueryResult = Apollo.QueryResult<\n  WatchesQuery,\n  WatchesQueryVariables\n>;\nexport const ReviewsDocument = gql`\n  query Reviews(\n    $userId: ID\n    $itemId: ID\n    $itemType: ItemType\n    $cursor: String\n    $tvItemId: ID\n    $tvItemType: TvItemType\n  ) {\n    reviews(\n      userId: $userId\n      itemId: $itemId\n      itemType: $itemType\n      cursor: $cursor\n      tvItemId: $tvItemId\n      tvItemType: $tvItemType\n    ) {\n      cursor\n      hasMore\n      reviews {\n        id\n        body\n        watched {\n          id\n          createdAt\n          rating {\n            id\n            value\n          }\n          tvItemType\n          tvItem {\n            ...WatchedTvItemProps\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n  ${WatchedTvItemPropsFragmentDoc}\n`;\n\n/**\n * __useReviewsQuery__\n *\n * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewsQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      cursor: // value for 'cursor'\n *      tvItemId: // value for 'tvItemId'\n *      tvItemType: // value for 'tvItemType'\n *   },\n * });\n */\nexport function useReviewsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>,\n) {\n  return Apollo.useQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions,\n  );\n}\nexport function useReviewsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ReviewsQuery,\n    ReviewsQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions,\n  );\n}\nexport type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;\nexport type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;\nexport type ReviewsQueryResult = Apollo.QueryResult<\n  ReviewsQuery,\n  ReviewsQueryVariables\n>;\nexport const SearchContentDocument = gql`\n  query SearchContent($title: String!) {\n    searchContent(title: $title) {\n      ...SearchItemData\n    }\n  }\n  ${SearchItemDataFragmentDoc}\n`;\n\n/**\n * __useSearchContentQuery__\n *\n * To run a query within a React component, call `useSearchContentQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchContentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchContentQuery({\n *   variables: {\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useSearchContentQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    SearchContentQuery,\n    SearchContentQueryVariables\n  >,\n) {\n  return Apollo.useQuery<SearchContentQuery, SearchContentQueryVariables>(\n    SearchContentDocument,\n    baseOptions,\n  );\n}\nexport function useSearchContentLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SearchContentQuery,\n    SearchContentQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SearchContentQuery, SearchContentQueryVariables>(\n    SearchContentDocument,\n    baseOptions,\n  );\n}\nexport type SearchContentQueryHookResult = ReturnType<\n  typeof useSearchContentQuery\n>;\nexport type SearchContentLazyQueryHookResult = ReturnType<\n  typeof useSearchContentLazyQuery\n>;\nexport type SearchContentQueryResult = Apollo.QueryResult<\n  SearchContentQuery,\n  SearchContentQueryVariables\n>;\nexport const AutoTrackedListDocument = gql`\n  query AutoTrackedList($userId: ID!, $cursor: String) {\n    autoTrackedList(userId: $userId, cursor: $cursor) {\n      cursor\n      hasMore\n      autoTracked {\n        id\n        itemType\n        item {\n          ...ItemData\n        }\n        tvItemType\n        tvItem {\n          ...WatchedTvItemProps\n        }\n        meta {\n          title\n          filename\n          url\n          provider\n          tvData {\n            season\n            episode\n          }\n        }\n        createdAt\n      }\n    }\n  }\n  ${ItemDataFragmentDoc}\n  ${WatchedTvItemPropsFragmentDoc}\n`;\n\n/**\n * __useAutoTrackedListQuery__\n *\n * To run a query within a React component, call `useAutoTrackedListQuery` and pass it any options that fit your needs.\n * When your component renders, `useAutoTrackedListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAutoTrackedListQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useAutoTrackedListQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    AutoTrackedListQuery,\n    AutoTrackedListQueryVariables\n  >,\n) {\n  return Apollo.useQuery<AutoTrackedListQuery, AutoTrackedListQueryVariables>(\n    AutoTrackedListDocument,\n    baseOptions,\n  );\n}\nexport function useAutoTrackedListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    AutoTrackedListQuery,\n    AutoTrackedListQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<\n    AutoTrackedListQuery,\n    AutoTrackedListQueryVariables\n  >(AutoTrackedListDocument, baseOptions);\n}\nexport type AutoTrackedListQueryHookResult = ReturnType<\n  typeof useAutoTrackedListQuery\n>;\nexport type AutoTrackedListLazyQueryHookResult = ReturnType<\n  typeof useAutoTrackedListLazyQuery\n>;\nexport type AutoTrackedListQueryResult = Apollo.QueryResult<\n  AutoTrackedListQuery,\n  AutoTrackedListQueryVariables\n>;\nexport const AutoTrackedDocument = gql`\n  query AutoTracked($id: ID!) {\n    autoTracked(id: $id) {\n      id\n      itemType\n      item {\n        ...ItemData\n      }\n      tvItemType\n      tvItem {\n        ...WatchedTvItemProps\n      }\n      meta {\n        title\n        filename\n        url\n        provider\n        tvData {\n          season\n          episode\n        }\n      }\n      createdAt\n    }\n  }\n  ${ItemDataFragmentDoc}\n  ${WatchedTvItemPropsFragmentDoc}\n`;\n\n/**\n * __useAutoTrackedQuery__\n *\n * To run a query within a React component, call `useAutoTrackedQuery` and pass it any options that fit your needs.\n * When your component renders, `useAutoTrackedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAutoTrackedQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAutoTrackedQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    AutoTrackedQuery,\n    AutoTrackedQueryVariables\n  >,\n) {\n  return Apollo.useQuery<AutoTrackedQuery, AutoTrackedQueryVariables>(\n    AutoTrackedDocument,\n    baseOptions,\n  );\n}\nexport function useAutoTrackedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    AutoTrackedQuery,\n    AutoTrackedQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<AutoTrackedQuery, AutoTrackedQueryVariables>(\n    AutoTrackedDocument,\n    baseOptions,\n  );\n}\nexport type AutoTrackedQueryHookResult = ReturnType<typeof useAutoTrackedQuery>;\nexport type AutoTrackedLazyQueryHookResult = ReturnType<\n  typeof useAutoTrackedLazyQuery\n>;\nexport type AutoTrackedQueryResult = Apollo.QueryResult<\n  AutoTrackedQuery,\n  AutoTrackedQueryVariables\n>;\nexport const SeasonsDocument = gql`\n  query Seasons($itemId: ID!) {\n    seasons(itemId: $itemId) {\n      ...SeasonProps\n    }\n  }\n  ${SeasonPropsFragmentDoc}\n`;\n\n/**\n * __useSeasonsQuery__\n *\n * To run a query within a React component, call `useSeasonsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSeasonsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSeasonsQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *   },\n * });\n */\nexport function useSeasonsQuery(\n  baseOptions: Apollo.QueryHookOptions<SeasonsQuery, SeasonsQueryVariables>,\n) {\n  return Apollo.useQuery<SeasonsQuery, SeasonsQueryVariables>(\n    SeasonsDocument,\n    baseOptions,\n  );\n}\nexport function useSeasonsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SeasonsQuery,\n    SeasonsQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SeasonsQuery, SeasonsQueryVariables>(\n    SeasonsDocument,\n    baseOptions,\n  );\n}\nexport type SeasonsQueryHookResult = ReturnType<typeof useSeasonsQuery>;\nexport type SeasonsLazyQueryHookResult = ReturnType<typeof useSeasonsLazyQuery>;\nexport type SeasonsQueryResult = Apollo.QueryResult<\n  SeasonsQuery,\n  SeasonsQueryVariables\n>;\nexport const SettingsDocument = gql`\n  query Settings {\n    settings {\n      ...ManagedSettings\n    }\n  }\n  ${ManagedSettingsFragmentDoc}\n`;\n\n/**\n * __useSettingsQuery__\n *\n * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSettingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSettingsQuery(\n  baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>,\n) {\n  return Apollo.useQuery<SettingsQuery, SettingsQueryVariables>(\n    SettingsDocument,\n    baseOptions,\n  );\n}\nexport function useSettingsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SettingsQuery,\n    SettingsQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SettingsQuery, SettingsQueryVariables>(\n    SettingsDocument,\n    baseOptions,\n  );\n}\nexport type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;\nexport type SettingsLazyQueryHookResult = ReturnType<\n  typeof useSettingsLazyQuery\n>;\nexport type SettingsQueryResult = Apollo.QueryResult<\n  SettingsQuery,\n  SettingsQueryVariables\n>;\nexport const ImportLetterboxdDocument = gql`\n  query ImportLetterboxd($file: Upload!) {\n    importLetterboxd(file: $file) {\n      original {\n        date\n        name\n        year\n        watchedDate\n        rating\n        review\n      }\n      imported {\n        ...WatchedImportData\n      }\n    }\n  }\n  ${WatchedImportDataFragmentDoc}\n`;\n\n/**\n * __useImportLetterboxdQuery__\n *\n * To run a query within a React component, call `useImportLetterboxdQuery` and pass it any options that fit your needs.\n * When your component renders, `useImportLetterboxdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useImportLetterboxdQuery({\n *   variables: {\n *      file: // value for 'file'\n *   },\n * });\n */\nexport function useImportLetterboxdQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    ImportLetterboxdQuery,\n    ImportLetterboxdQueryVariables\n  >,\n) {\n  return Apollo.useQuery<ImportLetterboxdQuery, ImportLetterboxdQueryVariables>(\n    ImportLetterboxdDocument,\n    baseOptions,\n  );\n}\nexport function useImportLetterboxdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ImportLetterboxdQuery,\n    ImportLetterboxdQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<\n    ImportLetterboxdQuery,\n    ImportLetterboxdQueryVariables\n  >(ImportLetterboxdDocument, baseOptions);\n}\nexport type ImportLetterboxdQueryHookResult = ReturnType<\n  typeof useImportLetterboxdQuery\n>;\nexport type ImportLetterboxdLazyQueryHookResult = ReturnType<\n  typeof useImportLetterboxdLazyQuery\n>;\nexport type ImportLetterboxdQueryResult = Apollo.QueryResult<\n  ImportLetterboxdQuery,\n  ImportLetterboxdQueryVariables\n>;\n","import * as React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\n\nimport { useAuthQuery } from '../graphql';\n\nexport default function AuthRoute({\n  redirectTo = '/login',\n  redirectComponent,\n  ...routeProps\n}: RouteProps & {\n  redirectTo?: string;\n  redirectComponent?: RouteProps['component'];\n}) {\n  const { data } = useAuthQuery();\n\n  if (data?.auth) return <Route {...routeProps} />;\n\n  return redirectComponent ? (\n    <Route {...routeProps} component={redirectComponent} />\n  ) : (\n    <Redirect to={redirectTo} />\n  );\n}\n","var _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"style\", null, \"tspan { white-space:pre }.shp0 { fill: #ffffff;stroke: #000000;stroke-width: 3 } .shp1 { fill: #000000 } .shp2 { fill: #ffffff } \");\n\nvar _ref3 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp0\",\n  d: \"M14.5 2L14.5 2C21.41 2 27 7.59 27 14.5L27 33.5C27 40.41 21.41 46 14.5 46L14.5 46C7.59 46 2 40.41 2 33.5L2 14.5C2 7.59 7.59 2 14.5 2Z\"\n});\n\nvar _ref4 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp0\",\n  d: \"M41.5 2L41.5 2C48.41 2 54 7.59 54 14.5L54 33.5C54 40.41 48.41 46 41.5 46L41.5 46C34.59 46 29 40.41 29 33.5L29 14.5C29 7.59 34.59 2 41.5 2Z\"\n});\n\nvar _ref5 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp1\",\n  d: \"M44 38C39.02 38 35 33.98 35 29C35 24.02 39.02 20 44 20C48.98 20 53 24.02 53 29C53 33.98 48.98 38 44 38Z\"\n});\n\nvar _ref6 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp2\",\n  d: \"M40.5 28C39.12 28 38 26.88 38 25.5C38 24.12 39.12 23 40.5 23C41.88 23 43 24.12 43 25.5C43 26.88 41.88 28 40.5 28Z\"\n});\n\nvar _ref7 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp1\",\n  d: \"M17 38C12.02 38 8 33.98 8 29C8 24.02 12.02 20 17 20C21.98 20 26 24.02 26 29C26 33.98 21.98 38 17 38Z\"\n});\n\nvar _ref8 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"shp2\",\n  d: \"M13.5 28C12.12 28 11 26.88 11 25.5C11 24.12 12.12 23 13.5 23C14.88 23 16 24.12 16 25.5C16 26.88 14.88 28 13.5 28Z\"\n});\n\nvar SvgEyes = function SvgEyes(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 56 48\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgEyes, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/eyes.dae4ec2d.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\n\nimport { ReactComponent as Eyes} from '../assets/logos/eyes.svg';\n\nexport enum LogoSize {\n  text,\n  textLarge,\n  logo,\n  large,\n}\n\nconst sizes = {\n  [LogoSize.text]: [14, 12, '0 1px'],\n  [LogoSize.textLarge]: [16, 14, '1px 1px 0 2px'],\n  [LogoSize.logo]: [18, 16, '1px 1px 0'],\n  [LogoSize.large]: [24, 19, '1px 1px 0 2px'],\n}\n\nexport function Logo({ size } = { size: LogoSize.logo }) {\n  const [logoSize, eyeSize, eyePadding] = sizes[size]\n\n  return (\n    <div className=\"seenit-logo\" style={{ fontSize: logoSize }}>\n      S\n      <Eyes className=\"logo-eyes\" style={{ height: eyeSize, padding: eyePadding }} />\n      N&nbsp;IT\n    </div>\n  );\n}\n\nLogo.defaultProps  = {\n  size: LogoSize.logo,\n}\n","import * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MenuItem, PopoverPosition, Spinner } from '@blueprintjs/core';\nimport { Suggest, IItemRendererProps } from '@blueprintjs/select';\n\nimport { useSearchContentQuery, SearchItem } from '../graphql';\nimport useThrottle from './useThrottle';\n\nexport interface SearchOption {\n  label: string;\n  value: string | number;\n  item: SearchItem;\n}\n\nconst renderOption = (\n  { label, item }: SearchOption,\n  { handleClick, modifiers }: IItemRendererProps,\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n\n  return (\n    <MenuItem\n      active={modifiers.active}\n      key={item.id}\n      text={label}\n      onClick={handleClick}\n    />\n  );\n};\n\nconst Search: React.FC<{\n  selected?: SearchItem;\n  setSelected: (item: SearchItem) => void;\n}> = ({ selected, setSelected }) => {\n  const [query, setQuery] = React.useState('');\n\n  const { callback } = useThrottle(\n    (payload: string) => setQuery(payload),\n    1000,\n  );\n\n  const shouldSearch = query.length > 2;\n  const searchQuery = useSearchContentQuery({\n    variables: { title: query },\n    skip: query.length < 3,\n  });\n  const options =\n    searchQuery.data && searchQuery.data.searchContent\n      ? searchQuery.data.searchContent.reduce(\n          (acc: SearchOption[], item) =>\n            acc.concat({\n              label: `${item.title} (${\n                (item.release_date || '?').split('-')[0]\n              })`,\n              value: item.id,\n              item,\n            }),\n          [],\n        )\n      : [];\n\n  return (\n    <Suggest<SearchOption>\n      itemRenderer={renderOption}\n      items={options}\n      onQueryChange={callback}\n      onItemSelect={({ item }) => setSelected(item)}\n      noResults={\n        <MenuItem\n          disabled\n          text={\n            shouldSearch\n              ? searchQuery.loading\n                ? 'Loading...'\n                : 'Got nothing :('\n              : 'Type more to start seach'\n          }\n        />\n      }\n      initialContent={<MenuItem disabled text=\"Type more to start seach\" />}\n      inputValueRenderer={item => item.label}\n      popoverProps={{\n        minimal: true,\n        fill: true,\n        usePortal: false,\n        position: PopoverPosition.BOTTOM,\n      }}\n      inputProps={{\n        rightElement: searchQuery?.loading ? <Spinner size={16} /> : undefined,\n      }}\n      className=\"select-popover-centered\"\n    />\n  );\n};\n\nexport function SearchPage() {\n  const history = useHistory();\n\n  return (\n    <Search\n      setSelected={({ type, id }) => {\n        history.push(`/${type?.toLowerCase()}/${id}`);\n      }}\n    />\n  );\n}\n\nexport default Search;\n","import { useCallback, useRef, useEffect } from 'react';\n\nexport type ThrottleOptions = {\n  leading?: boolean;\n};\n\nexport type ThrottleReturnResult<T extends any[]> = {\n  callback: (...args: T) => void;\n  cancel: () => void;\n  callPending: () => void;\n};\n\nexport default function useThrottle<T extends any[]>(\n  fn: (...args: T) => any,\n  wait = 0,\n  options?: ThrottleOptions,\n): ThrottleReturnResult<T> {\n  const timer = useRef<ReturnType<typeof setTimeout>>();\n  const fnRef = useRef(fn);\n  const optionsRef = useRef<ThrottleOptions | undefined>(options);\n  const currentArgs = useRef<any>();\n\n  fnRef.current = fn;\n  optionsRef.current = options;\n\n  const cancel = useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = undefined;\n  }, []);\n\n  const callback = useCallback(\n    (...args: T) => {\n      currentArgs.current = args;\n\n      if (!timer.current) {\n        if (optionsRef.current?.leading) {\n          fnRef.current(...currentArgs.current);\n\n          timer.current = setTimeout(() => {\n            timer.current = undefined;\n          }, wait);\n        } else {\n          timer.current = setTimeout(() => {\n            fnRef.current(...currentArgs.current);\n            timer.current = undefined;\n          }, wait);\n        }\n      }\n    },\n    [wait],\n  );\n\n  const callPending = useCallback(() => {\n    if (!timer) {\n      return;\n    }\n\n    fnRef.current(...currentArgs.current);\n    cancel();\n  }, [cancel]);\n\n  useEffect(() => cancel, [cancel]);\n\n  return {\n    callback,\n    cancel,\n    callPending,\n  };\n}\n","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport {\n  Navbar,\n  Alignment,\n  Button,\n  Popover,\n  Menu,\n  Position,\n  MenuItem,\n} from '@blueprintjs/core';\n\nimport { Logo } from './Logo';\nimport { SearchPage } from './Search';\nimport { useLogoutMutation, useAuthQuery } from '../graphql';\n\nexport function UserBlock() {\n  const [setAuth] = useLogoutMutation();\n  const { data } = useAuthQuery();\n\n  if (!data?.auth) {\n    return (\n      <Link to={`/login`}>\n        <Button minimal icon=\"user\">\n          Login\n        </Button>\n      </Link>\n    );\n  }\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <Link to={`/profile/${data.auth.name}`}>\n            <MenuItem tagName=\"span\" text={'Profile'} />\n          </Link>\n          <Link to=\"/settings\">\n            <Button minimal>Settings</Button>\n          </Link>\n          <MenuItem tagName=\"span\" text={'Logout'} onClick={() => setAuth()} />\n        </Menu>\n      }\n      position={Position.BOTTOM}\n    >\n      {data.auth.name}\n    </Popover>\n  );\n}\n\nexport default function Navigation() {\n  return (\n    <div className=\"navigation-container\">\n      <Navbar fixedToTop>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>\n            <NavLink to=\"/\">\n              <Logo />\n            </NavLink>\n          </Navbar.Heading>\n          <Navbar.Divider />\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <SearchPage />\n          <Navbar.Divider />\n          <UserBlock />\n        </Navbar.Group>\n      </Navbar>\n    </div>\n  );\n}\n","const storagePrefix = 'seenit-web-';\n\nexport function getStorageValue<T = object>(key: string) {\n  const item = window.localStorage.getItem(storagePrefix + key);\n  if (!item) return null;\n\n  try {\n    return JSON.parse(item);\n  } catch {\n    return item;\n  }\n}\n\nexport function updateStorage<T = object | string>(key: string, value: T) {\n  if (!value) return window.localStorage.removeItem(storagePrefix + key);\n\n  return window.localStorage.setItem(\n    storagePrefix + key,\n    typeof value === 'string' ? value : JSON.stringify(value),\n  );\n}\n","import { ApolloCache, gql } from '@apollo/client';\n\nimport {\n  LoginMutation,\n  RegisterMutation,\n  AuthQuery,\n  SettingsDocument,\n  AuthDocument,\n  ManagedSettingsFragment,\n} from '.';\nimport { updateStorage } from '../common/helpers/storage';\n\nexport const setAuthData = <T>(\n  cache: ApolloCache<T>,\n  auth?: LoginMutation['login']['user'] | RegisterMutation['register']['user'],\n  token?: string,\n) => {\n  updateStorage('token', token || null);\n  updateStorage('userData', auth || null);\n\n  cache.writeQuery({\n    query: gql`\n      {\n        auth\n      }\n    `,\n    data: {\n      auth: auth || null,\n    },\n  });\n};\n\nexport const updateUserSettings = <T>(\n  cache: ApolloCache<T>,\n  settings: ManagedSettingsFragment,\n  user = cache.readQuery<AuthQuery>({ query: AuthDocument })?.auth,\n) => {\n  if (!user) return\n\n  updateStorage('userData', {  ...user, settings });\n\n  return cache.writeQuery({\n    query: SettingsDocument,\n    data: {\n      settings,\n    },\n  });\n};\n","import React, { ChangeEvent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { FormGroup, InputGroup, Button, Intent } from '@blueprintjs/core';\nimport { ApolloCache, FetchResult } from '@apollo/client';\n\nimport {\n  useLoginMutation,\n  useRegisterMutation,\n  LoginMutation,\n  RegisterMutation,\n} from '../graphql';\nimport { setAuthData } from '../graphql/helpers';\n\nexport default function Login() {\n  const history = useHistory();\n  const [form, setForm] = React.useState({\n    email: '',\n    password: '',\n    name: '',\n  });\n  const [isLogin, setLogin] = React.useState(true);\n  const mutationParams = {\n    variables: form,\n    // refetchQueries: [\n    //   {\n    //     query: SetAuthDocument,\n    //     variables: {},\n    //   },\n    // ],\n    update: (\n      cache: ApolloCache<LoginMutation | RegisterMutation>,\n      { data }: FetchResult<LoginMutation | RegisterMutation>,\n    ) => {\n      if (!data) return;\n\n      const { token, user } = 'login' in data ? data.login : data.register;\n      setAuthData(cache, user, token);\n      document.dispatchEvent(new CustomEvent('seenit-login'));\n    },\n  };\n\n  const [login] = useLoginMutation(mutationParams);\n  const [register] = useRegisterMutation(mutationParams);\n  const mutationFn = isLogin ? login : register;\n\n  return (\n    <form\n      onSubmit={async event => {\n        event.preventDefault();\n\n        await mutationFn();\n        history.push('/');\n      }}\n    >\n      {!isLogin && (\n        <FormGroup label=\"Name\" labelFor=\"name-input\">\n          <InputGroup\n            id=\"name-input\"\n            large\n            leftIcon=\"user\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              setForm({ ...form, name: event.target.value })\n            }\n            placeholder=\"John Doe\"\n            value={form.name}\n          />\n        </FormGroup>\n      )}\n      <FormGroup label=\"Email\" labelFor=\"email-input\">\n        <InputGroup\n          id=\"email-input\"\n          large\n          type=\"email\"\n          leftIcon=\"envelope\"\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            setForm({ ...form, email: event.target.value })\n          }\n          placeholder=\"you@mail.com\"\n          value={form.email}\n        />\n      </FormGroup>\n      <FormGroup label=\"Password\" labelFor=\"password-input\">\n        <InputGroup\n          id=\"password-input\"\n          large\n          type=\"password\"\n          leftIcon=\"lock\"\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            setForm({ ...form, password: event.target.value })\n          }\n          placeholder=\"Your password\"\n          value={form.password}\n        />\n      </FormGroup>\n\n      <div className=\"flex flex-between\">\n        <Button type=\"submit\" intent={Intent.PRIMARY}>\n          {isLogin ? 'Login' : 'Register'}\n        </Button>\n        <Button type=\"button\" onClick={() => setLogin(!isLogin)}>\n          {isLogin ? 'Need to create an account?' : 'Already have an account?'}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { H1, H2, H3, Button } from '@blueprintjs/core';\n\nimport chromeSvg from './assets/logos/chrome.svg';\nimport vlcSvg from './assets/logos/vlc.svg';\n\nexport default function Home() {\n  return (\n    <div className=\"hero-box\">\n      <H1>Automatically track what you've watched</H1>\n      <H2 className=\"pt-3\">Start tracking</H2>\n      <div className=\"py-4\">\n        <Button large fill className=\"my-4\">\n          <Link to={`/login`}>Join seen it</Link>\n        </Button>\n        <Button large fill className=\"my-4\">\n          <Link to={`/setup`}>Download for your used platforms</Link>\n        </Button>\n      </div>\n      <div>\n        <H3 className=\"pb-2\">Currently works with</H3>\n        <div>\n          <img\n            className=\"mx-3\"\n            style={{ width: 48 }}\n            alt=\"Chrome\"\n            src={chromeSvg}\n          />\n          <img className=\"mx-3\" style={{ height: 48 }} alt=\"VLC\" src={vlcSvg} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport ReactRating from 'react-rating';\n\nexport enum RatingSize {\n  Small = 'small',\n}\n\nexport default function Rating({\n  value,\n  className = '',\n  max = 10,\n  size,\n}: {\n  value: number;\n  className?: string;\n  max?: number;\n  size?: RatingSize;\n}) {\n  const divider = max / 5;\n  const formattedValue = value / divider;\n  const iconSize = size === RatingSize.Small ? 12 : undefined;\n\n  return (\n    <ReactRating\n      readonly\n      className={`rating rating-${size}` + className}\n      initialRating={formattedValue}\n      fractions={2}\n      fullSymbol={\n        <Icon icon={IconNames.STAR} iconSize={iconSize} color=\"gold\" />\n      }\n      emptySymbol={\n        <Icon icon={IconNames.STAR_EMPTY} iconSize={iconSize} color=\"gold\" />\n      }\n    />\n  );\n}\n","import React, { ReactNode } from 'react';\n\nimport useInfiniteScroll from './useInfiniteScroll';\n\nexport default function InfiniteScroll({ children, loadMore, loading, hasMore }: {\n  children: ReactNode\n  loadMore: () => void\n  loading: boolean\n  hasMore: boolean\n}) {\n  const ref = useInfiniteScroll(loadMore, loading, hasMore);\n\n  return (\n    <>\n      {children}\n      {!loading && hasMore && <div ref={ref}>a</div>}\n    </>\n  );\n}\n","import { useRef, useEffect } from 'react';\n\nexport default function useInfiniteScroll(\n  loadMore: () => void,\n  isLoading: boolean,\n  hasMore: boolean,\n  rootMargin = '200px',\n) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (!entry.isIntersecting || isLoading || !hasMore) { return; }\n\n        loadMore();\n      },\n      {\n        rootMargin,\n      },\n    );\n\n    if (ref && ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => observer.disconnect();\n  }, [isLoading, loadMore, rootMargin, hasMore]);\n\n  return ref;\n}","import { WatchesQuery, TvQuery } from '../../graphql';\n\nexport function formatTvString(\n  tvItem: WatchesQuery['watches']['watched'][0]['tvItem'],\n) {\n  if (!tvItem) return null;\n\n  if ('season_number' in tvItem) return `S${tvItem.season_number}`;\n\n  return `S${tvItem.season.season_number}E${tvItem.episode_number}`;\n}\n\nexport const getSeasonEpisode = (\n  seasons: TvQuery['tv']['seasons'],\n  episodeId: string,\n) => {\n  for (let i = 0; i < seasons.length; i = +1) {\n    const episode = seasons[i].episodes.find(({ id }) => id === episodeId);\n\n    if (episode) return episode;\n  }\n};\n","import React, { MouseEvent, useState } from 'react';\nimport { ObservableQueryFields } from '@apollo/client';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { Spring } from 'react-spring/renderprops';\nimport { Card, Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport {\n  useUserQuery,\n  ItemType,\n  Movie,\n  Tv,\n  UserQueryVariables,\n  UserQuery,\n} from '../graphql';\nimport Rating from '../common/Rating';\nimport InfiniteScroll from '../common/InfiniteScroll';\nimport { formatTvString } from '../common/helpers/watched';\n\nconst loadMore = (\n  fetchMore: ObservableQueryFields<UserQuery, UserQueryVariables>['fetchMore'],\n  variables: UserQueryVariables,\n) => () => {\n  return fetchMore({\n    variables,\n    updateQuery: (prev, { fetchMoreResult }) => {\n      if (!fetchMoreResult?.user) return prev;\n\n      const prevWatched = prev.user.watched.watched || [];\n      const newWatched = fetchMoreResult.user.watched.watched || [];\n\n      return {\n        user: {\n          ...fetchMoreResult.user,\n          watched: {\n            ...fetchMoreResult.user.watched,\n            watched: [...prevWatched, ...newWatched],\n          },\n        },\n      };\n    },\n  });\n};\n\nexport default function Profile() {\n  const [selected, setSelected] = useState<any>({\n    style: undefined,\n    targetIndex: -1,\n  });\n\n  const { name } = useParams<{ name: string }>();\n  const history = useHistory();\n  const { loading, data, fetchMore } = useUserQuery({\n    variables: { name },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (!data?.user?.watched) return null;\n\n  const {\n    watched: { hasMore, cursor, watched },\n  } = data.user;\n  const targetItem = watched[selected.targetIndex] || null;\n\n  return (\n    <InfiniteScroll\n      loading={loading}\n      hasMore={hasMore}\n      loadMore={loadMore(fetchMore, { name, cursor })}\n    >\n      <div className=\"grid grid-card\">\n        {watched.map(\n          (\n            { id, item, itemType, rating, review, tvItem, createdAt },\n            index,\n          ) => {\n            if (!item) return null;\n\n            let name: string;\n            if (itemType === ItemType.Movie) {\n              name = (item as Movie).title;\n            } else {\n              name = (item as Tv).name;\n            }\n\n            return (\n              <Card\n                key={id}\n                className=\"card-watched\"\n                onClick={(e: MouseEvent<HTMLDivElement>) => {\n                  const position = e.currentTarget.getBoundingClientRect();\n                  setSelected({\n                    style: {\n                      left: position.left,\n                      top: position.top,\n                      width: position.width,\n                      height: position.height,\n                      position: 'fixed',\n                    },\n                    targetIndex: index,\n                  });\n                }}\n              >\n                <div>\n                  <div style={{ position: 'relative' }}>\n                    <img\n                      width=\"300\"\n                      height=\"200\"\n                      className=\"img-responsive\"\n                      src={`https://image.tmdb.org/t/p/w1280${item.poster_path}`}\n                      style={{ position: 'relative' }}\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className=\"card-watched-footer\">\n                    {rating && <Rating value={rating.value} />}\n                    {review && review.body && (\n                      <Icon icon={IconNames.COMMENT} color=\"gold\" />\n                    )}\n                  </div>\n                  <div className=\"p-3 text-left title\">\n                    <div className=\"flex flex-content-between flex-items-center\">\n                      <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n                        {name}\n                      </strong>\n                      <div>{formatTvString(tvItem)}</div>\n                    </div>\n                    <p className=\"bp3-text-small card-watched-muted\">\n                      {formatDistanceStrict(createdAt, Date.now(), {\n                        addSuffix: true,\n                      })}\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            );\n          },\n        )}\n        {targetItem && (\n          <Spring\n            config={{ velocity: 120, friction: 16, clamp: true }}\n            // config={{ duration: 500, easing: '' }}\n            from={selected.style}\n            to={{\n              left: 0,\n              top: 50,\n              width: window.innerWidth,\n              height: window.innerHeight,\n            }}\n            onRest={() =>\n              history.push(\n                `/movie/${targetItem.item.id}/watched/${targetItem.id}`,\n              )\n            }\n          >\n            {props => (\n              <div style={props}>\n                <img\n                  width=\"300\"\n                  height=\"200\"\n                  className=\"img-responsive\"\n                  src={`https://image.tmdb.org/t/p/w1280${targetItem.item.poster_path}`}\n                  style={{\n                    position: 'relative',\n                    maxHeight: 300,\n                    objectFit: 'cover',\n                  }}\n                  alt=\"\"\n                />\n                <div style={{ height: '100%', backgroundColor: '#0C1821' }} />\n              </div>\n            )}\n          </Spring>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n}\n","import React from 'react';\n\nexport default function Setup() {\n  return (\n    <div>Download and setup the platform</div>\n  )\n}","import React from 'react';\nimport { formatDistanceStrict, format } from 'date-fns';\nimport { Tooltip } from '@blueprintjs/core';\n\nexport type Props = {\n  date: Date | number;\n  baseDate?: Date | number;\n  options?: Parameters<typeof formatDistanceStrict>[2];\n};\n\nexport function RelativeDate({\n  date,\n  baseDate = Date.now(),\n  options = { addSuffix: true },\n}: Props) {\n  return (\n    <Tooltip content={format(date, 'yyyy MMM dd, HH:mm')}>\n      {formatDistanceStrict(date, baseDate, options)}\n    </Tooltip>\n  );\n}\n","import React from 'react';\nimport { Card } from '@blueprintjs/core';\nimport { ItemType, Movie, Tv, Season, Episode } from '../graphql';\nimport { Link } from 'react-router-dom';\nimport { formatTvString } from './helpers/watched';\nimport { RelativeDate } from './RelativeDate';\n\ntype ItemData =\n  | Pick<Movie, 'id' | 'title' | 'poster_path'>\n  | Pick<Tv, 'id' | 'name' | 'poster_path'>;\n\ntype SeasonData = Pick<Season, 'id' | 'season_number'>;\ntype TvItemData =\n  | SeasonData\n  | (Pick<Episode, 'id' | 'episode_number'> & { season: SeasonData });\n\nexport default function Seen({\n  type,\n  item,\n  date,\n  tvItem,\n}: {\n  type: ItemType;\n  item: ItemData;\n  tvItem?: TvItemData;\n  date?: number | Date;\n}) {\n  const name = 'title' in item ? item.title : item.name;\n  const route = type === ItemType.Movie ? 'movie' : 'tv';\n\n  return (\n    <Link to={`/${route}/${item.id}`}>\n      <Card className=\"card-watched\">\n        <div style={{ position: 'relative' }}>\n          <img\n            width=\"300\"\n            height=\"200\"\n            className=\"img-responsive\"\n            src={`https://image.tmdb.org/t/p/w1280${item.poster_path}`}\n            alt={`${name} poster`}\n          />\n        </div>\n        <div className=\"p-3 text-left title\">\n          <div className=\"flex flex-content-between flex-items-center\">\n            <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n              {name}\n            </strong>\n            <div>{formatTvString(tvItem)}</div>\n          </div>\n          {date && (\n            <p className=\"bp3-text-small card-watched-muted\">\n              <RelativeDate date={date} />\n            </p>\n          )}\n        </div>\n      </Card>\n    </Link>\n  );\n}\n","import { SyntheticEvent } from 'react';\n\nexport const preventBubbling = <T extends SyntheticEvent>(\n  cb?: (event: T) => void,\n) => (event: T) => {\n  event.stopPropagation();\n  cb?.(event);\n};\n\nlet container: HTMLElement | undefined;\n\nexport const getAppContainer = () =>\n  container || (container = document.getElementById('app-main') || undefined);\n","export enum DialogQueryParams {\n  EditingAutoTracked = 'editing-auto-tracked',\n  EditingWatched = 'editing-watched',\n}\n","import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\nimport {\n  Dialog,\n  Classes,\n  Button,\n  Icon,\n  IOverlayProps,\n  Intent,\n  MaybeElement,\n  IconName,\n} from '@blueprintjs/core';\nimport { getAppContainer } from './helpers/general';\n\nexport default function BlockingAlert({\n  canEscapeKeyCancel = false,\n  canOutsideClickCancel = false,\n  confirmButtonText = 'Ok',\n  cancelButtonText,\n  onConfirm,\n  onCancel,\n  isLoading = false,\n  className = '',\n  intent,\n  icon,\n  children,\n  ...overlayProps\n}: {\n  isOpen: boolean;\n  canEscapeKeyCancel?: boolean;\n  canOutsideClickCancel?: boolean;\n  confirmButtonText?: string;\n  cancelButtonText?: string;\n  onConfirm: (event: React.MouseEvent) => void;\n  onCancel?: (event?: React.SyntheticEvent) => void;\n  isLoading?: boolean;\n  className?: string;\n  intent?: Intent;\n  icon?: IconName | MaybeElement;\n  children?: ReactNode;\n  overlayProps?: IOverlayProps;\n}) {\n  return (\n    <Dialog\n      {...overlayProps}\n      portalContainer={getAppContainer()}\n      className={classNames(Classes.ALERT, className)}\n      canEscapeKeyClose={canEscapeKeyCancel && !isLoading}\n      canOutsideClickClose={canOutsideClickCancel && !isLoading}\n      onClose={onCancel}\n    >\n      <div className={Classes.ALERT_BODY}>\n        <Icon icon={icon} iconSize={40} intent={intent} />\n        <div className={Classes.ALERT_CONTENTS}>{children}</div>\n      </div>\n      <div className={Classes.ALERT_FOOTER}>\n        <Button\n          intent={intent}\n          text={confirmButtonText}\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n        />\n        {cancelButtonText && (\n          <Button\n            text={cancelButtonText}\n            onClick={onCancel}\n            disabled={isLoading}\n          />\n        )}\n      </div>\n    </Dialog>\n  );\n}\n","import React, { ReactNode } from 'react';\nimport { Intent } from '@blueprintjs/core';\n\nimport BlockingAlert from './BlockingAlert';\n\nexport default function DeleteConfirmation({\n  title,\n  isOpen,\n  isLoading,\n  onCancel,\n  onConfirm,\n}: {\n  title: ReactNode;\n  isOpen: boolean;\n  isLoading?: boolean;\n  onCancel?: () => void;\n  onConfirm: () => void;\n}) {\n  return (\n    <BlockingAlert\n      cancelButtonText=\"Cancel\"\n      confirmButtonText=\"Remove\"\n      icon=\"trash\"\n      intent={Intent.DANGER}\n      isOpen={isOpen || false}\n      isLoading={isLoading}\n      onCancel={onCancel}\n      onConfirm={onConfirm}\n    >\n      {title}\n    </BlockingAlert>\n  );\n}\n","import React from 'react';\nimport {\n  Card,\n  ButtonGroup,\n  Button,\n  NonIdealState,\n  Code,\n  Icon,\n} from '@blueprintjs/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { AutoTrackedListQuery } from '../graphql';\nimport { formatTvString } from '../common/helpers/watched';\nimport { RelativeDate } from '../common/RelativeDate';\nimport { preventBubbling } from '../common/helpers/general';\nimport { DialogQueryParams } from '../common/dialog/query-params';\n\ntype Props = AutoTrackedListQuery['autoTrackedList']['autoTracked'][0] & {\n  isSelected: boolean;\n  onSelect: () => void;\n  onDeselect: () => void;\n  onSave: () => void;\n  onRemove: () => void;\n};\n\nexport function AutoTrackedItem({\n  id,\n  createdAt,\n  meta,\n  item,\n  tvItem,\n  isSelected,\n  onSelect,\n  onDeselect,\n  onSave,\n  onRemove,\n}: Props) {\n  const name = item ? ('title' in item ? item.title : item.name) : '';\n  const location = useLocation();\n  const search = new URLSearchParams(location.search);\n  search.set(DialogQueryParams.EditingAutoTracked, id);\n\n  return (\n    <Card\n      className={`card-watched fill-container ${isSelected ? 'selected' : ''}`}\n      elevation={isSelected ? 4 : undefined}\n      onClick={isSelected ? onDeselect : onSelect}\n    >\n      {item && (\n        <>\n          <div>\n            <img\n              width=\"300\"\n              height=\"200\"\n              className=\"img-responsive\"\n              src={`https://image.tmdb.org/t/p/w342${item.poster_path}`}\n              alt={`${name} poster`}\n            />\n          </div>\n\n          <div className=\"p-3 title\">\n            <div className=\"flex flex-content-between flex-items-center\">\n              <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n                {name}\n              </strong>\n              <div>{formatTvString(tvItem)}</div>\n            </div>\n            {createdAt && (\n              <p className=\"bp3-text-small card-watched-muted\">\n                <RelativeDate date={createdAt} />\n              </p>\n            )}\n          </div>\n        </>\n      )}\n      {!item && (\n        <NonIdealState\n          icon=\"help\"\n          title=\"Couldn't find item\"\n          description={\n            <div className=\"text-left px-2\" style={{ width: '100%' }}>\n              <div className=\"mb-3\">\n                <strong>Here's what we know:</strong>\n              </div>\n              <div className=\"mb-1\">\n                Watched <RelativeDate date={createdAt} />\n              </div>\n              {meta.title && (\n                <div className=\"mb-1\">\n                  <span>Title read as </span>\n                  <Code>{meta.title}</Code>{' '}\n                </div>\n              )}\n              {meta.tvData && (\n                <div className=\"mb-1\">\n                  <span>TV info - </span>\n                  {meta.tvData.season && <span>S{meta.tvData.season}</span>}\n                  {meta.tvData.episode && <span>E{meta.tvData.episode}</span>}\n                </div>\n              )}\n              {meta.provider && (\n                <div className=\"mb-1\">\n                  <span>Tracked on {meta.provider}, from</span>\n                  <br />\n                  {meta.url && (\n                    <Code\n                      className=\"mt-1\"\n                      style={{\n                        display: 'inline-block',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        width: '100%',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {meta.url}\n                    </Code>\n                  )}\n                  {meta.filename && (\n                    <Code\n                      className=\"mt-1\"\n                      style={{\n                        display: 'inline-block',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        width: '100%',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {meta.filename}\n                    </Code>\n                  )}\n                </div>\n              )}\n            </div>\n          }\n        />\n      )}\n      <ButtonGroup fill minimal onClick={preventBubbling()}>\n        {item && (\n          <Button disabled={!item} icon=\"tick\" onClick={onSave}>\n            Save\n          </Button>\n        )}\n        <Link<any>\n          to={{ search: search.toString() }}\n          replace\n          className=\"bp3-button\"\n        >\n          <Icon icon=\"edit\" className=\"mr-2\" />\n          <span>Edit</span>\n        </Link>\n\n        <Button icon=\"trash\" onClick={onRemove}>\n          Remove\n        </Button>\n      </ButtonGroup>\n    </Card>\n  );\n}\n","import { Position, Toaster } from '@blueprintjs/core';\n\nexport const AppToaster = Toaster.create({\n  position: Position.TOP_RIGHT,\n});\n","import React, { useState } from 'react';\nimport { H2, Checkbox, Button, Classes, Icon, Intent } from '@blueprintjs/core';\n\nimport {\n  useUserQuery,\n  useAuthQuery,\n  useWatchesQuery,\n  useAutoTrackedListQuery,\n  useConvertAutoTrackedMutation,\n  useRemoveAutoTrackedMutation,\n} from '../graphql';\nimport Seen from '../common/Seen';\nimport DeleteConfirmation from '../common/DeleteConfirmation';\nimport { AutoTrackedItem } from './AutoTrackedItem';\nimport { AppToaster } from '../common/toaster';\n\nexport default function Dashboard() {\n  const { data: localUser } = useAuthQuery();\n  const userData = localUser?.auth;\n  const { data: watchesData } = useWatchesQuery({\n    variables: {\n      userId: localUser?.auth?.id,\n    },\n  });\n  const { data: autoTrackedData } = useAutoTrackedListQuery({\n    variables: {\n      userId: localUser?.auth?.id || '',\n    },\n  });\n  const { data } = useUserQuery({\n    variables: { id: userData?.id },\n  });\n  const [removeAutoTracked, { loading }] = useRemoveAutoTrackedMutation({\n    refetchQueries: ['AutoTrackedList'],\n  });\n  const [convertAutoTracked] = useConvertAutoTrackedMutation({\n    refetchQueries: ['AutoTrackedList'],\n  });\n\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [pendingRemoval, setPendingRemoval] = useState<{\n    title: React.ReactNode;\n    onConfirm: () => void;\n  } | null>();\n\n  if (!userData) return null;\n  if (!data?.user?.watched) return null;\n\n  return (\n    <>\n      <div>\n        <div>\n          <H2 className=\"pt-4 px-2\">Automatically tracked shows</H2>\n          <div className=\"p-2 flex flex-items-center flex-content-end sticky-below-header\">\n            <Checkbox\n              className=\"m-0 py-2\"\n              checked={\n                selectedIds.length ===\n                autoTrackedData?.autoTrackedList.autoTracked.length\n              }\n              indeterminate={\n                !!selectedIds.length &&\n                selectedIds.length <\n                  (autoTrackedData?.autoTrackedList.autoTracked.length || 0)\n              }\n              label={\n                selectedIds.length\n                  ? `${selectedIds.length} Selected`\n                  : 'Select all'\n              }\n              onChange={() =>\n                setSelectedIds(\n                  selectedIds.length ===\n                    autoTrackedData?.autoTrackedList.autoTracked.length\n                    ? []\n                    : autoTrackedData?.autoTrackedList.autoTracked.map(\n                        ({ id }) => id,\n                      ) || [],\n                )\n              }\n            />\n            <Button\n              small\n              className=\"ml-2\"\n              icon=\"tick\"\n              disabled={!selectedIds.length}\n              onClick={async () => {\n                const ids = selectedIds.filter(id => {\n                  const trackedItem = autoTrackedData?.autoTrackedList.autoTracked.find(\n                    item => item.id === id,\n                  );\n                  return trackedItem && trackedItem.item;\n                });\n                const hasItemlessIds = ids.length !== selectedIds.length;\n\n                await convertAutoTracked({ variables: { ids } });\n                if (hasItemlessIds) {\n                  AppToaster.show({\n                    message: \"Couldn't save items without shows\",\n                    intent: Intent.WARNING,\n                  });\n                }\n                setSelectedIds([]);\n              }}\n            >\n              Save\n            </Button>\n            <Button\n              small\n              className=\"ml-2\"\n              icon=\"trash\"\n              disabled={!selectedIds.length}\n              onClick={() =>\n                setPendingRemoval({\n                  title: (\n                    <p>Are you sure you want to remove the selected items?</p>\n                  ),\n                  onConfirm: async () => {\n                    await removeAutoTracked({\n                      variables: { ids: selectedIds },\n                    });\n                    setSelectedIds([]);\n                    setPendingRemoval(null);\n                  },\n                })\n              }\n            >\n              Remove\n            </Button>\n          </div>\n          <div className=\"grid grid-card\">\n            {autoTrackedData?.autoTrackedList.autoTracked.map(\n              ({ id, createdAt, meta, item, tvItem }, i, arr) => (\n                <div\n                  key={id}\n                  className={Classes.INTENT_PRIMARY}\n                  style={{\n                    position: 'relative',\n                  }}\n                >\n                  {selectedIds.includes(id) && (\n                    <Icon\n                      icon=\"tick-circle\"\n                      intent={Intent.PRIMARY}\n                      iconSize={16}\n                      style={{\n                        position: 'absolute',\n                        left: -8,\n                        top: -8,\n                        zIndex: 1,\n                      }}\n                    />\n                  )}\n                  <AutoTrackedItem\n                    id={id}\n                    createdAt={createdAt}\n                    meta={meta}\n                    item={item}\n                    tvItem={tvItem}\n                    isSelected={selectedIds.includes(id)}\n                    onSelect={() => setSelectedIds([...selectedIds, id])}\n                    onDeselect={() =>\n                      setSelectedIds(selectedIds.filter(sid => sid !== id))\n                    }\n                    onSave={() =>\n                      convertAutoTracked({ variables: { ids: [id] } })\n                    }\n                    onRemove={() =>\n                      setPendingRemoval({\n                        title: (\n                          <p>\n                            Are you sure you want to remove the tracked item?\n                          </p>\n                        ),\n                        onConfirm: async () => {\n                          await removeAutoTracked({ variables: { ids: [id] } });\n                          setPendingRemoval(null);\n                        },\n                      })\n                    }\n                  />\n                </div>\n              ),\n            )}\n          </div>\n        </div>\n        <div className=\"p-4 pb-1\">\n          <H2>Your last seen</H2>\n        </div>\n        <div className=\"grid grid-card\">\n          {watchesData?.watches.watched.map(\n            ({ id, itemType, item, createdAt, tvItem }) => (\n              <Seen\n                key={id}\n                type={itemType}\n                item={item}\n                tvItem={tvItem || undefined}\n                date={createdAt}\n              />\n            ),\n          )}\n        </div>\n      </div>\n      {pendingRemoval && (\n        <DeleteConfirmation\n          isOpen={!!pendingRemoval}\n          isLoading={loading}\n          title={pendingRemoval.title}\n          onConfirm={pendingRemoval.onConfirm}\n          onCancel={() => setPendingRemoval(null)}\n        />\n      )}\n    </>\n  );\n}\n","import { WatchesQuery, MovieQuery, ReviewsQuery } from '.';\n\nexport const mergeWatches = (\n  prev: WatchesQuery,\n  next?: WatchesQuery,\n): WatchesQuery =>\n  next\n    ? {\n        watches: {\n          ...next.watches,\n          watched: [...prev.watches.watched, ...next.watches.watched],\n        },\n      }\n    : prev;\n\nexport const mergeMovie = (prev: MovieQuery, next?: MovieQuery): MovieQuery =>\n  next\n    ? {\n        movie: {\n          ...next.movie,\n          watched: {\n            ...next.movie.watched,\n            watched: [\n              ...prev.movie.watched.watched,\n              ...next.movie.watched.watched,\n            ],\n          },\n        },\n      }\n    : prev;\n\nexport const mergeReviews = (\n  prev: ReviewsQuery,\n  next?: ReviewsQuery,\n): ReviewsQuery =>\n  next\n    ? {\n        reviews: {\n          ...next.reviews,\n          reviews: [...prev.reviews.reviews, ...next.reviews.reviews],\n        },\n      }\n    : prev;\n","import { ObservableQueryFields } from '@apollo/client';\n\nexport const loadMore = <Q extends {}, V extends {}>(\n  fetchMore: ObservableQueryFields<Q, V>['fetchMore'],\n  variables: V,\n  mergeProps: (prev: Q, next?: Q) => Q,\n) => () => {\n  return fetchMore({\n    variables,\n    updateQuery: (prev, { fetchMoreResult }) =>\n      mergeProps(prev, fetchMoreResult),\n  });\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { User } from '../graphql';\nimport Rating from '../common/Rating';\n\nexport default function Review({\n  review,\n  user,\n  rating,\n  createdAt,\n}: {\n  review: string;\n  user: Pick<User, 'id' | 'name'>;\n  rating?: number;\n  createdAt: Date | number;\n}) {\n  return (\n    <div>\n      <Link to={`/profile/${user.name}`}>{user.name}</Link>\n      &nbsp;\n      <span className=\"bp3-text-muted\">\n        {formatDistanceStrict(createdAt, Date.now(), { addSuffix: true })}\n      </span>\n      {rating && <Rating className=\"ml-2\" value={rating} />}\n      <p>{review}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Spinner, Button, NonIdealState } from '@blueprintjs/core';\n\nimport { useReviewsQuery } from '../graphql';\nimport { mergeReviews } from '../graphql/fetchMore';\nimport { loadMore } from '../common/helpers/graphql';\nimport Review from './Review';\n\nexport default function ReviewList({\n  itemId,\n  tvItemId,\n}: {\n  itemId: string;\n  tvItemId?: string;\n}) {\n  const reviewsVariables = {\n    itemId,\n    tvItemId,\n  };\n\n  const { data: reviewsData, loading, fetchMore } = useReviewsQuery({\n    variables: reviewsVariables,\n  });\n\n  if (loading) return <Spinner />;\n\n  // TODO: most likely error, handle it\n  if (!reviewsData?.reviews) return null;\n\n  const { reviews, hasMore, cursor } = reviewsData?.reviews;\n\n  if (!reviews.length) {\n    return <NonIdealState icon=\"chat\" title=\"No reviews yet\" />;\n  }\n\n  return (\n    <>\n      {reviews.map(({ id, body, watched: { rating, user, createdAt } }) => (\n        <Review\n          key={id}\n          review={body}\n          user={user}\n          createdAt={createdAt}\n          rating={rating?.value}\n        />\n      ))}\n      {hasMore && (\n        <Button\n          text=\"Show more\"\n          onClick={loadMore(\n            fetchMore,\n            {\n              ...reviewsVariables,\n              cursor,\n            },\n            mergeReviews,\n          )}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Card,\n  Elevation,\n  ButtonGroup,\n  Button,\n  Intent,\n} from '@blueprintjs/core';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { WatchesQuery, useRemoveWatchedMutation } from '../graphql';\nimport Rating from '../common/Rating';\nimport { formatTvString } from '../common/helpers/watched';\nimport BlockingAlert from '../common/BlockingAlert';\n\nexport default function Watched({\n  watched,\n  onClickEdit,\n  className,\n}: {\n  watched: WatchesQuery['watches']['watched'][0];\n  onClickEdit: (watched: WatchesQuery['watches']['watched'][0]) => void;\n  className?: string;\n}) {\n  const { id, createdAt, rating, review, tvItem } = watched;\n  const [deleteAlert, setDeleteAlert] = useState<{\n    dialogOpen: boolean;\n    isLoading: boolean;\n  }>({\n    dialogOpen: false,\n    isLoading: false,\n  });\n\n  const [\n    removeWatched,\n    { loading: loadingRemoveWatched },\n  ] = useRemoveWatchedMutation({\n    update: (cache, { data: removedWatched }) => {\n      const removedId = removedWatched?.removeWatched;\n      const dataId = cache.identify({\n        id: removedId,\n        __typename: 'Watched',\n      });\n\n      if (!removedId || !dataId) return;\n\n      cache.evict({ id: dataId });\n      cache.gc();\n    },\n  });\n\n  return (\n    <Card elevation={Elevation.ONE} className={className}>\n      <div className=\"flex flex-content-between flex-items-center mb-2\">\n        <div>\n          <span>Seen </span>\n          {tvItem && <span>{formatTvString(tvItem)} </span>}\n          <span className=\"bp3-text-muted mr-2\">\n            {formatDistanceStrict(createdAt, Date.now(), {\n              addSuffix: true,\n            })}\n          </span>\n          {rating && <Rating value={rating.value} />}\n        </div>\n        <ButtonGroup>\n          <Button icon=\"edit\" small onClick={() => onClickEdit(watched)}>\n            Edit\n          </Button>\n\n          <Button\n            small\n            icon=\"trash\"\n            intent={Intent.DANGER}\n            loading={loadingRemoveWatched}\n            onClick={() =>\n              setDeleteAlert({ dialogOpen: true, isLoading: false })\n            }\n          >\n            Remove\n          </Button>\n          <BlockingAlert\n            cancelButtonText=\"Cancel\"\n            confirmButtonText=\"Remove\"\n            icon=\"trash\"\n            intent={Intent.DANGER}\n            isOpen={deleteAlert.dialogOpen}\n            isLoading={deleteAlert.isLoading}\n            onCancel={() =>\n              setDeleteAlert({ dialogOpen: false, isLoading: false })\n            }\n            onConfirm={async () => {\n              if (!deleteAlert.dialogOpen) return;\n\n              setDeleteAlert({ ...deleteAlert, isLoading: true });\n              await removeWatched({\n                variables: { itemId: id },\n              });\n            }}\n          >\n            <p>\n              Are you sure you want to remove this watched entry?\n              <br />\n              <br />\n              <i>\n                This will also remove the associated rating and review if any.\n                Removing cannot be undone.\n              </i>\n            </p>\n          </BlockingAlert>\n        </ButtonGroup>\n      </div>\n      {review && <p>{review.body}</p>}\n      {!review && <p className=\"bp3-text-muted\">No review</p>}\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Spinner, NonIdealState, Button } from '@blueprintjs/core';\nimport { useWatchesQuery, WatchesQuery } from '../graphql';\nimport Watched from './Watched';\nimport { loadMore } from '../common/helpers/graphql';\nimport { mergeWatches } from '../graphql/fetchMore';\n\nexport default function UserWatchedList({\n  itemId,\n  userId,\n  onEdit,\n}: {\n  itemId: string;\n  userId: string;\n  onEdit: (watched: WatchesQuery['watches']['watched'][0]) => void;\n}) {\n  const watchesVariables = {\n    userId,\n    itemId,\n  };\n\n  const { data: userWatched, loading, fetchMore } = useWatchesQuery({\n    variables: watchesVariables,\n    skip: !userId,\n  });\n\n  if (loading) return <Spinner />;\n\n  // TODO: most likely error, handle it\n  if (!userWatched?.watches) return null;\n\n  const { watched, hasMore, cursor } = userWatched.watches;\n\n  if (!watched.length) {\n    return (\n      <NonIdealState\n        icon=\"film\"\n        title=\"Not yet seen\"\n        description=\"Have you seen it? Watch it or track it!\"\n        // action={<Button text=\"Seen it\" />}\n      />\n    );\n  }\n\n  return (\n    <>\n      {watched.map(watched => (\n        <Watched\n          key={watched.id}\n          watched={watched}\n          onClickEdit={watched => onEdit(watched)}\n        />\n      ))}\n      {hasMore && (\n        <Button\n          text=\"Show more\"\n          onClick={loadMore(\n            fetchMore,\n            {\n              ...watchesVariables,\n              cursor,\n            },\n            mergeWatches,\n          )}\n        />\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport ReactRating from 'react-rating';\n\nexport default function RatingInput({\n  value,\n  onChange,\n  className = '',\n}: {\n  value: number;\n  onChange: ReactRating['props']['onChange'];\n  className?: string;\n}) {\n  return (\n    <ReactRating\n      onChange={onChange}\n      className={'rating ' + className}\n      initialRating={value}\n      fractions={2}\n      fullSymbol={\n        <Icon icon={IconNames.STAR} color=\"gold\" iconSize={Icon.SIZE_LARGE} />\n      }\n      emptySymbol={\n        <Icon\n          icon={IconNames.STAR_EMPTY}\n          color=\"gold\"\n          iconSize={Icon.SIZE_LARGE}\n        />\n      }\n    />\n  );\n}\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport { FormGroup, TextArea, Button, Intent } from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\n\nimport RatingInput from './RatingInput';\nimport { WatchedFormItemData, WatchedValues } from './WatchedForm';\n\ninterface Props {\n  item: WatchedFormItemData;\n  values?: WatchedValues;\n  onSubmit: (\n    values: WatchedValues,\n    formActions: FormikHelpers<WatchedValues>,\n  ) => void;\n  isLoading: boolean;\n}\n\nexport default function WatchedMovieForm({\n  item,\n  onSubmit,\n  isLoading,\n  values = { review: '', createdAt: Date.now() },\n}: Props) {\n  return (\n    <React.Fragment>\n      <div className=\"flex p-3\">\n        {item.poster && (\n          <div className=\"pr-3\">\n            <img\n              src={`https://image.tmdb.org/t/p/w185${item.poster}`}\n              alt={`Poster for ${item.title}`}\n              className=\"img-responsive\"\n            />\n          </div>\n        )}\n        <Formik<WatchedValues>\n          enableReinitialize\n          initialValues={values}\n          onSubmit={onSubmit}\n        >\n          {({ values, handleChange, handleSubmit, setFieldValue }) => (\n            <form className=\"flex-grow\" onSubmit={handleSubmit}>\n              <FormGroup label=\"Watched on\" labelFor=\"createdAt\">\n                <DateInput\n                  popoverProps={{\n                    fill: true,\n                  }}\n                  formatDate={date => date.toLocaleString()}\n                  parseDate={str => new Date(str)}\n                  placeholder=\"M/D/YYYY\"\n                  onChange={date => setFieldValue('createdAt', +new Date(date))}\n                  value={new Date(values.createdAt)}\n                />\n              </FormGroup>\n              <FormGroup label=\"Review\" labelFor=\"review\">\n                <TextArea\n                  fill\n                  growVertically\n                  large\n                  name=\"review\"\n                  onChange={handleChange}\n                  value={values.review}\n                  placeholder=\"Any thoughts on what you watched?\"\n                />\n              </FormGroup>\n              <FormGroup label=\"Rating\" labelFor=\"rating\">\n                <div className=\"flex flex-content-between flex-items-center\">\n                  <div>\n                    <RatingInput\n                      value={values.rating || 0}\n                      className=\"seen-rating\"\n                      onChange={value => setFieldValue('rating', value)}\n                    />{' '}\n                    <span>{values.rating || '?'}/5</span>\n                  </div>\n                  {values.rating && (\n                    <Button\n                      icon=\"cross\"\n                      intent={Intent.DANGER}\n                      minimal\n                      small\n                      onClick={() => setFieldValue('rating', undefined)}\n                    />\n                  )}\n                </div>\n              </FormGroup>\n              <Button\n                type=\"submit\"\n                large\n                fill\n                intent={Intent.PRIMARY}\n                loading={isLoading}\n              >\n                Add\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </div>\n    </React.Fragment>\n  );\n}\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport {\n  FormGroup,\n  TextArea,\n  Button,\n  Intent,\n  MenuItem,\n  PopoverPosition,\n  MenuDivider,\n  Tooltip,\n  Spinner,\n} from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\n\nimport { TvQuery, useSeasonsQuery } from '../graphql';\nimport RatingInput from './RatingInput';\nimport { Suggest, ItemRenderer } from '@blueprintjs/select';\nimport { TvData } from '../show/Tv/WatchedTvDialog';\nimport { WatchedValues } from './WatchedForm';\n\ninterface ItemSelection {\n  id: string;\n  name: string;\n  seasonName: string;\n  lastSeasonEpisode: boolean;\n  lastSeason: boolean;\n}\n\nconst itemFilter = (query: string, items: ItemSelection[]) =>\n  items.filter(({ name, seasonName }) =>\n    `${name} ${seasonName}`.toLowerCase().includes(query.toLowerCase()),\n  );\n\nconst getSelectOptions = (seasons: TvQuery['tv']['seasons']) =>\n  seasons.reduce(\n    (\n      acc: Array<ItemSelection>,\n      { season_number: season, episodes },\n      seasonIndex,\n    ) => {\n      acc.push(\n        ...episodes.map(\n          ({ id, name, episode_number: episode }, episodeIndex) => ({\n            id,\n            name,\n            seasonName: season ? `S${season}E${episode}` : '',\n            value: { season, episode },\n            lastSeasonEpisode: episodeIndex + 1 === episodes.length,\n            lastSeason: seasonIndex + 1 === seasons.length,\n          }),\n        ),\n      );\n\n      return acc;\n    },\n    [],\n  );\n\nconst renderEpisode: ItemRenderer<ItemSelection> = (\n  episode,\n  { handleClick, modifiers, query },\n) => {\n  if (!modifiers.matchesPredicate) return null;\n\n  return (\n    <React.Fragment key={episode.id}>\n      <MenuItem\n        active={modifiers.active}\n        text={episode.name}\n        label={episode.seasonName || undefined}\n        onClick={handleClick}\n      />\n      {!query && episode.lastSeasonEpisode && !episode.lastSeason && (\n        <MenuDivider />\n      )}\n    </React.Fragment>\n  );\n};\n\ninterface Props {\n  item: TvData;\n  values?: WatchedValues;\n  onSubmit: (\n    values: WatchedValues,\n    formActions: FormikHelpers<WatchedValues>,\n  ) => void;\n  isLoading: boolean;\n}\n\nexport default function WatchedTvForm({\n  item,\n  onSubmit,\n  isLoading,\n  values = { createdAt: Date.now(), review: '' },\n}: Props) {\n  const { data, loading: isSeasonsLoading } = useSeasonsQuery({\n    variables: {\n      itemId: item.id,\n    },\n    skip: !!item.seasons,\n  });\n  const seasons = item.seasons || data?.seasons || [];\n\n  const options = getSelectOptions(seasons);\n  return (\n    <div className=\"flex p-3\">\n      {item.poster && (\n        <div className=\"pr-3\">\n          <img\n            src={`https://image.tmdb.org/t/p/w185${item.poster}`}\n            alt={`Poster for ${item.title}`}\n            className=\"img-responsive\"\n          />\n        </div>\n      )}\n      <Formik<WatchedValues>\n        enableReinitialize\n        initialValues={values}\n        onSubmit={onSubmit}\n      >\n        {({ values, handleChange, handleSubmit, setFieldValue }) => (\n          <form className=\"flex-grow\" onSubmit={handleSubmit}>\n            <FormGroup label=\"Watched on\" labelFor=\"createdAt\">\n              <DateInput\n                popoverProps={{\n                  fill: true,\n                }}\n                formatDate={date => date.toLocaleString()}\n                parseDate={str => new Date(str)}\n                placeholder=\"M/D/YYYY\"\n                onChange={date => setFieldValue('createdAt', +new Date(date))}\n                value={new Date(values.createdAt)}\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Episode\"\n              labelFor=\"tvItemId\"\n              helperText=\"Empty episode field indicates the whole show\"\n            >\n              <Suggest<ItemSelection>\n                selectedItem={\n                  options.find(({ id }) => id === values.tvItemId) || null\n                }\n                inputValueRenderer={({ name, seasonName }) =>\n                  `${name} - ${seasonName}`\n                }\n                itemRenderer={renderEpisode}\n                items={options}\n                itemListPredicate={itemFilter}\n                onItemSelect={({ id }) => setFieldValue('tvItemId', id)}\n                noResults={<MenuItem disabled text=\"Got nothing :(\" />}\n                popoverProps={{\n                  minimal: true,\n                  fill: true,\n                  usePortal: false,\n                  position: PopoverPosition.BOTTOM,\n                }}\n                disabled={isSeasonsLoading}\n                inputProps={{\n                  placeholder: 'Select an episode',\n                  rightElement: !isSeasonsLoading ? (\n                    <Tooltip content=\"Clear selection\">\n                      <Button\n                        icon=\"cross\"\n                        minimal\n                        onClick={() => setFieldValue('tvItemId', null)}\n                      />\n                    </Tooltip>\n                  ) : (\n                    <Tooltip content=\"Loading season data\">\n                      <Spinner size={16} />\n                    </Tooltip>\n                  ),\n                }}\n                className=\"select-popover-centered\"\n              />\n            </FormGroup>\n            <FormGroup label=\"Review\" labelFor=\"review\">\n              <TextArea\n                fill\n                growVertically\n                large\n                name=\"review\"\n                onChange={handleChange}\n                value={values.review}\n                placeholder=\"Any thoughts on what you watched?\"\n              />\n            </FormGroup>\n            <FormGroup label=\"Rating\" labelFor=\"rating\">\n              <div className=\"flex flex-content-between flex-items-center\">\n                <div>\n                  <RatingInput\n                    value={values.rating || 0}\n                    className=\"seen-rating\"\n                    onChange={value => setFieldValue('rating', value)}\n                  />{' '}\n                  <span>{values.rating || '?'}/5</span>\n                </div>\n                {values.rating && (\n                  <Button\n                    icon=\"cross\"\n                    intent={Intent.DANGER}\n                    minimal\n                    small\n                    onClick={() => setFieldValue('rating', undefined)}\n                  />\n                )}\n              </div>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              large\n              fill\n              intent={Intent.PRIMARY}\n              loading={isLoading}\n            >\n              Add\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport {\n  MovieQuery,\n  TvQuery,\n  WatchesQuery,\n  AutoTrackedMeta,\n  ItemDataFragment,\n} from '../graphql';\nimport WatchedMovieForm from './WatchedMovieForm';\nimport WatchedTvForm from './WatchedTvForm';\nimport { FormikConfig } from 'formik';\n\nexport type EditingWatched =\n  | null\n  | {\n      isEditing: false;\n      autoTracked?: {\n        id: string;\n        createdAt: number;\n        meta: AutoTrackedMeta;\n        tvItemId?: string;\n      };\n    }\n  | { isEditing: true; item: WatchesQuery['watches']['watched'][0] };\n\nexport type WatchedFormItemData = {\n  id: string;\n  title: string;\n  poster: string;\n};\n\nexport type WatchedValues = {\n  createdAt: number;\n  review: string;\n  rating?: number;\n  tvItemId?: string;\n};\n\ntype Props = {\n  editingWatched: EditingWatched;\n  onSubmit: FormikConfig<WatchedValues>['onSubmit'];\n  isLoading: boolean;\n  item: TvQuery['tv'] | MovieQuery['movie'] | ItemDataFragment;\n};\n\nexport default function WatchedForm({\n  editingWatched,\n  onSubmit,\n  isLoading,\n  item,\n}: Props) {\n  const values = editingWatched?.isEditing\n    ? {\n        createdAt: editingWatched.item.createdAt,\n        review: editingWatched.item.review?.body || '',\n        rating: editingWatched.item.rating?.value,\n        tvItemId: editingWatched.item.tvItem?.id,\n      }\n    : editingWatched?.autoTracked\n    ? {\n        createdAt: editingWatched.autoTracked.createdAt,\n        tvItemId: editingWatched.autoTracked.tvItemId,\n        review: '',\n      }\n    : undefined;\n\n  if ('title' in item) {\n    return (\n      <WatchedMovieForm\n        item={{\n          id: item.id,\n          title: item.title,\n          poster: item.poster_path || '',\n        }}\n        values={values}\n        onSubmit={onSubmit}\n        isLoading={isLoading}\n      />\n    );\n  }\n\n  if ('name' in item) {\n    return (\n      <WatchedTvForm\n        item={{\n          id: item.id,\n          title: item.name,\n          poster: item.poster_path || '',\n          seasons: 'seasons' in item ? item.seasons : undefined,\n        }}\n        values={values}\n        onSubmit={onSubmit}\n        isLoading={isLoading}\n      />\n    );\n  }\n\n  return null;\n}\n","import React from 'react';\n\nimport {\n  useAddWatchedMutation,\n  useEditWatchedMutation,\n  TvItemType,\n  TvQuery,\n  MovieQuery,\n  ItemType,\n  ItemDataFragment,\n} from '../graphql';\nimport WatchedForm, { EditingWatched } from '../common/WatchedForm';\n\nexport type Props = {\n  editingWatched: EditingWatched;\n  afterSave: () => void;\n  item: TvQuery['tv'] | MovieQuery['movie'] | ItemDataFragment;\n};\n\nexport default function WatchedMutationForm({\n  editingWatched,\n  afterSave,\n  item,\n}: Props) {\n  const [addWatched, { loading: addWatchedLoading }] = useAddWatchedMutation();\n  const [editWatched, { loading: editWatchedLoading }] = useEditWatchedMutation(\n    {\n      update: cache => {\n        // GC potentially removed content like ratings.\n        // TODO: investigate more how apollo gc is triggered to potentially handle this automatically\n        cache.gc();\n      },\n    },\n  );\n  const isLoading = addWatchedLoading || editWatchedLoading;\n\n  return (\n    <WatchedForm\n      editingWatched={editingWatched}\n      item={item}\n      isLoading={isLoading}\n      onSubmit={async ({ createdAt, rating, review, tvItemId }) => {\n        let query;\n\n        if (editingWatched?.isEditing) {\n          query = editWatched({\n            variables: {\n              createdAt,\n              id: editingWatched.item.id,\n              tvItemId,\n              tvItemType: tvItemId ? TvItemType.Episode : undefined,\n              rating: rating\n                ? {\n                    id: editingWatched.item.rating?.id,\n                    value: rating,\n                  }\n                : undefined,\n              review: review\n                ? {\n                    id: editingWatched.item.review?.id,\n                    body: review,\n                  }\n                : undefined,\n            },\n            // Assuming this can only be accessed from the dashboard so initiating the auto tracked item list refetch\n            refetchQueries:\n              'autoTracked' in editingWatched ? ['AutoTrackedList'] : undefined,\n          });\n        }\n\n        query = addWatched({\n          variables: {\n            createdAt,\n            itemId: item.id,\n            itemType: 'name' in item ? ItemType.Tv : ItemType.Movie,\n            tvItemId,\n            tvItemType: tvItemId ? TvItemType.Episode : undefined,\n            rating: rating ? { value: rating } : undefined,\n            review: review ? { body: review } : undefined,\n            autoTrackedId:\n              editingWatched && 'autoTracked' in editingWatched\n                ? editingWatched.autoTracked?.id\n                : undefined,\n          },\n          refetchQueries: ['AutoTrackedList'],\n        });\n\n        await query;\n        afterSave();\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport { Dialog } from '@blueprintjs/core';\n\nimport { EditingWatched } from '../common/WatchedForm';\nimport WatchedMutationForm from '../common/WatchedMutationForm';\nimport { TvQuery, MovieQuery, ItemDataFragment } from '../graphql';\nimport { getAppContainer } from '../common/helpers/general';\n\nexport default function WatchedDialog({\n  editingWatched,\n  item,\n  onClose,\n}: {\n  editingWatched: EditingWatched;\n  item: TvQuery['tv'] | MovieQuery['movie'] | ItemDataFragment;\n  onClose: () => void;\n}) {\n  const name = 'name' in item ? item.name : item.title;\n\n  return (\n    <Dialog\n      className=\"fluid-dialog\"\n      title={`Seen ${name}`}\n      canOutsideClickClose={false}\n      onClose={onClose}\n      isOpen={!!editingWatched}\n      portalContainer={getAppContainer()}\n      lazy\n    >\n      <WatchedMutationForm\n        editingWatched={editingWatched}\n        item={item}\n        afterSave={onClose}\n      />\n    </Dialog>\n  );\n}\n","import React, { useState } from 'react';\nimport { useParams, RouteComponentProps } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { Button, Intent, H1, H2 } from '@blueprintjs/core';\n\nimport { useMovieQuery, useAuthQuery } from '../../graphql';\nimport Rating from '../../common/Rating';\nimport { EditingWatched } from '../../common/WatchedForm';\nimport ReviewList from '../ReviewList';\nimport UserWatchedList from '../UserWatchedList';\nimport WatchedDialog from '../WatchedDialog';\n\ntype MovieRouteParams = {\n  id: string;\n};\n\nexport default function Movie({\n  match,\n}: RouteComponentProps<MovieRouteParams>) {\n  const [editingWatched, setEditingWatched] = useState<EditingWatched>(null);\n\n  const { id } = useParams<MovieRouteParams>();\n\n  const { data: localUser } = useAuthQuery();\n  const { data } = useMovieQuery({\n    variables: {\n      id,\n    },\n    returnPartialData: true,\n  });\n  if (!data?.movie) return null;\n\n  const {\n    title,\n    overview,\n    poster_path,\n    vote_count,\n    vote_average,\n    release_date,\n  } = data.movie;\n  const rating = vote_count > 100 ? vote_average : null;\n\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <img\n          width=\"300\"\n          height=\"200\"\n          className=\"img-responsive\"\n          src={`https://image.tmdb.org/t/p/w1280${poster_path}`}\n          style={{\n            position: 'relative',\n            maxHeight: '300px',\n            objectFit: 'cover',\n          }}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"p-3\">\n        <H1>{title}</H1>\n        {rating && <Rating value={rating} />}\n        {release_date && <p>{format(new Date(release_date), 'yyyy')}</p>}\n        <p>{overview}</p>\n        {localUser?.auth && (\n          <Button\n            intent={Intent.PRIMARY}\n            large\n            onClick={() => setEditingWatched({ isEditing: false })}\n          >\n            Seen it\n          </Button>\n        )}\n\n        {localUser?.auth?.id && (\n          <div>\n            <H2>Your latest tracked</H2>\n            <UserWatchedList\n              itemId={id}\n              userId={localUser.auth.id}\n              onEdit={item => setEditingWatched({ isEditing: true, item })}\n            />\n          </div>\n        )}\n\n        <div>\n          <H2>Latest reviews</H2>\n          <ReviewList itemId={id} />\n        </div>\n\n        <WatchedDialog\n          item={data.movie}\n          editingWatched={editingWatched}\n          onClose={() => setEditingWatched(null)}\n        />\n      </div>\n    </>\n  );\n}\n","import React, { forwardRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, H3, Button, H2 } from '@blueprintjs/core';\nimport { format } from 'date-fns';\n\nimport { TvQuery } from '../../graphql';\nimport Rating from '../../common/Rating';\nimport ReviewList from '../ReviewList';\n\nexport default forwardRef(\n  (\n    {\n      episode: {\n        id,\n        episode_number,\n        name,\n        air_date,\n        overview,\n        vote_average,\n        vote_count,\n      },\n      tvId,\n    }: {\n      episode: TvQuery['tv']['seasons'][0]['episodes'][0];\n      tvId: string;\n    },\n    ref,\n  ) => {\n    const rating = vote_count > 1 ? vote_average : null;\n    return (\n      <div ref={ref as any}>\n        <Link to=\"../\">\n          <Button fill large icon=\"chevron-left\">\n            Back to overview\n          </Button>\n        </Link>\n        <Card>\n          <div className=\"flex flex-content-between mb-3\">\n            <div>\n              <H3 className=\"mb-0\">\n                {episode_number} {name}\n              </H3>\n              {rating && <Rating value={rating} />}\n            </div>\n            {air_date && <div>{format(+air_date, 'do MMM yyyy')}</div>}\n          </div>\n          <p>{overview}</p>\n        </Card>\n        <div>\n          <H2>Latest reviews</H2>\n          <ReviewList itemId={tvId} tvItemId={id} />\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { useState } from 'react';\nimport { Card, H3, Divider, Collapse, Button, Text } from '@blueprintjs/core';\nimport { format } from 'date-fns';\n\nimport { TvQuery } from '../../graphql';\nimport { Link } from 'react-router-dom';\n\ntype SeasonType = TvQuery['tv']['seasons'][0];\n\ntype SeasonProps = {\n  season: SeasonType;\n  tvId: string;\n  expanded?: boolean;\n};\n\nexport default function Season({ season, expanded = false }: SeasonProps) {\n  const [isExpanded, setIsExpanded] = useState<boolean>(expanded);\n\n  return (\n    <Card key={season.id} className=\"mb-2\">\n      <div className=\"flex\">\n        <img\n          className=\"img-responsive\"\n          style={{ maxWidth: 100, objectFit: 'contain' }}\n          width=\"300\"\n          height=\"200\"\n          src={`https://image.tmdb.org/t/p/w780${season.poster_path}`}\n          alt={`Season ${season.id} poster`}\n        />\n        <div className=\"w-100 pl-3\">\n          <div className=\"mb-3 flex flex-content-between flex-items-center\">\n            <H3 className=\"mb-0\">{season.name}</H3>\n            {season.air_date && <div>{format(+season.air_date, 'yyyy')}</div>}\n          </div>\n          <p>{season.overview}</p>\n        </div>\n      </div>\n      <Divider className=\"my-3\" />\n      <Collapse isOpen={isExpanded}>\n        <H3>Episodes</H3>\n        <div>\n          {season.episodes.map((episode, i) => (\n            <div key={episode.id} className=\"flex mb-3\">\n              <div className=\"pr-3 text-center\" style={{ width: '32px' }}>\n                <Text ellipsize>{episode.episode_number}</Text>\n              </div>\n              <div className=\"w-100\">\n                <div className=\"pb-2 flex flex-content-between\">\n                  <div>\n                    <strong>{episode.name}</strong>\n                  </div>\n                  <div className=\"pl-3\">\n                    {episode.air_date && (\n                      <Text ellipsize>\n                        {format(+episode.air_date, 'do MMM yyyy')}\n                      </Text>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <p>{episode.overview}</p>\n                  <Link\n                    to={({ pathname }) =>\n                      `${pathname.replace(/\\/$/, '')}/episode/${episode.id}`\n                    }\n                  >\n                    <Button>View reviews</Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Collapse>\n      <Button\n        fill\n        minimal\n        icon={isExpanded ? 'collapse-all' : 'expand-all'}\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        {isExpanded ? 'Collapse' : 'Expand'}\n      </Button>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { H2 } from '@blueprintjs/core';\n\nimport { TvQuery } from '../../graphql';\nimport Season from './Season';\nimport ReviewList from '../ReviewList';\nimport UserWatchedList from '../UserWatchedList';\n\nexport default function TvOverview({\n  tv,\n  itemId,\n  userId,\n  onEditWatched,\n}: {\n  tv: TvQuery['tv'];\n  itemId: string;\n  userId?: string;\n  onEditWatched: (watched: any) => void;\n}) {\n  return (\n    <>\n      {userId && (\n        <div>\n          <H2>Your latest tracked</H2>\n\n          <UserWatchedList\n            itemId={itemId}\n            userId={userId}\n            onEdit={onEditWatched}\n          />\n        </div>\n      )}\n      <div>\n        <H2>Seasons</H2>\n        {tv.seasons.map(season => (\n          <Season key={season.id} season={season} tvId={itemId} />\n        ))}\n      </div>\n      <div>\n        <H2>Latest reviews</H2>\n        <ReviewList itemId={itemId} />\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { Dialog } from '@blueprintjs/core';\n\nimport {\n  WatchesQuery,\n  useAddWatchedMutation,\n  useEditWatchedMutation,\n  TvItemType,\n  ItemType,\n  TvQuery,\n} from '../../graphql';\nimport WatchedTvForm from '../../common/WatchedTvForm';\nimport { getAppContainer } from '../../common/helpers/general';\n\nexport type EditingWatched =\n  | null\n  | {\n      isEditing: false;\n      autoTracked?: { id: string; createdAt: number; tvItemId?: string };\n    }\n  | { isEditing: true; item: WatchesQuery['watches']['watched'][0] };\n\nexport type TvData = {\n  id: string;\n  title: string;\n  poster: string;\n  seasons?: TvQuery['tv']['seasons'];\n};\n\nexport default function WatchedTvDialog({\n  tv,\n  editingWatched,\n  onClose,\n}: {\n  tv: TvData;\n  editingWatched: EditingWatched;\n  onClose: () => void;\n}) {\n  const [addWatched, addWatchedVariables] = useAddWatchedMutation();\n  const [editWatched] = useEditWatchedMutation({\n    update: cache => {\n      // GC potentially removed content like ratings.\n      // TODO: investigate more how apollo gc is triggered to potentially handle this automatically\n      cache.gc();\n    },\n  });\n\n  return (\n    <Dialog\n      className=\"fluid-dialog\"\n      title={`Seen ${tv.title}`}\n      canOutsideClickClose={false}\n      onClose={onClose}\n      isOpen={!!editingWatched}\n      lazy\n      portalContainer={getAppContainer()}\n    >\n      <WatchedTvForm\n        item={tv}\n        values={\n          editingWatched?.isEditing\n            ? {\n                createdAt: editingWatched.item.createdAt,\n                review: editingWatched.item.review?.body || '',\n                rating: editingWatched.item.rating?.value,\n                tvItemId: editingWatched.item.tvItem?.id,\n              }\n            : editingWatched?.autoTracked\n            ? {\n                createdAt: editingWatched.autoTracked.createdAt,\n                tvItemId: editingWatched.autoTracked.tvItemId,\n                review: '',\n              }\n            : undefined\n        }\n        isLoading={addWatchedVariables.loading}\n        onSubmit={async ({ createdAt, rating, review, tvItemId }) => {\n          let query;\n\n          if (editingWatched?.isEditing) {\n            query = editWatched({\n              variables: {\n                createdAt,\n                id: editingWatched.item.id,\n                tvItemId,\n                tvItemType: tvItemId ? TvItemType.Episode : undefined,\n                rating: rating\n                  ? {\n                      id: editingWatched.item.rating?.id,\n                      value: rating,\n                    }\n                  : undefined,\n                review: review\n                  ? {\n                      id: editingWatched.item.review?.id,\n                      body: review,\n                    }\n                  : undefined,\n              },\n            });\n          }\n\n          query = addWatched({\n            variables: {\n              createdAt,\n              itemId: tv.id,\n              itemType: ItemType.Tv,\n              tvItemId,\n              tvItemType: tvItemId ? TvItemType.Episode : undefined,\n              rating: rating ? { value: rating } : undefined,\n              review: review ? { body: review } : undefined,\n              autoTrackedId:\n                editingWatched && 'autoTracked' in editingWatched\n                  ? editingWatched.autoTracked?.id\n                  : undefined,\n            },\n          });\n\n          await query;\n          onClose();\n        }}\n      />\n    </Dialog>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  useParams,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport { Intent, Button, H1 } from '@blueprintjs/core';\nimport { format } from 'date-fns';\n\nimport { useTvQuery, useAuthQuery } from '../../graphql';\nimport Rating from '../../common/Rating';\nimport { getSeasonEpisode } from '../../common/helpers/watched';\nimport EpisodeDetails from './EpisodeDetails';\nimport TvOverview from './TvOverview';\nimport WatchedTvDialog, { EditingWatched } from './WatchedTvDialog';\n\ntype TvRouteParams = {\n  id: string;\n};\n\nexport default function Tv({ match }: RouteComponentProps<TvRouteParams>) {\n  const [editingWatched, setEditingWatched] = useState<EditingWatched>(null);\n\n  const { id } = useParams<TvRouteParams>();\n\n  const { data: localUser } = useAuthQuery();\n  const { data } = useTvQuery({\n    variables: {\n      id,\n    },\n  });\n\n  if (!data?.tv) return null;\n\n  const {\n    name,\n    overview,\n    first_air_date,\n    vote_count,\n    vote_average,\n    poster_path,\n    seasons,\n  } = data.tv;\n  const rating = vote_count > 100 ? vote_average : null;\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <img\n          width=\"300\"\n          height=\"200\"\n          className=\"img-responsive\"\n          src={`https://image.tmdb.org/t/p/w1280${poster_path}`}\n          style={{\n            position: 'relative',\n            maxHeight: '300px',\n            objectFit: 'cover',\n          }}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"p-3\">\n        <H1>{name}</H1>\n        {rating && <Rating value={rating} />}\n        {first_air_date && <p>{format(new Date(first_air_date), 'yyyy')}</p>}\n        <p>{overview}</p>\n        {localUser?.auth && (\n          <Button\n            intent={Intent.PRIMARY}\n            large\n            onClick={() => setEditingWatched({ isEditing: false })}\n          >\n            Seen it\n          </Button>\n        )}\n        <Switch>\n          <Route\n            path={`${match.path}/episode/:episodeId`}\n            render={({ match }) => {\n              const episode = getSeasonEpisode(seasons, match.params.episodeId);\n\n              if (!episode) return null;\n\n              return episode && <EpisodeDetails tvId={id} episode={episode} />;\n            }}\n          />\n          <Route\n            path={`${match.path}`}\n            render={({ match }) => {\n              return (\n                <TvOverview\n                  tv={data.tv}\n                  userId={localUser?.auth?.id}\n                  itemId={id}\n                  onEditWatched={item =>\n                    setEditingWatched({ isEditing: true, item })\n                  }\n                />\n              );\n            }}\n          />\n        </Switch>\n        <WatchedTvDialog\n          tv={{\n            id: data.tv.id,\n            title: name,\n            poster: data.tv.poster_path || '',\n            seasons,\n          }}\n          editingWatched={editingWatched}\n          onClose={() => setEditingWatched(null)}\n        />\n      </div>\n    </>\n  );\n}\n","import * as React from 'react';\nimport {\n  InputGroup,\n  Button,\n  FormGroup,\n  Intent,\n  Callout,\n  Colors,\n} from '@blueprintjs/core';\n\nconst inputRegex = new RegExp(\n  '^(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:\\\\*\\\\.?)?(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+((?:\\\\*)|(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)))(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$',\n  'i',\n);\n\nfunction submitItem(\n  value: string,\n  list: string[],\n  setValue: React.Dispatch<React.SetStateAction<string>>,\n  updateList: (value: string[]) => void,\n  setError: React.Dispatch<React.SetStateAction<string>>,\n  hasClashing: boolean,\n) {\n  if (!value || !inputRegex.test(value)) {\n    setError('Invalid address');\n    return;\n  }\n  if (hasClashing) {\n    setError('This address is already covered.');\n    return;\n  }\n\n  const regexVal = `^${value\n    .replace(/[.+?^${}()/|[\\]\\\\]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .toLowerCase()}`;\n  // TODO: consider one upping this by also seeing if it's already negated by some rule.\n  if (list.includes(regexVal)) {\n    setError('This address is already in the list.');\n    return;\n  }\n  updateList([...list, regexVal]);\n  setValue('');\n}\n\ninterface BlacklistProps {\n  id?: string;\n  list: string[];\n  updateList: (value: string[]) => void;\n  helperTextPrefix?: React.ReactNode;\n}\n\ninterface ListItem {\n  matches: boolean;\n  display: string;\n}\n\nconst Blacklist = ({\n  id,\n  list,\n  updateList,\n  helperTextPrefix,\n}: BlacklistProps) => {\n  const [input, setInput] = React.useState('');\n  const [error, setError] = React.useState<string>('');\n  const { list: cleanList, hasClashing } = list.reduce(\n    (acc: { list: ListItem[]; hasClashing: boolean }, item) => {\n      const matches = !!input && new RegExp(item, 'i').test(input);\n      acc.hasClashing = acc.hasClashing || !!matches;\n      acc.list.push({\n        matches,\n        display: item.replace(/\\^|\\.(\\*)|\\\\/g, '$1'),\n      });\n\n      return acc;\n    },\n    { list: [], hasClashing: false },\n  );\n\n  return (\n    <React.Fragment>\n      <FormGroup\n        label=\"Blacklisted sites\"\n        labelFor=\"blacklist-input\"\n        helperText={\n          <>\n            {helperTextPrefix}\n            <span>\n              Supports basic wildcards, some supported examples:\n              <br />\n              youtube.*\n              <br />\n              *.google.com/video/*\n              <br />\n              netflix.com/watch/80186674\n            </span>\n          </>\n        }\n      >\n        <InputGroup\n          id={id}\n          value={input}\n          intent={error ? Intent.DANGER : Intent.NONE}\n          placeholder=\"facebook.com/video/*\"\n          onChange={({ currentTarget }: React.FormEvent<HTMLInputElement>) => {\n            setInput(currentTarget.value);\n            setError('');\n          }}\n          onKeyPress={event =>\n            event.key === 'Enter'\n              ? submitItem(\n                  (event.target as HTMLInputElement).value,\n                  list,\n                  setInput,\n                  updateList,\n                  setError,\n                  hasClashing,\n                )\n              : null\n          }\n          rightElement={\n            <Button\n              onClick={() =>\n                submitItem(\n                  input,\n                  list,\n                  setInput,\n                  updateList,\n                  setError,\n                  hasClashing,\n                )\n              }\n              icon=\"add\"\n              minimal\n            />\n          }\n        />\n        {error ? <Callout intent={Intent.DANGER}>{error}</Callout> : null}\n      </FormGroup>\n      <ul>\n        {cleanList.map((item, i) => (\n          <li\n            key={item.display}\n            style={{ color: item.matches ? Colors.RED1 : 'inherit' }}\n          >\n            {item.display}\n            <Button\n              icon=\"delete\"\n              intent={item.matches ? Intent.DANGER : Intent.NONE}\n              minimal\n              onClick={() => updateList(list.filter(val => val !== list[i]))}\n            />\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n};\n\nexport default Blacklist;\n","import React from 'react';\nimport {\n  Card,\n  ButtonGroup,\n  Button,\n  NonIdealState,\n  Code,\n  Icon,\n} from '@blueprintjs/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { ImportLetterboxdQuery } from '../graphql';\nimport { formatTvString } from '../common/helpers/watched';\nimport { RelativeDate } from '../common/RelativeDate';\nimport { preventBubbling } from '../common/helpers/general';\nimport Rating, { RatingSize } from '../common/Rating';\n\ntype Props = ImportLetterboxdQuery['importLetterboxd'][0] & {\n  isSelected: boolean;\n  onSelect: () => void;\n  onDeselect: () => void;\n  onSave: () => void;\n  onRemove: () => void;\n};\n\nexport function ImportedItem({\n  imported,\n  original,\n  isSelected,\n  onSelect,\n  onDeselect,\n  onSave,\n  onRemove,\n}: Props) {\n  let item: any;\n  let tvItem: any;\n  const location = useLocation();\n  const search = new URLSearchParams(location.search);\n  // search.set(DialogQueryParams.EditingAutoTracked, id);\n\n  if (imported) {\n    imported = {\n      ...imported,\n      review: {\n        body: 'laba diena su vistiena',\n      },\n    };\n  }\n\n  return (\n    <Card\n      className={`card-watched fill-container ${isSelected ? 'selected' : ''}`}\n      elevation={isSelected ? 4 : undefined}\n      onClick={isSelected ? onDeselect : onSelect}\n    >\n      {imported && (\n        <>\n          <div style={{ position: 'relative' }}>\n            <img\n              width=\"300\"\n              height=\"200\"\n              className=\"img-responsive\"\n              src={`https://image.tmdb.org/t/p/w342${imported.item.poster_path}`}\n              alt={`${imported.item.title} poster`}\n            />\n            <div className=\"item-text-overlay\">\n              <div className=\"item-text-overlay-top p-3 pb-4\">\n                <div className=\"flex flex-content-between flex-items-center\">\n                  <strong className=\"bp3-text-large bp3-text-overflow-ellipsis pr-2\">\n                    {imported.item.title}\n                  </strong>\n                  <div>{formatTvString(tvItem) || 'S02E13'}</div>\n                </div>\n                <div className=\"flex flex-content-between\">\n                  <div className=\"bp3-text-small card-watched-muted\">\n                    <RelativeDate date={imported.createdAt} />\n                  </div>\n                  {imported.rating && (\n                    <Rating\n                      value={imported.rating.value * 2}\n                      size={RatingSize.Small}\n                    />\n                  )}\n                </div>\n              </div>\n              {imported.review && (\n                <div className=\"item-text-overlay-bottom p-3 pt-4\">\n                  <div className=\"text-ellipsis\">\n                    <Icon icon=\"comment\" className=\"pr-2\" />\n                    {imported.review.body}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n      {!imported && (\n        <NonIdealState\n          icon=\"help\"\n          title=\"Couldn't match item\"\n          description={\n            <div className=\"text-left px-2\" style={{ width: '100%' }}>\n              <div className=\"mb-3\">\n                <strong>Here's what we know:</strong>\n              </div>\n              <div className=\"mb-1\">\n                {/* Watched <RelativeDate date={watchedDate || date} /> */}\n              </div>\n              {/* {meta.title && (\n                <div className=\"mb-1\">\n                  <span>Title read as </span>\n                  <Code>{meta.title}</Code>{' '}\n                </div>\n              )} */}\n              {/* {meta.tvData && (\n                <div className=\"mb-1\">\n                  <span>TV info - </span>\n                  {meta.tvData.season && <span>S{meta.tvData.season}</span>}\n                  {meta.tvData.episode && <span>E{meta.tvData.episode}</span>}\n                </div>\n              )} */}\n              {/* {meta.provider && (\n                <div className=\"mb-1\">\n                  <span>Tracked on {meta.provider}, from</span>\n                  <br />\n                  {meta.url && (\n                    <Code\n                      className=\"mt-1\"\n                      style={{\n                        display: 'inline-block',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        width: '100%',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {meta.url}\n                    </Code>\n                  )}\n                  {meta.filename && (\n                    <Code\n                      className=\"mt-1\"\n                      style={{\n                        display: 'inline-block',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        width: '100%',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {meta.filename}\n                    </Code>\n                  )}\n                </div>\n              )} */}\n            </div>\n          }\n        />\n      )}\n      <ButtonGroup fill minimal onClick={preventBubbling()}>\n        {item && (\n          <Button disabled={!item} icon=\"tick\" onClick={onSave}>\n            Save\n          </Button>\n        )}\n        <Link<any>\n          to={{ search: search.toString() }}\n          replace\n          className=\"bp3-button\"\n        >\n          <Icon icon=\"edit\" className=\"mr-2\" />\n          <span>Edit</span>\n        </Link>\n\n        <Button icon=\"trash\" onClick={onRemove}>\n          Remove\n        </Button>\n      </ButtonGroup>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Checkbox,\n  Classes,\n  FileInput,\n  FormGroup,\n  Icon,\n  Intent,\n  Tab,\n  Tabs,\n} from '@blueprintjs/core';\nimport { supportEmail } from '../common/constants';\nimport { useImportLetterboxdLazyQuery } from '../graphql';\nimport { ImportedItem } from './ImportedItem';\nimport { useRef } from 'react';\n\nexport default function Import() {\n  const [importActive, setImportActive] = useState(!false);\n  const [targetFile, setTargetFile] = useState<File | null>(null);\n  const sizeLimitExceeded = !!targetFile && targetFile.size > 102400;\n  const [query, result] = useImportLetterboxdLazyQuery({\n    notifyOnNetworkStatusChange: true,\n  });\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\n  const [importState, setImportState] = useState<'initial' | 'selecting'>(\n    'initial',\n  );\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    if (result.data && !result.loading) setImportState('selecting');\n  }, [result.data, result.loading]);\n\n  useEffect(() => {\n    if (!result.data) return;\n\n    setSelectedItems(Array.from(result.data.importLetterboxd.keys()));\n  }, [result.data]);\n\n  function startImport() {\n    return (\n      <>\n        <p>\n          Letterboxd allows{' '}\n          <a\n            href=\"https://letterboxd.com/settings/data/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            exporting your data\n          </a>\n          . The export should download a zip file. Input that file here.\n        </p>\n        <p>\n          Filesize is limited to 100kb. If your file exceeds this limit let us\n          know at <a href={`mailto:${supportEmail}`}>{supportEmail}</a>.\n        </p>\n        <FormGroup\n          intent={sizeLimitExceeded ? Intent.DANGER : undefined}\n          helperText={sizeLimitExceeded && 'Maximum size is 100kb'}\n        >\n          <FileInput\n            hasSelection={!!targetFile}\n            text={targetFile?.name || 'Letterboxd zip file'}\n            inputProps={{\n              accept: '.zip',\n              ref: fileInputRef,\n            }}\n            onInputChange={event => {\n              setTargetFile(\n                (event.target as HTMLInputElement).files?.[0] || null,\n              );\n            }}\n          />\n        </FormGroup>\n        <Button\n          disabled={!targetFile || sizeLimitExceeded}\n          onClick={() => {\n            const variables = { file: targetFile };\n            if (result.refetch) return result.refetch(variables);\n\n            query({ variables });\n          }}\n          loading={result.loading}\n          text=\"Start import\"\n        />\n      </>\n    );\n  }\n\n  function selectImport() {\n    return (\n      <>\n        <p>\n          Successfully read your import. You can edit the items before saving.\n        </p>\n        <div className=\"p-2 sticky-below-header flex flex-items-center\">\n          <Button\n            icon=\"chevron-left\"\n            text=\"Cancel\"\n            small\n            className=\"mr-4\"\n            onClick={() => {\n              setImportState('initial');\n              setTargetFile(null);\n              if (fileInputRef.current) fileInputRef.current.files = null;\n            }}\n          />\n          <div className=\"flex flex-grow flex-content-end flex-items-center\">\n            <Checkbox\n              className=\"m-0 py-2\"\n              checked={\n                selectedItems.length === result.data?.importLetterboxd.length\n              }\n              indeterminate={\n                !!selectedItems.length &&\n                selectedItems.length <\n                  (result.data?.importLetterboxd.length || 0)\n              }\n              label={\n                selectedItems.length\n                  ? `${selectedItems.length} Selected`\n                  : 'Select all'\n              }\n              onChange={() =>\n                setSelectedItems(\n                  selectedItems.length === result.data?.importLetterboxd.length\n                    ? []\n                    : Array.from((result.data?.importLetterboxd || []).keys()),\n                )\n              }\n            />\n            <Button\n              small\n              className=\"ml-2\"\n              icon=\"tick\"\n              disabled={!selectedItems.length}\n              onClick={async () => {\n                // const ids = selectedItems.filter(id => {\n                //   const trackedItem = autoTrackedData?.autoTrackedList.autoTracked.find(\n                //     item => item.id === id,\n                //   );\n                //   return trackedItem && trackedItem.item;\n                // });\n                // const hasItemlessIds = ids.length !== selectedItems.length;\n                // await convertAutoTracked({ variables: { ids } });\n                // if (hasItemlessIds) {\n                //   AppToaster.show({\n                //     message: \"Couldn't save items without shows\",\n                //     intent: Intent.WARNING,\n                //   });\n                // }\n                // setSelectedItems([]);\n              }}\n            >\n              Save\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-card\">\n          {result.data?.importLetterboxd.map(\n            ({ imported, original }, index) => (\n              <div\n                key={index}\n                className={Classes.INTENT_PRIMARY}\n                style={{ position: 'relative' }}\n              >\n                {selectedItems.includes(index) && (\n                  <Icon\n                    icon=\"tick-circle\"\n                    intent={Intent.PRIMARY}\n                    iconSize={16}\n                    style={{\n                      position: 'absolute',\n                      left: -8,\n                      top: -8,\n                      zIndex: 1,\n                    }}\n                  />\n                )}\n                <ImportedItem\n                  imported={imported}\n                  original={original}\n                  isSelected={selectedItems.includes(index)}\n                  onSave={() => {}}\n                  onSelect={() => setSelectedItems([...selectedItems, index])}\n                  onDeselect={() =>\n                    setSelectedItems(selectedItems.filter(sid => sid !== index))\n                  }\n                  onRemove={() => {}}\n                />\n              </div>\n            ),\n          )}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <p>\n        We support a multitude of import formats including our custom own. All\n        of the formats are CSV based, select the desired format to learn more.\n      </p>\n      <p className=\"mb-4\">\n        After uploading a file and startig import you'll be able to preview the\n        data.\n      </p>\n      {!importActive ? (\n        <Button text=\"Import data\" onClick={() => setImportActive(true)} />\n      ) : (\n        <Tabs defaultSelectedTabId=\"letterboxd\" vertical>\n          <Tab\n            id=\"general\"\n            title=\"General\"\n            panel={\n              <p>\n                We support a multitude of import formats including our custom\n                own.\n              </p>\n            }\n          />\n          <Tab\n            id=\"letterboxd\"\n            title=\"Letterboxd\"\n            panelClassName=\"flex-grow\"\n            panel={importState === 'selecting' ? selectImport() : startImport()}\n          />\n          <Tab id=\"rotten\" title=\"Rotten Tomatoes\" panel={<div>tmasd</div>} />\n          <Tab id=\"imdb\" title=\"IMDB\" panel={<div>tmasd</div>} />\n        </Tabs>\n      )}\n    </>\n  );\n}\n","export const supportEmail = 'help@seenit.show';\n","import React from 'react';\nimport {\n  H1,\n  H2,\n  Checkbox,\n  FormGroup,\n  NumericInput,\n  Button,\n  Spinner,\n  Tabs,\n  Tab,\n} from '@blueprintjs/core';\nimport { Formik, Form } from 'formik';\n\nimport { useUpdateSettingsMutation, useSettingsQuery } from '../graphql';\nimport { updateUserSettings } from '../graphql/helpers';\n\nimport Blacklist from './Blacklist';\nimport Import from './Import';\n\nexport default function Settings() {\n  const { data, loading } = useSettingsQuery({\n    pollInterval: 60000,\n    fetchPolicy: 'network-only',\n  });\n  const currentSettings = data?.settings;\n  const [updateSettings] = useUpdateSettingsMutation({\n    update: (cache, { data }) => {\n      if (!data) return;\n\n      updateUserSettings(cache, data.updateSettings);\n    },\n  });\n\n  const form =\n    loading || !currentSettings\n      ? null\n      : {\n          general: {\n            autoConvert: currentSettings.general.autoConvert,\n          },\n          extension: {\n            autoTrack: currentSettings.extension.autoTrack,\n            minLengthSeconds: currentSettings.extension.minLengthSeconds,\n            blacklist: currentSettings.extension.blacklist,\n          },\n        };\n\n  return (\n    <>\n      <H1>Settings</H1>\n      <Tabs defaultSelectedTabId=\"importexport\">\n        <Tab\n          id=\"preferences\"\n          title=\"Preferences\"\n          panel={\n            !form ? (\n              <Spinner size={16} />\n            ) : (\n              <Formik\n                onSubmit={values => updateSettings({ variables: values })}\n                enableReinitialize\n                initialValues={form}\n              >\n                {({ values, handleChange, setFieldValue, isSubmitting }) => (\n                  <Form>\n                    <div>\n                      <H2 className=\"mt-4\">General</H2>\n                      <p className=\"mb-4\">Site specific settings</p>\n\n                      <FormGroup\n                        label=\"Auto tracked\"\n                        helperText=\"Enabling this publishes identified auto tracked items directly to your watched list instead of saving them as a draft first\"\n                      >\n                        <Checkbox\n                          name=\"general.autoConvert\"\n                          label=\"Automatically publish eligible items\"\n                          checked={values.general.autoConvert}\n                          onChange={handleChange}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div>\n                      <H2 className=\"mt-4\">Extension</H2>\n                      <p className=\"mb-4\">\n                        Controls the browser extension behavior\n                      </p>\n\n                      <FormGroup\n                        label=\"Tracking\"\n                        helperText=\"Enabling this removes the watched popup after finishing a video and instead automatically saves the item as a draft\"\n                      >\n                        <Checkbox\n                          name=\"extension.autoTrack\"\n                          label=\"Automatically track finished videos\"\n                          checked={values.extension.autoTrack}\n                          onChange={handleChange}\n                        />\n                      </FormGroup>\n                      <FormGroup\n                        label=\"Minimum video length\"\n                        helperText=\"Specify minimum amount in seconds for videos to be registered as watched\"\n                      >\n                        <NumericInput\n                          onValueChange={value =>\n                            setFieldValue('extension.minLengthSeconds', value)\n                          }\n                          value={values.extension.minLengthSeconds}\n                        />\n                      </FormGroup>\n                      <Blacklist\n                        list={values.extension.blacklist}\n                        updateList={list =>\n                          setFieldValue('extension.blacklist', list)\n                        }\n                        helperTextPrefix={\n                          <p>List of domains that are not tracked</p>\n                        }\n                      />\n                    </div>\n                    <Button type=\"submit\" loading={isSubmitting}>\n                      Save\n                    </Button>\n                  </Form>\n                )}\n              </Formik>\n            )\n          }\n        />\n        <Tab id=\"importexport\" title=\"Import / Export\" panel={<Import />} />\n        {/* <Tabs.Expander /> */}\n      </Tabs>\n    </>\n  );\n}\n","import React from 'react';\nimport { NonIdealState, Button } from '@blueprintjs/core';\nimport { Link } from 'react-router-dom';\n\nexport default function NotFound() {\n  return (\n    <NonIdealState\n      icon=\"map\"\n      className=\"p-5\"\n      title=\"Uh oh\"\n      description=\"Page not found. You sure the link is correct?\"\n      action={\n        <Link to=\"/\">\n          <Button>Go to homepage</Button>\n        </Link>\n      }\n    />\n  );\n}\n","import React, { ReactNode } from 'react';\n\nexport default function BasicLayout({ children }: { children: ReactNode }) {\n  return <div className=\"p-4\">{children}</div>;\n}\n","import React, { useState } from 'react';\n\nimport {\n  MovieQuery,\n  TvQuery,\n  SearchItem,\n  useTvQuery,\n  useMovieQuery,\n  ItemType,\n  ItemDataFragment,\n} from '../graphql';\nimport { Dialog, Spinner, Code } from '@blueprintjs/core';\nimport Search from '../common/Search';\nimport { RelativeDate } from '../common/RelativeDate';\nimport { EditingWatched } from '../common/WatchedForm';\nimport WatchedMutationForm from '../common/WatchedMutationForm';\nimport { getAppContainer } from '../common/helpers/general';\n\nexport default function AutoTrackedDialog({\n  item,\n  editingWatched,\n  onClose,\n}: {\n  item?: MovieQuery['movie'] | TvQuery['tv'] | ItemDataFragment | null;\n  editingWatched: EditingWatched;\n  onClose: () => void;\n}) {\n  const [selected, setSelected] = useState<SearchItem>();\n  const queryVariables = { id: selected?.id };\n  const tvQuery = useTvQuery({\n    variables: queryVariables,\n    skip: selected?.type !== ItemType.Tv,\n  });\n  const movieQuery = useMovieQuery({\n    variables: queryVariables,\n    skip: selected?.type !== ItemType.Movie,\n  });\n  const { data, loading } =\n    selected?.type === ItemType.Movie ? movieQuery : tvQuery;\n\n  const dataItem = data ? ('tv' in data ? data.tv : data.movie) : undefined;\n  const selectedItem = item || dataItem;\n\n  const title = item\n    ? `Seen ${'name' in item ? item.name : item.title}`\n    : 'Find auto tracked';\n  const meta =\n    editingWatched && !editingWatched.isEditing && editingWatched.autoTracked\n      ? editingWatched.autoTracked.meta\n      : undefined;\n\n  return (\n    <Dialog\n      className=\"fluid-dialog\"\n      title={title}\n      canOutsideClickClose={false}\n      isOpen={!!editingWatched}\n      lazy\n      onClose={onClose}\n      portalContainer={getAppContainer()}\n    >\n      {!item &&\n        editingWatched &&\n        'autoTracked' in editingWatched &&\n        editingWatched.autoTracked && (\n          <div className=\"p-3\">\n            <p>\n              Seen <RelativeDate date={editingWatched.autoTracked.createdAt} />\n            </p>\n            <strong>Here's what we know:</strong>\n            {meta && meta.title && (\n              <p className=\"mb-1\">\n                <span>Title read as </span>\n                <Code>{meta.title}</Code>\n              </p>\n            )}\n            {meta && meta.tvData && (\n              <div className=\"mb-1\">\n                <span>TV info - </span>\n                {meta.tvData.season && <span>S{meta.tvData.season}</span>}\n                {meta.tvData.episode && <span>E{meta.tvData.episode}</span>}\n              </div>\n            )}\n            {meta && meta.provider && (\n              <div className=\"mb-1\">\n                <span>Tracked on {meta.provider}, from</span>\n                <br />\n                {meta.url && (\n                  <Code\n                    className=\"mt-1\"\n                    style={{\n                      display: 'inline-block',\n                      textOverflow: 'ellipsis',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '320px',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    {meta.url}\n                  </Code>\n                )}\n                {meta.filename && (\n                  <Code\n                    className=\"mt-1\"\n                    style={{\n                      display: 'inline-block',\n                      textOverflow: 'ellipsis',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '320px',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    {meta.filename}\n                  </Code>\n                )}\n              </div>\n            )}\n            <Search selected={selected} setSelected={setSelected} />\n          </div>\n        )}\n      {loading && <Spinner />}\n      {selectedItem && !loading && (\n        <WatchedMutationForm\n          item={selectedItem}\n          editingWatched={editingWatched}\n          afterSave={onClose}\n        />\n      )}\n    </Dialog>\n  );\n}\n","import React, { ComponentProps } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport { DialogQueryParams } from './common/dialog/query-params';\nimport { useAutoTrackedQuery, useWatchedQuery } from './graphql';\n\nimport AutoTrackedDialog from './show/AutoTrackedDialog';\nimport WatchedDialog from './show/WatchedDialog';\n\n// This should be broken up into smaller pieces, maybe a HOC for onClose handlers\n// Need to add support for totally new entries, that requires the ability to separately identify the item whether it's a movie/tv and query it\nconst AutoTrackedDialogWithQueryParams = (\n  props: Omit<ComponentProps<typeof AutoTrackedDialog>, 'onClose'>,\n) => {\n  const history = useHistory();\n  return (\n    <AutoTrackedDialog\n      {...props}\n      onClose={() => {\n        const searchParams = new URLSearchParams(history.location.search);\n        searchParams.delete(DialogQueryParams.EditingAutoTracked);\n\n        history.replace(`${history.location.pathname}?${searchParams}`);\n      }}\n    />\n  );\n};\n\nconst WatchedDialogWithQueryParams = (\n  props: Omit<ComponentProps<typeof WatchedDialog>, 'onClose'>,\n) => {\n  const history = useHistory();\n  return (\n    <WatchedDialog\n      {...props}\n      onClose={() => {\n        const searchParams = new URLSearchParams(history.location.search);\n        searchParams.delete(DialogQueryParams.EditingWatched);\n\n        history.replace(`${history.location.pathname}?${searchParams}`);\n      }}\n    />\n  );\n};\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default function DialogRoutes() {\n  let query = useQuery();\n  const editingAutoTracked = query.get(DialogQueryParams.EditingAutoTracked);\n  const editingWatched = query.get(DialogQueryParams.EditingWatched);\n\n  const { data: autoTrackedData } = useAutoTrackedQuery({\n    variables: {\n      id: editingAutoTracked || '',\n    },\n    skip: !editingAutoTracked,\n  });\n  const { data: watchedData } = useWatchedQuery({\n    variables: {\n      id: editingWatched || '',\n    },\n    skip: !editingWatched,\n  });\n\n  if (editingAutoTracked && autoTrackedData) {\n    const { autoTracked } = autoTrackedData;\n\n    return (\n      <AutoTrackedDialogWithQueryParams\n        item={autoTracked.item}\n        editingWatched={{\n          isEditing: false,\n          autoTracked: {\n            id: autoTracked.id,\n            createdAt: autoTracked.createdAt,\n            meta: autoTracked.meta,\n            tvItemId: autoTracked.tvItem?.id,\n          },\n        }}\n      />\n    );\n  }\n\n  if (editingWatched && watchedData) {\n    const { watched } = watchedData;\n\n    return (\n      <WatchedDialogWithQueryParams\n        editingWatched={{\n          isEditing: true,\n          item: watched,\n        }}\n        item={watched.item}\n      />\n    );\n  }\n\n  return null;\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.scss';\nimport AuthRoute from './auth/AuthRoute';\nimport Navigation from './common/Navigation';\n\nimport Login from './auth/Login';\nimport Home from './Home';\nimport Profile from './profile/Profile';\nimport Setup from './setup/Setup';\nimport Dashboard from './dashboard/Dashboard';\nimport Movie from './show/Movie/Movie';\nimport Tv from './show/Tv/Tv';\nimport Settings from './settings/Settings';\nimport NotFound from './generic/NotFound';\nimport BasicLayout from './layouts/BasicLayout';\nimport DialogRoutes from './DialogRoutes';\n\nexport default function App() {\n  return (\n    <div id=\"app-main\" className=\"app-container bp3-dark\">\n      <Navigation />\n      <div>\n        <Switch>\n          <AuthRoute\n            exact\n            path=\"/\"\n            component={Dashboard}\n            redirectComponent={Home}\n          />\n          <Route path=\"/movie/:id\" component={Movie} />\n          <Route path=\"/tv/:id\" component={Tv} />\n          <Route exact path=\"/profile/:name\" component={Profile} />\n          <BasicLayout>\n            <Switch>\n              <Route exact path=\"/setup\" component={Setup} />\n              <Route exact path=\"/login\" component={Login} />\n              <AuthRoute exact path=\"/settings\" component={Settings} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </BasicLayout>\n        </Switch>\n\n        <DialogRoutes />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Resolvers, gql, ApolloCache, ApolloClient } from '@apollo/client';\nimport { setAuthData } from './helpers';\n\nexport const typeDefs = gql`\n  extend type Query {\n    auth: User\n    isExtensionCheckDone: Boolean\n  }\n`;\n\nexport const resolvers: Resolvers = {\n  Mutation: {\n    logout: (\n      root,\n      variables,\n      { cache, client }: { cache: ApolloCache<any>; client: ApolloClient<any> },\n    ) => {\n      setAuthData(cache);\n      const currentCache = cache.extract();\n      const preservedCache = {\n        ROOT_QUERY: {\n          isExtensionCheckDone: currentCache.ROOT_QUERY.isExtensionCheckDone,\n        },\n      };\n      cache.restore(preservedCache);\n    },\n  },\n};\n","export interface PossibleTypesResultData {\n  possibleTypes: {\n    [key: string]: string[];\n  };\n}\nconst result: PossibleTypesResultData = {\n  possibleTypes: {\n    Item: ['Movie', 'Tv'],\n    TvItem: ['Season', 'Episode'],\n    TmdbMedia: ['TmdbMovie', 'TmdbTv'],\n    AutoTrackedResult: ['AutoTracked', 'Watched'],\n  },\n};\nexport default result;\n","import { TypePolicies } from '@apollo/client';\n\nimport { WatchedCursor } from '.';\n\nconst typePolicies: TypePolicies = {\n  WatchedCursor: {\n    fields: {\n      watched: {\n        read(watched: WatchedCursor['watched'], { readField }) {\n          return watched.filter(item => !!readField('id', item));\n        },\n      },\n    },\n  },\n  Query: {\n    fields: {\n      autoTracked(_, { args, toReference }) {\n        return toReference({\n          __typename: 'AutoTracked',\n          id: args?.id,\n        });\n      },\n    },\n  },\n};\n\nexport default typePolicies;\n","const extensionSyncTimeout = 5000;\n\nexport const extensionSyncPromise = new Promise((resolve, reject) => {\n  document.addEventListener('seenit-extension-sync', () => resolve(true));\n\n  setTimeout(() => reject('timeout'), extensionSyncTimeout);\n}).catch(() => false);\n\nexport const extensionCheckPromise = new Promise((resolve, reject) => {\n  if (!process.env.REACT_APP_EXTENSION_ID)\n    return reject('Missing extension id variable');\n\n  try {\n    chrome.runtime.sendMessage(\n      process.env.REACT_APP_EXTENSION_ID,\n      // process.env.REACT_APP_EXTENSION_ID.slice(0, -1) + 'a',\n      'ping',\n      response => {\n        if (chrome.runtime.lastError) return reject(chrome.runtime.lastError);\n\n        if (response === 'pong') return resolve(true);\n      },\n    );\n  } catch (err) {\n    reject(err);\n  }\n});\n\nexport const extensionAuthPromise = extensionCheckPromise\n  .then(() => extensionSyncPromise)\n  .catch(() => false);\n","import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from '@apollo/client/link/context';\nimport { createUploadLink } from 'apollo-upload-client';\n\nimport { resolvers, typeDefs } from './graphql/resolvers';\nimport { getStorageValue } from './common/helpers/storage';\nimport introspectionQueryResultData from './graphql/introspection';\nimport { AuthDocument, IsExtensionCheckDoneDocument } from './graphql';\nimport { setAuthData } from './graphql/helpers';\nimport typePolicies from './graphql/typePolicies';\nimport { extensionAuthPromise } from './services/extension';\n\nextensionAuthPromise.then(d => {\n  cache.writeQuery({\n    query: AuthDocument,\n    data: {\n      auth: getStorageValue('userData') || null,\n    },\n  });\n  cache.writeQuery({\n    query: IsExtensionCheckDoneDocument,\n    data: {\n      isExtensionCheckDone: true,\n    },\n  });\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  const isAuthenticationError = graphQLErrors?.some(\n    ({ extensions = {} }) => extensions.code === 'UNAUTHENTICATED',\n  );\n\n  if (isAuthenticationError) {\n    // TODO: implement refresh token\n    setAuthData(cache);\n    return;\n  }\n});\n\nexport const cache = new InMemoryCache({\n  possibleTypes: introspectionQueryResultData.possibleTypes,\n  typePolicies,\n  // cacheRedirects: {\n  //   Query: {\n  //     movie: (_, { id }, { getCacheKey }) =>\n  //       getCacheKey({ __typename: 'Movie', id }),\n  //     tv: (_, { id }, { getCacheKey }) => getCacheKey({ __typename: 'Tv', id }),\n  //     watched: (_, { id }, { getCacheKey }) =>\n  //       getCacheKey({ __typename: 'Watched', id }),\n  //     user: (_, { id }, { getCacheKey }) =>\n  //       id ? getCacheKey({ __typename: 'User', id }) : undefined,\n  //     // getCacheKey({ __typename: 'Watched', id }),\n  //     // Try adding user: User?\n  //   },\n  //   Watched: {\n  //     user: (watched, args, { getCacheKey }) => {\n  //       return watched && watched.userId\n  //         ? getCacheKey({ __typename: 'User', id: watched.userId })\n  //         : undefined;\n  //     },\n  //   },\n  // },\n});\n\nconst uri = process.env.REACT_APP_API_URL;\nconst httpLink = new BatchHttpLink({\n  uri,\n});\n\nconst authLink = setContext(async request => {\n  await extensionAuthPromise;\n  const token = getStorageValue('token');\n\n  return {\n    headers: {\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nexport const apolloClient = new ApolloClient({\n  cache,\n  resolvers,\n  // TODO: follow issue till base param and errorLink gets addressed\n  // uri: `http://localhost:9000/graphql`,\n  // headers: {\n  //   authorization: getStorageValue('token')\n  //     ? `Bearer ${getStorageValue('token')}`\n  //     : '',\n  // },\n  // defaultOptions: {\n  //   query: {\n  //     fetchPolicy: 'network-only',\n  //   },\n  // },\n  link: ApolloLink.from([\n    errorLink,\n    authLink,\n    // httpLink,\n    createUploadLink({ uri }),\n  ]),\n  typeDefs,\n});\n","import React, { ReactNode } from 'react';\n\nimport { useIsExtensionCheckDoneQuery } from './graphql';\n\nconst ExtensionSetupBlocker = ({ children }: { children: ReactNode }) => {\n  const { data } = useIsExtensionCheckDoneQuery();\n\n  return data?.isExtensionCheckDone ? <>{children}</> : null;\n};\n\nexport default ExtensionSetupBlocker;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { apolloClient } from './apollo';\nimport ExtensionSetupBlocker from './ExtensionSetupBlocker';\n\n(async () => {\n  ReactDOM.render(\n    <ApolloProvider client={apolloClient}>\n      <BrowserRouter>\n        <ExtensionSetupBlocker>\n          <App />\n        </ExtensionSetupBlocker>\n      </BrowserRouter>\n    </ApolloProvider>,\n    document.getElementById('root'),\n  );\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}